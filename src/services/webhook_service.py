#!/usr/bin/env python3
"""
Webhook Service Manager pour PostFlow
Gestionnaire central des webhooks Frame.io int√©gr√© au pipeline principal
"""

import json
import logging
import threading
import time
from pathlib import Path
from typing import Dict, Any, Optional

from ..integrations.frameio.webhook_manager import FrameIOWebhookManager
from ..utils.upload_tracker import UploadTracker

logger = logging.getLogger(__name__)


def create_webhook_http_handler(webhook_manager):
    """
    Cr√©e un gestionnaire de webhook compatible avec le RangeHTTPRequestHandler
    
    Args:
        webhook_manager: Instance du FrameIOWebhookManager
        
    Returns:
        function: Gestionnaire de requ√™te HTTP pour les webhooks
    """
    def handle_webhook_request(request_handler):
        """
        Traite une requ√™te webhook HTTP brute
        
        Args:
            request_handler: Instance du RangeHTTPRequestHandler
        """
        try:
            # Lire le contenu de la requ√™te
            content_length = int(request_handler.headers.get('Content-Length', 0))
            raw_body = request_handler.rfile.read(content_length).decode('utf-8')
            
            # Extraire les headers n√©cessaires
            headers = dict(request_handler.headers)
            signature = headers.get('X-FrameIO-Signature')
            timestamp = headers.get('X-FrameIO-Timestamp')
            content_type = headers.get('Content-Type', 'application/json')
            
            logger.info(f"üîî Webhook re√ßu via range_server")
            logger.debug(f"üìã Headers: {headers}")
            logger.debug(f"üìã Body: {raw_body}")
            
            # V√©rifier la signature si configur√©e
            if webhook_manager.webhook_data.get("signing_secret") and signature and timestamp:
                if not webhook_manager.verify_frameio_signature(signature, timestamp, raw_body, 
                                                   webhook_manager.webhook_data["signing_secret"]):
                    logger.warning("‚ö†Ô∏è Signature webhook Frame.io invalide")
                    request_handler.send_error(401, "Invalid signature")
                    return
                logger.debug("‚úÖ Signature webhook v√©rifi√©e")
            
            # Parser les donn√©es JSON
            try:
                webhook_data = json.loads(raw_body) if raw_body else {}
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Erreur parsing JSON: {e}")
                request_handler.send_error(400, "Invalid JSON")
                return
            
            # Traiter le webhook
            webhook_manager.process_webhook_sync(webhook_data)
            
            # Envoyer la r√©ponse de succ√®s
            request_handler.send_response(200)
            request_handler.send_header('Content-Type', 'application/json')
            request_handler.end_headers()
            
            response = json.dumps({
                "status": "success",
                "message": "Webhook processed"
            }).encode('utf-8')
            
            request_handler.wfile.write(response)
            
            logger.info("‚úÖ Webhook trait√© avec succ√®s via range_server")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement webhook via range_server: {e}")
            try:
                request_handler.send_error(500, "Internal server error")
            except:
                pass  # Ignorer si on ne peut pas envoyer l'erreur
    
    return handle_webhook_request


class WebhookService:
    """
    Service central pour la gestion des webhooks Frame.io
    Int√©gr√© dans le pipeline principal PostFlow
    """
    
    def __init__(self, 
                 upload_tracker: UploadTracker,
                 config: Dict[str, Any],
                 auto_start: bool = True,
                 frameio_auth=None):
        """
        Initialise le service webhook
        
        Args:
            upload_tracker: Instance du tracker d'uploads
            config: Configuration du pipeline
            auto_start: D√©marrer automatiquement le service
            frameio_auth: Instance d'authentification Frame.io
        """
        self.upload_tracker = upload_tracker
        self.config = config
        self.auto_start = auto_start
        self.frameio_auth = frameio_auth  # Stocker la r√©f√©rence frameio_auth
        
        # Configuration webhook
        webhook_config = config.get('webhook', {})
        self.webhook_port = webhook_config.get('port', 5000)
        self.webhook_enabled = webhook_config.get('enabled', True)
        self.intelligent_tracking_enabled = webhook_config.get('intelligent_tracking', True)
        
        # Gestionnaire webhook
        self.webhook_manager = None
        self.intelligent_tracker = None  # Tracking intelligent
        self.is_running = False
        self.service_thread = None
        
        # √âtat du service
        self.service_stats = {
            "status": "inactive",
            "start_time": None,
            "webhook_url": None,
            "webhook_port": self.webhook_port,
            "events_processed": 0,
            "last_event": None,
            "intelligent_tracking_enabled": self.intelligent_tracking_enabled
        }
        
        # Fichier de statut pour le dashboard
        self.status_file = Path("data/webhook_status.json")
        
        logger.info(f"üé£ Service webhook initialis√© (port: {self.webhook_port}, auto_start: {auto_start})")
    
    def _save_status_to_file(self):
        """Sauvegarde le statut du webhook dans un fichier JSON pour le dashboard"""
        try:
            self.status_file.parent.mkdir(exist_ok=True)
            with open(self.status_file, 'w', encoding='utf-8') as f:
                json.dump(self.service_stats, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde statut webhook: {e}")

    def start_service(self) -> bool:
        """
        D√©marre le service webhook
        
        Returns:
            bool: True si d√©marr√© avec succ√®s
        """
        try:
            if not self.webhook_enabled:
                logger.info("‚ö†Ô∏è Service webhook d√©sactiv√© dans la configuration")
                return False
            
            if self.is_running:
                logger.warning("‚ö†Ô∏è Service webhook d√©j√† en cours")
                return True
            
            logger.info("üöÄ D√©marrage du service webhook...")
            
            # Cr√©er le gestionnaire webhook
            self.webhook_manager = FrameIOWebhookManager(
                upload_tracker=self.upload_tracker,
                webhook_port=self.webhook_port,
                frameio_auth=self.frameio_auth
            )
            
            # D√©marrer en arri√®re-plan
            self.service_thread = threading.Thread(
                target=self._run_webhook_service,
                daemon=True,
                name="WebhookService"
            )
            self.service_thread.start()
            
            # Attendre que le service soit pr√™t
            max_wait = 30  # secondes
            waited = 0
            while waited < max_wait and not self.is_running:
                time.sleep(1)
                waited += 1
            
            if self.is_running:
                webhook_url = self.webhook_manager.get_public_webhook_url()
                self.service_stats.update({
                    "status": "active",
                    "start_time": time.time(),
                    "webhook_url": webhook_url
                })
                
                # Activer le tracking intelligent si configur√©
                if self.intelligent_tracking_enabled:
                    self._setup_intelligent_tracking()
                
                logger.info(f"‚úÖ Service webhook actif: {webhook_url}")
                return True
            else:
                logger.error("‚ùå Timeout d√©marrage service webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage service webhook: {e}")
            return False
    
    def integrate_with_shared_server(self, shared_http_server):
        """
        Int√®gre le service webhook avec le serveur HTTP partag√© (range_server)
        
        Args:
            shared_http_server: Instance du RangeFileServer partag√©
        """
        try:
            if not self.webhook_manager:
                logger.warning("‚ö†Ô∏è Webhook manager non initialis√© pour l'int√©gration")
                return False
            
            # Cr√©er le gestionnaire de webhook pour le range_server
            webhook_handler = create_webhook_http_handler(self.webhook_manager)
            
            # Configurer le range_server avec le gestionnaire
            shared_http_server.set_webhook_handler(webhook_handler)
            
            logger.info("üîó Service webhook int√©gr√© au serveur HTTP partag√©")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur int√©gration serveur partag√©: {e}")
            return False
    
    def start_service_with_shared_server(self, shared_http_server) -> bool:
        """
        D√©marre le service webhook en utilisant le serveur HTTP partag√© au lieu de Flask
        
        Args:
            shared_http_server: Instance du RangeFileServer partag√©
            
        Returns:
            bool: True si d√©marr√© avec succ√®s
        """
        try:
            if not self.webhook_enabled:
                logger.info("‚ö†Ô∏è Service webhook d√©sactiv√© dans la configuration")
                return False
            
            if self.is_running:
                logger.warning("‚ö†Ô∏è Service webhook d√©j√† en cours")
                return True
            
            logger.info("üöÄ D√©marrage du service webhook avec serveur partag√©...")
            
            # Cr√©er le gestionnaire webhook (sans d√©marrer Flask)
            self.webhook_manager = FrameIOWebhookManager(
                upload_tracker=self.upload_tracker,
                webhook_port=self.webhook_port,
                use_cloudflare_tunnel=True,  # Garder le tunnel pour l'exposition publique
                frameio_auth=self.frameio_auth
            )
            
            # D√©marrer seulement le tunnel Cloudflare (pas le serveur Flask)
            if self.webhook_manager.tunnel_manager:
                logger.info("üåê D√©marrage du tunnel Cloudflare...")
                tunnel_url = self.webhook_manager.tunnel_manager.start_webhook_tunnel(timeout=60)
                
                if tunnel_url:
                    self.webhook_manager.webhook_url = tunnel_url
                    self.webhook_manager.webhook_data["tunnel_info"] = self.webhook_manager.tunnel_manager.get_tunnel_info()
                    logger.info(f"‚úÖ Tunnel Cloudflare actif: {tunnel_url}")
                else:
                    logger.error("‚ùå √âchec d√©marrage tunnel Cloudflare")
                    return False
            
            # Int√©grer avec le serveur HTTP partag√©
            if not self.integrate_with_shared_server(shared_http_server):
                logger.error("‚ùå √âchec int√©gration serveur partag√©")
                return False
            
            # Marquer comme actif
            self.is_running = True
            webhook_url = self.webhook_manager.get_public_webhook_url()
            self.service_stats.update({
                "status": "active",
                "start_time": time.time(),
                "webhook_url": webhook_url
            })
            
            # Activer le tracking intelligent si configur√©
            if self.intelligent_tracking_enabled:
                self._setup_intelligent_tracking()
            
            logger.info(f"‚úÖ Service webhook actif avec serveur partag√©: {webhook_url}")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage service webhook partag√©: {e}")
            return False
    
    def _setup_intelligent_tracking(self):
        """Configure le tracking intelligent"""
        try:
            from ..integrations.frameio.intelligent_tracker import IntelligentWebhookTracker
            
            self.intelligent_tracker = IntelligentWebhookTracker(
                webhook_manager=self.webhook_manager,
                upload_tracker=self.upload_tracker
            )
            
            # Passer l'intelligent_tracker au webhook_manager
            self.webhook_manager.intelligent_tracker = self.intelligent_tracker
            
            # Int√©grer avec le webhook manager
            original_process = self.webhook_manager.process_webhook_sync
            
            def enhanced_process_webhook(webhook_data):
                # Traitement original
                original_process(webhook_data)
                
                # Traitement intelligent
                if self.intelligent_tracker:
                    self.intelligent_tracker.process_webhook_intelligently(webhook_data)
            
            self.webhook_manager.process_webhook_sync = enhanced_process_webhook
            
            logger.info("üß† Tracking intelligent activ√©")
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Tracking intelligent non disponible: {e}")
        except Exception as e:
            logger.error(f"‚ùå Erreur setup tracking intelligent: {e}")
    
    def _run_webhook_service(self):
        """Ex√©cute le service webhook en arri√®re-plan"""
        try:
            # D√©marrer le serveur webhook (avec tunnel)
            self.webhook_manager.start_webhook_server()
            self.is_running = True
            
            logger.info("üåê Service webhook en cours d'ex√©cution...")
            
            # Boucle de monitoring
            while self.is_running:
                try:
                    # V√©rifier l'√©tat du tunnel
                    if (self.webhook_manager.tunnel_manager and 
                        not self.webhook_manager.tunnel_manager.is_tunnel_healthy()):
                        logger.warning("‚ö†Ô∏è Tunnel webhook en panne, tentative de red√©marrage...")
                        # Le webhook manager devrait g√©rer le red√©marrage automatiquement
                    
                    time.sleep(30)  # V√©rification toutes les 30 secondes
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur monitoring webhook: {e}")
                    time.sleep(5)
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur service webhook: {e}")
        finally:
            self.is_running = False
    
    def stop_service(self):
        """Arr√™te le service webhook"""
        try:
            logger.info("üõë Arr√™t du service webhook...")
            
            self.is_running = False
            
            if self.webhook_manager:
                self.webhook_manager.stop_webhook_server()
            
            if self.service_thread and self.service_thread.is_alive():
                self.service_thread.join(timeout=10)
            
            self.service_stats.update({
                "status": "stopped",
                "webhook_url": None
            })
            
            logger.info("‚úÖ Service webhook arr√™t√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t service webhook: {e}")
    
    def get_service_status(self) -> Dict[str, Any]:
        """
        Retourne le statut du service webhook
        
        Returns:
            Dict: Statut du service
        """
        status = self.service_stats.copy()
        
        if self.webhook_manager:
            # Ajouter les stats du webhook manager
            webhook_stats = self.webhook_manager.get_webhook_stats()
            status.update({
                "webhook_stats": webhook_stats,
                "tunnel_info": webhook_stats.get("tunnel_info"),
                "events_processed": webhook_stats.get("total_events", 0),
                "last_event": webhook_stats.get("last_event")
            })
        
        return status
    
    def configure_frameio_webhook(self, account_id: str, workspace_id: str, frameio_auth) -> bool:
        """
        Configure automatiquement le webhook Frame.io
        
        Args:
            account_id: ID du compte Frame.io
            workspace_id: ID du workspace Frame.io
            frameio_auth: Authentification Frame.io
            
        Returns:
            bool: True si configur√© avec succ√®s
        """
        try:
            if not self.webhook_manager:
                logger.error("‚ùå Service webhook non d√©marr√©")
                return False
            
            if not self.webhook_manager.get_public_webhook_url():
                logger.error("‚ùå URL publique webhook non disponible")
                return False
            
            logger.info("üì° Configuration du webhook Frame.io...")
            
            success = self.webhook_manager.create_webhook_sync(
                frameio_auth=frameio_auth,
                account_id=account_id,
                workspace_id=workspace_id,
                webhook_name="PostFlow Webhook (Auto)"
            )
            
            if success:
                logger.info("‚úÖ Webhook Frame.io configur√© automatiquement")
                return True
            else:
                logger.error("‚ùå √âchec configuration webhook Frame.io")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur configuration webhook Frame.io: {e}")
            return False
    
    def get_webhook_url(self) -> Optional[str]:
        """Retourne l'URL publique du webhook"""
        if self.webhook_manager:
            return self.webhook_manager.get_public_webhook_url()
        return None
    
    def register_upload_for_intelligent_tracking(self, 
                                               upload_id: str, 
                                               filename: str,
                                               file_id: Optional[str] = None,
                                               project_id: Optional[str] = None,
                                               workspace_id: Optional[str] = None) -> bool:
        """
        Enregistre un upload pour tracking intelligent
        
        Args:
            upload_id: ID interne de l'upload
            filename: Nom du fichier
            file_id: ID Frame.io du fichier (optionnel)
            project_id: ID du projet Frame.io (optionnel)
            workspace_id: ID du workspace Frame.io (optionnel)
            
        Returns:
            bool: True si enregistr√© avec succ√®s
        """
        try:
            if not self.intelligent_tracker:
                logger.warning("‚ö†Ô∏è Tracking intelligent non disponible")
                return False
            
            self.intelligent_tracker.register_upload_for_tracking(
                upload_id=upload_id,
                filename=filename,
                file_id=file_id,
                project_id=project_id,
                workspace_id=workspace_id
            )
            
            logger.info(f"üìù Upload enregistr√© pour tracking intelligent: {filename}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur enregistrement tracking: {e}")
            return False
    
    def get_intelligent_tracking_stats(self) -> Dict[str, Any]:
        """
        Retourne les statistiques du tracking intelligent
        
        Returns:
            Dict: Statistiques ou dictionnaire vide si non disponible
        """
        try:
            if self.intelligent_tracker:
                return self.intelligent_tracker.get_tracking_statistics()
            else:
                return {"error": "Tracking intelligent non disponible"}
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration stats tracking: {e}")
            return {"error": str(e)}
    
    def get_upload_tracking_details(self, upload_id: str) -> Optional[Dict[str, Any]]:
        """
        Retourne les d√©tails de tracking pour un upload sp√©cifique
        
        Args:
            upload_id: ID de l'upload
            
        Returns:
            Dict: D√©tails de l'upload ou None
        """
        try:
            if self.intelligent_tracker:
                return self.intelligent_tracker.get_upload_details(upload_id)
            else:
                return None
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration d√©tails upload: {e}")
            return None
    
    def test_webhook(self) -> bool:
        """
        Teste le webhook avec un √©v√©nement simul√©
        
        Returns:
            bool: True si le test r√©ussit
        """
        try:
            if not self.webhook_manager:
                return False
            
            # √âv√©nement de test Frame.io V4
            test_event = {
                "type": "file.ready",
                "account": {"id": "test_account"},
                "project": {"id": "test_project"},
                "workspace": {"id": "test_workspace"},
                "resource": {
                    "id": "test_file_webhook",
                    "type": "file",
                    "name": "test_webhook.mp4",
                    "status": "ready"
                },
                "user": {"id": "test_user"}
            }
            
            # Traiter l'√©v√©nement
            self.webhook_manager.process_webhook_sync(test_event)
            
            logger.info("‚úÖ Test webhook r√©ussi")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur test webhook: {e}")
            return False
