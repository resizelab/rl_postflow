#!/usr/bin/env python3
"""
Webhook Service Manager pour PostFlow
Gestionnaire central des webhooks Frame.io int√©gr√© au pipeline principal
"""

import json
import logging
import threading
import time
from pathlib import Path
from typing import Dict, Any, Optional

from ..integrations.frameio.webhook_manager import FrameIOWebhookManager
from ..utils.upload_tracker import UploadTracker

logger = logging.getLogger(__name__)


class WebhookService:
    """
    Service central pour la gestion des webhooks Frame.io
    Int√©gr√© dans le pipeline principal PostFlow
    """
    
    def __init__(self, 
                 upload_tracker: UploadTracker,
                 config: Dict[str, Any],
                 auto_start: bool = True):
        """
        Initialise le service webhook
        
        Args:
            upload_tracker: Instance du tracker d'uploads
            config: Configuration du pipeline
            auto_start: D√©marrer automatiquement le service
        """
        self.upload_tracker = upload_tracker
        self.config = config
        self.auto_start = auto_start
        
        # Configuration webhook
        webhook_config = config.get('webhook', {})
        self.webhook_port = webhook_config.get('port', 5000)
        self.webhook_enabled = webhook_config.get('enabled', True)
        
        # Gestionnaire webhook
        self.webhook_manager = None
        self.is_running = False
        self.service_thread = None
        
        # √âtat du service
        self.service_stats = {
            "status": "inactive",
            "start_time": None,
            "webhook_url": None,
            "webhook_port": self.webhook_port,
            "events_processed": 0,
            "last_event": None
        }
        
        # Fichier de statut pour le dashboard
        self.status_file = Path("data/webhook_status.json")
        
        logger.info(f"üé£ Service webhook initialis√© (port: {self.webhook_port}, auto_start: {auto_start})")
    
    def _save_status_to_file(self):
        """Sauvegarde le statut du webhook dans un fichier JSON pour le dashboard"""
        try:
            self.status_file.parent.mkdir(exist_ok=True)
            with open(self.status_file, 'w', encoding='utf-8') as f:
                json.dump(self.service_stats, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde statut webhook: {e}")

    def start_service(self) -> bool:
        """
        D√©marre le service webhook
        
        Returns:
            bool: True si d√©marr√© avec succ√®s
        """
        try:
            if not self.webhook_enabled:
                logger.info("‚ö†Ô∏è Service webhook d√©sactiv√© dans la configuration")
                return False
            
            if self.is_running:
                logger.warning("‚ö†Ô∏è Service webhook d√©j√† en cours")
                return True
            
            logger.info("üöÄ D√©marrage du service webhook...")
            
            # Cr√©er le gestionnaire webhook
            self.webhook_manager = FrameIOWebhookManager(
                upload_tracker=self.upload_tracker,
                webhook_port=self.webhook_port
            )
            
            # D√©marrer en arri√®re-plan
            self.service_thread = threading.Thread(
                target=self._run_webhook_service,
                daemon=True,
                name="WebhookService"
            )
            self.service_thread.start()
            
            # Attendre que le service soit pr√™t
            max_wait = 30  # secondes
            waited = 0
            while waited < max_wait and not self.is_running:
                time.sleep(1)
                waited += 1
            
            if self.is_running:
                webhook_url = self.webhook_manager.get_public_webhook_url()
                self.service_stats.update({
                    "status": "active",
                    "start_time": time.time(),
                    "webhook_url": webhook_url
                })
                
                logger.info(f"‚úÖ Service webhook actif: {webhook_url}")
                return True
            else:
                logger.error("‚ùå Timeout d√©marrage service webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage service webhook: {e}")
            return False
    
    def _run_webhook_service(self):
        """Ex√©cute le service webhook en arri√®re-plan"""
        try:
            # D√©marrer le serveur webhook (avec tunnel)
            self.webhook_manager.start_webhook_server()
            self.is_running = True
            
            logger.info("üåê Service webhook en cours d'ex√©cution...")
            
            # Boucle de monitoring
            while self.is_running:
                try:
                    # V√©rifier l'√©tat du tunnel
                    if (self.webhook_manager.tunnel_manager and 
                        not self.webhook_manager.tunnel_manager.is_tunnel_healthy()):
                        logger.warning("‚ö†Ô∏è Tunnel webhook en panne, tentative de red√©marrage...")
                        # Le webhook manager devrait g√©rer le red√©marrage automatiquement
                    
                    time.sleep(30)  # V√©rification toutes les 30 secondes
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur monitoring webhook: {e}")
                    time.sleep(5)
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur service webhook: {e}")
        finally:
            self.is_running = False
    
    def stop_service(self):
        """Arr√™te le service webhook"""
        try:
            logger.info("üõë Arr√™t du service webhook...")
            
            self.is_running = False
            
            if self.webhook_manager:
                self.webhook_manager.stop_webhook_server()
            
            if self.service_thread and self.service_thread.is_alive():
                self.service_thread.join(timeout=10)
            
            self.service_stats.update({
                "status": "stopped",
                "webhook_url": None
            })
            
            logger.info("‚úÖ Service webhook arr√™t√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t service webhook: {e}")
    
    def get_service_status(self) -> Dict[str, Any]:
        """
        Retourne le statut du service webhook
        
        Returns:
            Dict: Statut du service
        """
        status = self.service_stats.copy()
        
        if self.webhook_manager:
            # Ajouter les stats du webhook manager
            webhook_stats = self.webhook_manager.get_webhook_stats()
            status.update({
                "webhook_stats": webhook_stats,
                "tunnel_info": webhook_stats.get("tunnel_info"),
                "events_processed": webhook_stats.get("total_events", 0),
                "last_event": webhook_stats.get("last_event")
            })
        
        return status
    
    def configure_frameio_webhook(self, account_id: str, workspace_id: str, frameio_auth) -> bool:
        """
        Configure automatiquement le webhook Frame.io
        
        Args:
            account_id: ID du compte Frame.io
            workspace_id: ID du workspace Frame.io
            frameio_auth: Authentification Frame.io
            
        Returns:
            bool: True si configur√© avec succ√®s
        """
        try:
            if not self.webhook_manager:
                logger.error("‚ùå Service webhook non d√©marr√©")
                return False
            
            if not self.webhook_manager.get_public_webhook_url():
                logger.error("‚ùå URL publique webhook non disponible")
                return False
            
            logger.info("üì° Configuration du webhook Frame.io...")
            
            success = self.webhook_manager.create_webhook_sync(
                frameio_auth=frameio_auth,
                account_id=account_id,
                workspace_id=workspace_id,
                webhook_name="PostFlow Webhook (Auto)"
            )
            
            if success:
                logger.info("‚úÖ Webhook Frame.io configur√© automatiquement")
                return True
            else:
                logger.error("‚ùå √âchec configuration webhook Frame.io")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur configuration webhook Frame.io: {e}")
            return False
    
    def get_webhook_url(self) -> Optional[str]:
        """Retourne l'URL publique du webhook"""
        if self.webhook_manager:
            return self.webhook_manager.get_public_webhook_url()
        return None
    
    def test_webhook(self) -> bool:
        """
        Teste le webhook avec un √©v√©nement simul√©
        
        Returns:
            bool: True si le test r√©ussit
        """
        try:
            if not self.webhook_manager:
                return False
            
            # √âv√©nement de test
            test_event = {
                "event_type": "file.ready",
                "resource": {
                    "id": "test_file_webhook",
                    "name": "test_webhook.mp4",
                    "status": "active",
                    "review_status": "needs_review"
                }
            }
            
            # Traiter l'√©v√©nement
            self.webhook_manager.process_webhook_sync(test_event)
            
            logger.info("‚úÖ Test webhook r√©ussi")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur test webhook: {e}")
            return False
