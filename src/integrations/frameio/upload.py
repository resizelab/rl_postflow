"""
Frame.io API v4 Upload Module
Gestion de l'upload de fichiers avec la s√©quence v4 recommand√©e
"""

import os
import asyncio
import hashlib
from typing import List, Dict, Optional, Any, Union
from dataclasses import dataclass
from pathlib import Path
from datetime import datetime
import logging
import httpx

from .auth import FrameIOAuth, FrameIOAuthError
from .structure import FrameIOStructureManager, FrameIOFolder
from .public_server import PublicFileServer, temporary_file_server

logger = logging.getLogger(__name__)

@dataclass
class FrameIOFile:
    """Repr√©sentation d'un fichier Frame.io"""
    id: str
    name: str
    size: int
    status: str
    folder_id: str
    project_id: str
    workspace_id: str
    account_id: str
    upload_urls: Optional[List[str]] = None
    download_url: Optional[str] = None
    thumbnail_url: Optional[str] = None
    review_url: Optional[str] = None  # Lien de review pour partage
    share_url: Optional[str] = None   # Lien de partage public
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

@dataclass
class UploadResult:
    """R√©sultat d'un upload"""
    file_id: str
    status: str
    name: str
    size: int
    url: Optional[str] = None
    error: Optional[str] = None

@dataclass
class UploadMetadata:
    """M√©tadonn√©es pour l'upload d'un fichier"""
    shot_id: str
    scene_name: str
    version: str
    file_path: str
    nomenclature: Optional[str] = None
    description: Optional[str] = None
    tags: Optional[List[str]] = None

class FrameIOUploadError(Exception):
    """Exception pour les erreurs d'upload Frame.io"""
    pass

class FrameIOUploadManager:
    """Gestionnaire d'upload Frame.io v4 avec s√©quence recommand√©e"""
    
    def __init__(self, auth: FrameIOAuth):
        self.auth = auth
        
        # Charger la configuration depuis l'auth
        current_config = self.auth._load_current_tokens()
        
        # R√©cup√©rer les IDs depuis la config en priorit√©, puis les variables d'environnement
        self.account_id = current_config.get('account_id') or os.getenv('FRAMEIO_ACCOUNT_ID')
        self.workspace_id = current_config.get('workspace_id') or os.getenv('FRAMEIO_WORKSPACE_ID')
        self.root_folder_id = current_config.get('root_folder_id') or os.getenv('FRAMEIO_ROOT_FOLDER_ID')
        self.base_url = current_config.get('base_url') or os.getenv('FRAMEIO_BASE_URL', 'https://api.frame.io/v4')
        self.chunk_size = int(os.getenv('FRAMEIO_CHUNK_SIZE', '8388608'))
        self.parallel_uploads = int(os.getenv('FRAMEIO_PARALLEL_UPLOADS', '2'))
        
        if not self.account_id:
            raise ValueError("account_id manquant dans la config frameio ou FRAMEIO_ACCOUNT_ID")
        if not self.workspace_id:
            raise ValueError("workspace_id manquant dans la config frameio ou FRAMEIO_WORKSPACE_ID")
        if not self.root_folder_id:
            raise ValueError("root_folder_id manquant dans la config frameio ou FRAMEIO_ROOT_FOLDER_ID")
        
        logger.info(f"üì§ FrameIOUploadManager - Account: {self.account_id}")
        
        self.structure_manager = FrameIOStructureManager(auth)
        
        # Serveur public pour les fichiers (optionnel)
        self.public_server = None
    
    def _calculate_file_hash(self, file_path: str) -> str:
        """Calculer le hash SHA-256 d'un fichier pour v√©rification d'int√©grit√©"""
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                sha256_hash.update(chunk)
        return sha256_hash.hexdigest()
    
    async def _create_file_placeholder(self, metadata: UploadMetadata, folder_id: str) -> Optional[FrameIOFile]:
        """
        √âtape 1: Cr√©er un fichier vide pour obtenir les upload_urls
        Endpoint: /accounts/{account_id}/folders/{folder_id}/files/local_upload
        """
        try:
            file_path = Path(metadata.file_path)
            if not file_path.exists():
                raise FileNotFoundError(f"Fichier non trouv√©: {file_path}")
            
            file_size = file_path.stat().st_size
            
            # Nouveau endpoint v4 pour l'upload local
            url = f"{self.base_url}/accounts/{self.account_id}/folders/{folder_id}/files/local_upload"
            
            # Pr√©parer le payload selon la documentation v4 (seulement name et file_size)
            payload = {
                "data": {
                    "name": file_path.name,
                    "file_size": file_size
                }
            }
            
            # Note: L'API v4 ne supporte pas description et tags lors de la cr√©ation
            # Ces m√©tadonn√©es peuvent √™tre ajout√©es apr√®s upload via une requ√™te PATCH
            
            response = await self.auth.request("POST", url, json=payload)
            
            # Debug en cas d'erreur 422
            if response.status_code == 422:
                logger.error(f"üîç Erreur 422 - Payload envoy√©: {payload}")
                logger.error(f"üîç R√©ponse serveur: {response.text}")
            
            response.raise_for_status()
            
            # La r√©ponse contient les donn√©es dans un objet "data"
            response_data = response.json()
            file_data = response_data.get("data", {})
            
            frameio_file = FrameIOFile(
                id=file_data["id"],
                name=file_data["name"],
                size=file_data.get("file_size", file_size),
                status=file_data.get("status", "created"),
                folder_id=folder_id,
                project_id=file_data.get("project_id", ""),
                workspace_id=self.workspace_id,
                account_id=self.account_id,
                upload_urls=[url_info["url"] for url_info in file_data.get("upload_urls", [])],
                download_url=file_data.get("download_url"),
                thumbnail_url=file_data.get("thumbnail_url"),
                review_url=file_data.get("review_url"),
                share_url=file_data.get("share_url"),
                created_at=file_data.get("created_at"),
                updated_at=file_data.get("updated_at")
            )
            
            logger.info(f"‚úÖ Fichier placeholder cr√©√©: {file_path.name} (ID: {frameio_file.id})")
            logger.info(f"üì§ {len(frameio_file.upload_urls)} URL(s) d'upload re√ßues")
            
            return frameio_file
            
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation placeholder: {e}")
            return None
    
    async def _get_project_id_from_folder(self, folder_id: str, workspace_id: str) -> Optional[str]:
        """R√©cup√©rer le project_id d'un dossier (helper method)"""
        try:
            # Pour l'instant, on utilise le project_id par d√©faut de la config
            # Dans une impl√©mentation compl√®te, on ferait un GET sur le folder
            return os.getenv("FRAMEIO_DEFAULT_PROJECT_ID")
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration project_id: {e}")
            return None
    
    async def _upload_file_chunks(self, file_path: str, upload_urls: List[str]) -> bool:
        """
        √âtape 2: Upload du fichier vers les URLs sign√©es
        """
        try:
            file_path_obj = Path(file_path)
            file_size = file_path_obj.stat().st_size
            
            if not upload_urls:
                logger.error("‚ùå Aucune URL d'upload fournie")
                return False
            
            # Pour la v4, g√©n√©ralement une seule URL d'upload
            upload_url = upload_urls[0]
            logger.info(f"üì§ Upload vers: {upload_url[:50]}...")
            
            # D√©tecter le Content-Type √† partir de l'extension
            import mimetypes
            content_type, _ = mimetypes.guess_type(file_path)
            if not content_type:
                content_type = "application/octet-stream"
            
            logger.info(f"üìù Content-Type d√©tect√©: {content_type}")
            
            # D√©tecter le Content-Type √† partir de l'extension
            import mimetypes
            content_type, _ = mimetypes.guess_type(file_path)
            if not content_type:
                content_type = "application/octet-stream"
            
            logger.info(f"üìù Content-Type d√©tect√©: {content_type}")
            
            headers = {
                "Content-Type": content_type,
                "x-amz-acl": ""  # Requis par l'URL sign√©e Frame.io
            }
            
            # Upload du fichier complet
            with open(file_path, "rb") as file_obj:
                file_content = file_obj.read()
                
                # Utiliser requests pour plus de contr√¥le sur les headers
                import requests
                response = requests.put(
                    upload_url,
                    data=file_content,
                    headers=headers,
                    timeout=300.0
                )
                
                # Frame.io peut renvoyer une erreur 403 m√™me avec la bonne configuration
                # C'est un probl√®me connu avec leur API v4 - nous documentons cela
                if response.status_code == 403:
                    logger.warning(f"‚ö†Ô∏è Erreur 403 Frame.io - probl√®me connu avec l'API v4")
                    logger.warning(f"üìÑ Response: {response.text[:200]}...")
                    return False
                
                if response.status_code in [200, 201, 204]:
                    logger.info(f"‚úÖ Upload r√©ussi: {file_path_obj.name} ({file_size} bytes)")
                    return True
                else:
                    logger.error(f"‚ùå Erreur upload: {response.status_code} - {response.text}")
                    return False
                        
        except Exception as e:
            logger.error(f"‚ùå Erreur upload fichier: {e}")
            return False
    
    async def _wait_for_processing(self, file_id: str, workspace_id: Optional[str] = None, 
                                  max_wait: int = 300) -> bool:
        """
        Attendre que le fichier soit trait√© par Frame.io
        
        Args:
            file_id: ID du fichier Frame.io
            workspace_id: ID du workspace (optionnel)
            max_wait: Temps d'attente maximum en secondes (d√©faut: 300)
            
        Returns:
            True si le traitement est termin√©, False sinon
        """
        try:
            ws_id = workspace_id or self.workspace_id
            
            # Endpoint pour r√©cup√©rer le statut d'un fichier
            url = f"{self.base_url}/files/{file_id}"
            
            start_time = datetime.now()
            last_status = None
            
            while (datetime.now() - start_time).total_seconds() < max_wait:
                try:
                    response = await self.auth.request("GET", url)
                    response.raise_for_status()
                    
                    file_data = response.json()
                    
                    # Extraire le statut selon la structure de r√©ponse
                    if "data" in file_data:
                        status = file_data["data"].get("status", "unknown")
                    else:
                        status = file_data.get("status", "unknown")
                    
                    # Afficher le statut seulement s'il change
                    if status != last_status:
                        logger.info(f"üìä Statut fichier {file_id}: {status}")
                        last_status = status
                    
                    # V√©rifier si le traitement est termin√©
                    if status in ["ready", "processed", "complete"]:
                        logger.info(f"‚úÖ Traitement termin√©: {file_id} -> {status}")
                        return True
                    
                    # V√©rifier si il y a une erreur
                    if status in ["error", "failed"]:
                        logger.error(f"‚ùå Erreur de traitement: {file_id} -> {status}")
                        return False
                    
                    # Attendre avant la prochaine v√©rification
                    await asyncio.sleep(5)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur v√©rification statut {file_id}: {e}")
                    await asyncio.sleep(10)
            
            logger.warning(f"‚è∞ Timeout atteint pour le traitement de {file_id}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erreur attente traitement {file_id}: {e}")
            return False
    
    async def upload_file(self, shot_id: str, file_path: str, scene_name: str,
                         project_id: Optional[str] = None, workspace_id: Optional[str] = None,
                         metadata: Optional[Dict[str, Any]] = None) -> Optional[FrameIOFile]:
        """
        Upload complet d'un fichier selon la nomenclature UNDLM_XXXXX
        
        Args:
            shot_id: ID du plan (ex: "UNDLM_00412")
            file_path: Chemin vers le fichier √† uploader
            scene_name: Nom de la sc√®ne (ex: "DOUANE MER - JOUR")
            project_id: ID du projet Frame.io (optionnel)
            workspace_id: ID du workspace (optionnel)
            metadata: M√©tadonn√©es additionnelles (optionnel)
        
        Returns:
            FrameIOFile si succ√®s, None sinon
        """
        try:
            file_path_obj = Path(file_path)
            if not file_path_obj.exists():
                raise FileNotFoundError(f"Fichier non trouv√©: {file_path}")
            
            # Extraire version depuis le nom du fichier
            filename = file_path_obj.name
            version = "v1"  # Par d√©faut
            if "_v" in filename:
                try:
                    version_part = filename.split("_v")[1].split(".")[0]
                    version = f"v{version_part}"
                except:
                    pass
            
            # Pr√©parer les m√©tadonn√©es
            upload_metadata = UploadMetadata(
                shot_id=shot_id,
                scene_name=scene_name,
                version=version,
                file_path=str(file_path),
                nomenclature=shot_id,
                description=metadata.get("description") if metadata else f"Plan {shot_id} - {scene_name}",
                tags=metadata.get("tags") if metadata else [shot_id, scene_name, version]
            )
            
            # 1. Trouver ou cr√©er le dossier de la sc√®ne
            proj_id = project_id or os.getenv("FRAMEIO_DEFAULT_PROJECT_ID")
            scene_folder = await self.structure_manager.find_or_create_scene_folder(
                scene_name, self.root_folder_id, proj_id, workspace_id
            )
            
            if not scene_folder:
                raise Exception(f"Impossible de cr√©er/trouver le dossier pour la sc√®ne: {scene_name}")
            
            logger.info(f"Upload de {filename} vers la sc√®ne {scene_name}")
            
            # 2. Cr√©er le fichier placeholder
            frameio_file = await self._create_file_placeholder(
                upload_metadata, scene_folder.id, workspace_id
            )
            
            if not frameio_file or not frameio_file.upload_urls:
                raise Exception("Impossible de cr√©er le fichier placeholder ou d'obtenir les URLs d'upload")
            
            # 3. Upload du fichier
            upload_success = await self._upload_file_chunks(file_path, frameio_file.upload_urls)
            
            if not upload_success:
                raise Exception("√âchec de l'upload du fichier")
            
            # 4. Attendre le traitement
            processing_success = await self._wait_for_processing(frameio_file.id, workspace_id)
            
            if processing_success:
                logger.info(f"Upload complet r√©ussi: {shot_id} - {filename}")
                # 5. Enrichir avec les liens de review
                frameio_file = await self.enrich_file_with_links(frameio_file)
                return frameio_file
            else:
                logger.warning(f"Upload termin√© mais traitement en cours: {shot_id}")
                # M√™me en cas de traitement en cours, on peut r√©cup√©rer les liens
                frameio_file = await self.enrich_file_with_links(frameio_file)
                return frameio_file
            
        except Exception as e:
            logger.error(f"Erreur upload fichier {shot_id}: {e}")
            return None
    
    async def batch_upload(self, files_metadata: List[Dict[str, Any]], 
                          max_concurrent: int = 2) -> List[Optional[FrameIOFile]]:
        """
        Upload de plusieurs fichiers en parall√®le (limit√© pour respecter les rate limits)
        
        Args:
            files_metadata: Liste des m√©tadonn√©es des fichiers √† uploader
                Chaque √©l√©ment doit contenir: shot_id, file_path, scene_name
            max_concurrent: Nombre maximum d'uploads simultan√©s
        
        Returns:
            Liste des FrameIOFile (None en cas d'√©chec pour un fichier)
        """
        try:
            # Utiliser un semaphore pour limiter la concurrence
            semaphore = asyncio.Semaphore(max_concurrent)
            
            async def upload_with_semaphore(file_metadata):
                async with semaphore:
                    return await self.upload_file(**file_metadata)
            
            # Lancer tous les uploads en parall√®le (avec limitation)
            tasks = [upload_with_semaphore(metadata) for metadata in files_metadata]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Traiter les r√©sultats
            final_results = []
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"Erreur upload fichier {i}: {result}")
                    final_results.append(None)
                else:
                    final_results.append(result)
            
            success_count = sum(1 for r in final_results if r is not None)
            logger.info(f"Batch upload termin√©: {success_count}/{len(files_metadata)} r√©ussis")
            
            return final_results
            
        except Exception as e:
            logger.error(f"Erreur batch upload: {e}")
            return [None] * len(files_metadata)

    async def upload_file_to_folder(self, file_path: str, folder_id: str, 
                                   metadata: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
        """
        Upload un fichier vers un dossier Frame.io sp√©cifique.
        Fonction principale pour l'int√©gration LucidLink ‚Üí Frame.io.
        
        Args:
            file_path: Chemin complet vers le fichier √† uploader
            folder_id: ID du dossier Frame.io de destination
            metadata: M√©tadonn√©es additionnelles (shot_id, scene_name, version, etc.)
            
        Returns:
            Dictionnaire avec les informations du fichier upload√© et le view_url,
            ou None en cas d'erreur
        """
        try:
            file_path_obj = Path(file_path)
            if not file_path_obj.exists():
                logger.error(f"‚ùå Fichier introuvable: {file_path}")
                return None
            
            # Pr√©parer les m√©tadonn√©es d'upload
            upload_metadata = UploadMetadata(
                shot_id=metadata.get('shot_id', '') if metadata else '',
                scene_name=metadata.get('scene_name', '') if metadata else '',
                version=metadata.get('version', 'V001') if metadata else 'V001',
                file_path=str(file_path_obj),
                nomenclature=metadata.get('nomenclature', file_path_obj.stem) if metadata else file_path_obj.stem,
                description=metadata.get('description', '') if metadata else '',
                tags=metadata.get('tags', []) if metadata else []
            )
            
            logger.info(f"üöÄ D√©but upload: {file_path_obj.name} ‚Üí Folder {folder_id}")
            
            # 1. Cr√©er le fichier placeholder et obtenir les URLs d'upload
            frameio_file = await self._create_file_placeholder(upload_metadata, folder_id)
            
            if not frameio_file or not frameio_file.upload_urls:
                logger.error("‚ùå Impossible de cr√©er le fichier placeholder ou d'obtenir les URLs d'upload")
                return None
            
            # 2. Upload du fichier vers les URLs sign√©es
            upload_success = await self._upload_file_chunks(str(file_path_obj), frameio_file.upload_urls)
            
            if not upload_success:
                logger.error("‚ùå √âchec de l'upload du fichier")
                return None
            
            # 3. R√©cup√©rer les informations finales du fichier (incluant view_url)
            file_info = await self._get_file_info(frameio_file.id)
            
            result = {
                'file_id': frameio_file.id,
                'name': frameio_file.name,
                'size': frameio_file.size,
                'status': 'uploaded',
                'folder_id': folder_id,
                'view_url': file_info.get('view_url') if file_info else None,
                'project_id': frameio_file.project_id,
                'upload_metadata': metadata
            }
            
            logger.info(f"‚úÖ Upload termin√© avec succ√®s: {file_path_obj.name}")
            logger.info(f"üîó View URL: {result.get('view_url', 'Non disponible')}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur upload fichier: {e}")
            return None

    def _generate_review_link(self, file_id: str, project_id: str) -> str:
        """
        G√©n√®re le lien de review Frame.io pour un fichier.
        
        Args:
            file_id: ID du fichier Frame.io
            project_id: ID du projet Frame.io
            
        Returns:
            URL de review
        """
        try:
            # Format standard Frame.io: https://app.frame.io/projects/{project_id}/files/{file_id}
            return f"https://app.frame.io/projects/{project_id}/files/{file_id}"
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration lien review: {e}")
            return f"https://app.frame.io/projects/{project_id}"
    
    async def get_upload_progress(self, file_id: str, project_id: str, 
                                 workspace_id: Optional[str] = None) -> Dict[str, Any]:
        """
        R√©cup√®re le statut d'upload d'un fichier.
        
        Args:
            file_id: ID du fichier Frame.io
            project_id: ID du projet
            workspace_id: ID du workspace (optionnel)
            
        Returns:
            Dictionnaire avec le statut d'upload
        """
        try:
            ws_id = workspace_id or self.workspace_id
            url = f"{self.base_url}/accounts/{self.account_id}/workspaces/{ws_id}/projects/{project_id}/files/{file_id}"
            
            response = await self.auth.request("GET", url)
            response.raise_for_status()
            
            data = response.json()
            
            return {
                'file_id': file_id,
                'status': data.get('status', 'unknown'),
                'progress': data.get('progress', 0),
                'processing_stage': data.get('processing_stage', 'unknown'),
                'ready_for_review': data.get('status') == 'ready',
                'error': data.get('error_message')
            }
            
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration statut upload: {e}")
            return {'file_id': file_id, 'status': 'error', 'error': str(e)}
    
    async def _get_file_info(self, file_id: str) -> Optional[Dict[str, Any]]:
        """
        R√©cup√©rer les informations compl√®tes d'un fichier apr√®s upload
        Pour obtenir le view_url notamment
        """
        try:
            # Endpoint pour r√©cup√©rer les infos d'un fichier
            # Note: L'endpoint exact peut varier selon la v4 Frame.io
            url = f"{self.base_url}/files/{file_id}"
            
            response = await self.auth.request("GET", url)
            response.raise_for_status()
            
            file_data = response.json()
            
            # Extraire les donn√©es selon la structure de r√©ponse
            if "data" in file_data:
                return file_data["data"]
            else:
                return file_data
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer les infos du fichier {file_id}: {e}")
            return None

    async def _create_file_remote_upload(self, file_path: str, folder_id: str, public_url: str) -> Optional[FrameIOFile]:
        """
        Nouvelle m√©thode: Upload via remote_upload endpoint
        Endpoint: POST /accounts/{account_id}/folders/{folder_id}/files/remote_upload
        
        Args:
            file_path: Chemin vers le fichier local
            folder_id: ID du dossier Frame.io de destination
            public_url: URL publique du fichier
            
        Returns:
            FrameIOFile cr√©√© ou None si erreur
        """
        try:
            file_path_obj = Path(file_path)
            if not file_path_obj.exists():
                raise FileNotFoundError(f"Fichier non trouv√©: {file_path_obj}")
            
            # Endpoint stable pour remote_upload (plus besoin de header alpha)
            url = f"{self.base_url}/accounts/{self.account_id}/folders/{folder_id}/files/remote_upload"
            
            # Payload simplifi√© pour remote_upload
            payload = {
                "data": {
                    "name": file_path_obj.name,
                    "source_url": public_url
                }
            }
            
            logger.info(f"üåê Remote upload: {file_path_obj.name} depuis {public_url}")
            
            response = await self.auth.request("POST", url, json=payload)
            
            if response.status_code == 422:
                logger.error(f"üîç Erreur 422 - Payload: {payload}")
                logger.error(f"üîç R√©ponse: {response.text}")
                return None
            
            response.raise_for_status()
            
            response_data = response.json()
            file_data = response_data.get("data", {})
            
            frameio_file = FrameIOFile(
                id=file_data["id"],
                name=file_data["name"],
                size=file_data.get("file_size", file_path_obj.stat().st_size),
                status=file_data.get("status", "uploading"),
                folder_id=folder_id,
                project_id=file_data.get("project_id", ""),
                workspace_id=self.workspace_id,
                account_id=self.account_id,
                download_url=file_data.get("download_url"),
                thumbnail_url=file_data.get("thumbnail_url"),
                created_at=file_data.get("created_at"),
                updated_at=file_data.get("updated_at")
            )
            
            logger.info(f"‚úÖ Remote upload initi√©: {file_path_obj.name} (ID: {frameio_file.id})")
            logger.info(f"üìä Statut: {frameio_file.status}")
            
            return frameio_file
            
        except Exception as e:
            logger.error(f"‚ùå Erreur remote upload: {e}")
            return None

    async def upload_file_remote(self, file_path: str, scene_name: str, shot_id: str, 
                               project_id: Optional[str] = None, 
                               workspace_id: Optional[str] = None,
                               metadata: Optional[Dict[str, Any]] = None,
                               public_server_host: str = "0.0.0.0",
                               public_server_port: int = 0) -> Optional[Dict[str, Any]]:
        """
        Upload un fichier local via remote_upload en utilisant un serveur HTTP temporaire
        
        Args:
            file_path: Chemin vers le fichier local
            scene_name: Nom de la sc√®ne
            shot_id: ID du plan
            project_id: ID du projet Frame.io (optionnel)
            workspace_id: ID du workspace (optionnel)
            metadata: M√©tadonn√©es additionnelles (optionnel)
            public_server_host: Host du serveur public (d√©faut: 0.0.0.0)
            public_server_port: Port du serveur public (d√©faut: auto)
            
        Returns:
            Dictionnaire avec les infos du fichier upload√© ou None si erreur
        """
        try:
            file_path_obj = Path(file_path)
            if not file_path_obj.exists():
                raise FileNotFoundError(f"Fichier non trouv√©: {file_path_obj}")
            
            logger.info(f"üöÄ D√©marrage upload remote: {file_path_obj.name}")
            
            # 1. Trouver ou cr√©er le dossier de la sc√®ne
            proj_id = project_id or os.getenv("FRAMEIO_DEFAULT_PROJECT_ID")
            ws_id = workspace_id or self.workspace_id
            
            scene_folder = await self.structure_manager.find_or_create_scene_folder(
                scene_name, self.root_folder_id, proj_id, ws_id
            )
            
            if not scene_folder:
                raise Exception(f"Impossible de cr√©er/trouver le dossier pour la sc√®ne: {scene_name}")
            
            # 2. D√©marrer le serveur public temporaire
            with temporary_file_server(host=public_server_host, port=public_server_port) as server:
                if not server:
                    raise Exception("Impossible de d√©marrer le serveur public temporaire")
                
                # 3. Exposer le fichier publiquement
                public_url = server.add_file(str(file_path_obj))
                if not public_url:
                    raise Exception("Impossible d'exposer le fichier publiquement")
                
                logger.info(f"üåê Fichier expos√©: {public_url}")
                
                # 4. Initier le remote upload
                frameio_file = await self._create_file_remote_upload(
                    str(file_path_obj), scene_folder.id, public_url
                )
                
                if not frameio_file:
                    raise Exception("√âchec de l'initiation du remote upload")
                
                # 5. Attendre que Frame.io t√©l√©charge le fichier
                logger.info("‚è≥ Attente du t√©l√©chargement par Frame.io...")
                
                # Attendre quelques secondes pour permettre √† Frame.io de commencer le t√©l√©chargement
                await asyncio.sleep(5)
                
                # 6. Attendre le traitement complet
                processing_success = await self._wait_for_processing(frameio_file.id, ws_id, max_wait=300)
                
                if not processing_success:
                    logger.warning("‚ö†Ô∏è Traitement non termin√© dans le d√©lai imparti")
                
                # 7. R√©cup√©rer les informations finales
                file_info = await self._get_file_info(frameio_file.id)
                
                result = {
                    'file_id': frameio_file.id,
                    'name': frameio_file.name,
                    'size': frameio_file.size,
                    'status': frameio_file.status,
                    'folder_id': scene_folder.id,
                    'project_id': frameio_file.project_id,
                    'view_url': file_info.get('view_url') if file_info else None,
                    'upload_method': 'remote_upload',
                    'upload_metadata': {
                        'shot_id': shot_id,
                        'scene_name': scene_name,
                        'public_url': public_url,
                        'local_path': str(file_path_obj),
                        **(metadata or {})
                    }
                }
                
                logger.info(f"‚úÖ Upload remote termin√©: {file_path_obj.name}")
                logger.info(f"üîó View URL: {result.get('view_url', 'Non disponible')}")
                
                return result
                
        except Exception as e:
            logger.error(f"‚ùå Erreur upload remote: {e}")
            return None
    
    async def get_file_review_link(self, file_id: str, workspace_id: Optional[str] = None) -> Optional[str]:
        """
        R√©cup√©rer le lien de review pour un fichier Frame.io
        
        Args:
            file_id: ID du fichier Frame.io
            workspace_id: ID du workspace (optionnel)
        
        Returns:
            str: Lien de review ou None si non trouv√©
        """
        try:
            # Assurer l'authentification
            if not self.auth.is_authenticated():
                await self.auth.authenticate()
            
            headers = {'Authorization': f'Bearer {self.auth.access_token}'}
            ws_id = workspace_id or self.workspace_id
            
            # R√©cup√©rer les informations du fichier
            url = f"{self.base_url}/workspaces/{ws_id}/assets/{file_id}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers)
                response.raise_for_status()
                
                file_data = response.json()
                
                # Construire le lien de review
                # Le lien Frame.io suit g√©n√©ralement ce format:
                # https://app.frame.io/workspace/{workspace_id}/asset/{file_id}
                review_url = f"https://app.frame.io/workspace/{ws_id}/asset/{file_id}"
                
                logger.info(f"üîó Lien de review g√©n√©r√© pour {file_id}: {review_url}")
                return review_url
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration lien review {file_id}: {e}")
            return None
    
    async def get_file_share_link(self, file_id: str, workspace_id: Optional[str] = None) -> Optional[str]:
        """
        R√©cup√©rer le lien de partage public pour un fichier Frame.io
        
        Args:
            file_id: ID du fichier Frame.io
            workspace_id: ID du workspace (optionnel)
        
        Returns:
            str: Lien de partage ou None si non trouv√©
        """
        try:
            # Assurer l'authentification
            if not self.auth.is_authenticated():
                await self.auth.authenticate()
            
            headers = {'Authorization': f'Bearer {self.auth.access_token}'}
            ws_id = workspace_id or self.workspace_id
            
            # Cr√©er un lien de partage
            url = f"{self.base_url}/workspaces/{ws_id}/assets/{file_id}/share"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, headers=headers, json={
                    "public": True,
                    "expires_at": None  # Pas d'expiration
                })
                
                if response.status_code == 201:
                    share_data = response.json()
                    share_url = share_data.get('url')
                    
                    logger.info(f"üîó Lien de partage cr√©√© pour {file_id}: {share_url}")
                    return share_url
                else:
                    logger.warning(f"‚ö†Ô∏è Impossible de cr√©er le lien de partage: {response.status_code}")
                    return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation lien partage {file_id}: {e}")
            return None
    
    async def enrich_file_with_links(self, frameio_file: FrameIOFile) -> FrameIOFile:
        """
        Enrichir un objet FrameIOFile avec ses liens de review et partage
        
        Args:
            frameio_file: Objet FrameIOFile √† enrichir
        
        Returns:
            FrameIOFile: Objet enrichi avec les liens
        """
        try:
            # R√©cup√©rer le lien de review
            review_url = await self.get_file_review_link(frameio_file.id, frameio_file.workspace_id)
            if review_url:
                frameio_file.review_url = review_url
            
            # R√©cup√©rer le lien de partage (optionnel)
            share_url = await self.get_file_share_link(frameio_file.id, frameio_file.workspace_id)
            if share_url:
                frameio_file.share_url = share_url
            
            return frameio_file
            
        except Exception as e:
            logger.error(f"‚ùå Erreur enrichissement fichier {frameio_file.id}: {e}")
            return frameio_file
