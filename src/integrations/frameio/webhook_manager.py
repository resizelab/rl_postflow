#!/usr/bin/env python3
"""
Frame.io Webhook Manager
G√®re les webhooks Frame.io pour le suivi automatique des statuts
Compatible avec Frame.io API V4
"""

import json
import logging
import os
import threading
import time
import hmac
import hashlib
from typing import Dict, Any, Optional, List
from datetime import datetime
from pathlib import Path
from flask import Flask, request, jsonify
import requests

from .webhook_tunnel import WebhookTunnelManager
from ...utils.upload_tracker import UploadTracker, UploadStatus
from .webhook_tunnel import WebhookTunnelManager

logger = logging.getLogger(__name__)


class FrameIOWebhookManager:
    """
    Gestionnaire des webhooks Frame.io pour le suivi automatique des statuts
    """
    
    # Mapping des statuts Frame.io vers nos statuts internes
    FRAMEIO_STATUS_MAPPING = {
        "in_progress": "üîÑ UPLOADING",
        "needs_review": "‚è≥ WAITING_APPROVAL", 
        "approved": "‚úÖ APPROVED",
        "rejected": "üö´ REJECTED",
        "ready": "üéâ COMPLETED",
        "processing": "‚öôÔ∏è PROCESSING"
    }
    
    def __init__(self, 
                 upload_tracker: UploadTracker,
                 webhook_port: int = 5000,
                 webhook_path: str = "/frameio-webhook",
                 use_cloudflare_tunnel: bool = True,
                 frameio_auth=None):
        """
        Initialise le gestionnaire de webhooks
        
        Args:
            upload_tracker: Instance du tracker d'uploads
            webhook_port: Port d'√©coute du webhook
            webhook_path: Chemin du webhook
            use_cloudflare_tunnel: Utiliser Cloudflare Tunnel pour exposition publique
            frameio_auth: Instance d'authentification Frame.io
        """
        self.upload_tracker = upload_tracker
        self.webhook_port = webhook_port
        self.webhook_path = webhook_path
        self.use_cloudflare_tunnel = use_cloudflare_tunnel
        self.frameio_auth = frameio_auth  # Stocker la r√©f√©rence frameio_auth
        
        # Gestionnaire de tunnel Cloudflare
        self.tunnel_manager = WebhookTunnelManager(webhook_port) if use_cloudflare_tunnel else None
        self.webhook_url = None  # Sera d√©fini apr√®s d√©marrage du tunnel
        
        # Flask app pour recevoir les webhooks
        self.app = Flask(__name__)
        self.setup_routes()
        
        # Threading pour le serveur
        self.server_thread = None
        self.is_running = False
        
        # Tracking des webhooks
        self.webhook_data = {
            "webhook_id": None,
            "events": [],
            "status": "inactive",
            "tunnel_info": None,
            "signing_secret": None  # Stockera le secret de signature Frame.io
        }
    
    def verify_frameio_signature(self, signature: str, timestamp: str, body: str, secret: str) -> bool:
        """
        V√©rifie la signature HMAC du webhook Frame.io selon sp√©cifications V4
        
        Args:
            signature: Signature fournie dans l'header X-FrameIO-Signature
            timestamp: Timestamp fourni dans l'header X-FrameIO-Timestamp
            body: Corps brut de la requ√™te
            secret: Secret de signature du webhook
            
        Returns:
            bool: True si signature valide
        """
        try:
            # V√©rifier que le timestamp n'est pas trop ancien (max 5 minutes)
            curr_time = time.time()
            req_time = float(timestamp)
            if curr_time - req_time > 300:  # 5 minutes
                logger.warning("‚ö†Ô∏è Webhook timestamp trop ancien")
                return False
            
            # Cr√©er le message √† signer selon format Frame.io: "v0:timestamp:body"
            message = f"v0:{timestamp}:{body}"
            
            # Calculer la signature HMAC SHA256
            calculated_signature = hmac.new(
                bytes(secret, 'latin-1'),
                msg=bytes(message, 'latin-1'),
                digestmod=hashlib.sha256
            ).hexdigest()
            
            # La signature doit √™tre pr√©fix√©e par "v0="
            expected_signature = f"v0={calculated_signature}"
            
            # Comparaison s√©curis√©e
            return hmac.compare_digest(expected_signature, signature)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification signature: {e}")
            return False
        
    def setup_routes(self):
        """Configure les routes Flask pour les webhooks"""
        
        @self.app.route(self.webhook_path, methods=['GET'])
        def webhook_info():
            """Endpoint GET pour v√©rifier que le webhook fonctionne"""
            return jsonify({
                "status": "active",
                "message": "PostFlow Frame.io Webhook Server",
                "endpoint": self.webhook_path,
                "methods": ["POST"],
                "timestamp": datetime.now().isoformat(),
                "webhook_stats": self.get_webhook_stats()
            }), 200
        
        @self.app.route(self.webhook_path, methods=['POST'])
        def receive_webhook():
            """Endpoint pour recevoir les webhooks Frame.io V4 avec v√©rification signature"""
            try:
                # R√©cup√©rer les headers Frame.io V4
                headers = dict(request.headers)
                content_type = headers.get('Content-Type', 'unknown')
                signature = headers.get('X-FrameIO-Signature')
                timestamp = headers.get('X-FrameIO-Timestamp')
                
                # R√©cup√©rer le corps brut pour v√©rification signature
                raw_body = request.get_data(as_text=True)
                
                # V√©rifier la signature si nous avons un secret configur√©
                if self.webhook_data.get("signing_secret") and signature and timestamp:
                    if not self.verify_frameio_signature(signature, timestamp, raw_body, 
                                                       self.webhook_data["signing_secret"]):
                        logger.warning("‚ö†Ô∏è Signature webhook Frame.io invalide")
                        return jsonify({
                            "status": "error",
                            "message": "Invalid signature"
                        }), 401
                    logger.debug("‚úÖ Signature webhook v√©rifi√©e")
                elif signature or timestamp:
                    logger.warning("‚ö†Ô∏è Headers signature d√©tect√©s mais pas de secret configur√©")
                
                # Parser les donn√©es JSON
                webhook_data = request.get_json()
                
                # V√©rifier si les donn√©es sont valides
                if webhook_data is None:
                    logger.warning("‚ö†Ô∏è Webhook re√ßu sans donn√©es JSON valides")
                    # Essayer de r√©cup√©rer les donn√©es brutes
                    raw_data = request.get_data(as_text=True)
                    logger.debug(f"üìã Content-Type: {content_type}")
                    logger.debug(f"üìã Headers: {headers}")
                    logger.debug(f"üìã Donn√©es brutes re√ßues: {raw_data}")
                    
                    # Essayer de parser manuellement si possible
                    if raw_data:
                        try:
                            webhook_data = json.loads(raw_data)
                            logger.info("‚úÖ Parsing JSON manuel r√©ussi")
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå √âchec parsing JSON manuel: {e}")
                            return jsonify({
                                "status": "error", 
                                "message": "Invalid JSON data"
                            }), 400
                    else:
                        return jsonify({
                            "status": "warning", 
                            "message": "No data received"
                        }), 200
                
                # Log pour debug
                logger.debug(f"üì® Webhook Headers: {headers}")
                logger.debug(f"üì® Content-Type: {content_type}")
                
                # Traiter le webhook (version synchrone)
                self.process_webhook_sync(webhook_data)
                
                return jsonify({
                    "status": "success", 
                    "message": "Webhook processed"
                }), 200
                
            except Exception as e:
                logger.error(f"‚ùå Erreur traitement webhook: {e}")
                # Log des d√©tails pour debug
                try:
                    raw_data = request.get_data(as_text=True)
                    logger.error(f"üìã Donn√©es qui ont caus√© l'erreur: {raw_data}")
                except:
                    pass
                return jsonify({"error": str(e)}), 500
        
        @self.app.route("/health", methods=['GET'])
        def health_check():
            """Health check endpoint"""
            return jsonify({
                "status": "healthy", 
                "timestamp": datetime.now().isoformat()
            })
        
        @self.app.route("/webhook-status", methods=['GET'])
        def webhook_status():
            """Statut du webhook"""
            return jsonify(self.webhook_data)
    
    def process_webhook_sync(self, webhook_data: Dict[str, Any]):
        """
        Traite un webhook re√ßu de Frame.io (version synchrone)
        Compatible avec Frame.io API V4
        
        Args:
            webhook_data: Donn√©es du webhook selon format V4
        """
        try:
            # Frame.io V4 utilise "type" au lieu de "event_type"
            event_type = webhook_data.get("type")
            resource_data = webhook_data.get("resource", {})
            
            # Extraire les informations contextuelles V4
            account_data = webhook_data.get("account", {})
            project_data = webhook_data.get("project", {})
            workspace_data = webhook_data.get("workspace", {})
            user_data = webhook_data.get("user", {})
            
            # Debug complet des donn√©es webhook
            logger.info(f"üîî Webhook Frame.io V4 re√ßu: {event_type}")
            logger.debug(f"üìã Donn√©es webhook compl√®tes: {json.dumps(webhook_data, indent=2, default=str)}")
            
            # V√©rifier que nous avons un type d'√©v√©nement valide
            if not event_type:
                logger.warning(f"‚ö†Ô∏è Aucun type d'√©v√©nement trouv√© dans le webhook V4")
                logger.debug(f"üìù Cl√©s disponibles: {list(webhook_data.keys())}")
                return
            
            # Traiter selon le type d'√©v√©nement Frame.io V4
            if event_type == "file.upload.completed":
                self._handle_upload_completed_sync(resource_data)
            elif event_type == "file.ready":
                self._handle_file_ready_sync(resource_data)
            elif event_type == "file.created":
                self._handle_file_created_sync(resource_data)
            elif event_type == "file.updated":
                self._handle_file_updated_sync(resource_data)
            elif event_type == "file.status.changed":
                self._handle_status_changed_sync(resource_data)
            elif event_type == "review.status.changed":
                self._handle_review_status_changed_sync(resource_data)
            elif event_type in ["comment.created", "comment.completed"]:
                # Debug: log de la structure compl√®te pour les √©v√©nements de commentaire
                logger.info(f"üîç Webhook comment complet: {json.dumps(webhook_data, indent=2)}")
                logger.info(f"üîç Resource data pour comment: {json.dumps(resource_data, indent=2)}")
                self._handle_comment_event_sync(resource_data, event_type)
            else:
                logger.info(f"üìù √âv√©nement non trait√©: {event_type}")
                # Log des donn√©es utiles m√™me pour √©v√©nements non trait√©s
                if resource_data:
                    logger.debug(f"üìÅ Ressource associ√©e: {resource_data.get('name', 'N/A')} (ID: {resource_data.get('id', 'N/A')})")
            
            # Enregistrer l'√©v√©nement (m√™me si non trait√©) avec contexte V4
            self.webhook_data["events"].append({
                "event_type": event_type or "unknown",
                "timestamp": datetime.now().isoformat(),
                "resource_id": resource_data.get("id"),
                "resource_type": resource_data.get("type"),
                "resource_name": resource_data.get("name"),
                "account_id": account_data.get("id"),
                "project_id": project_data.get("id"),
                "workspace_id": workspace_data.get("id"),
                "user_id": user_data.get("id"),
                "status": resource_data.get("status"),
                "review_status": resource_data.get("review_status"),
                "raw_keys": list(webhook_data.keys()) if not event_type else None
            })
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement webhook {event_type}: {e}")
            logger.error(f"üìã Donn√©es probl√©matiques: {webhook_data}")
    
    def _handle_upload_completed_sync(self, file_data: Dict[str, Any]):
        """G√®re l'√©v√©nement file.upload.completed (version synchrone)"""
        file_id = file_data.get("id")
        file_name = file_data.get("name")
        
        # Trouver l'upload correspondant
        upload_id = self._find_upload_by_filename_sync(file_name)
        if upload_id:
            frameio_data = {
                "file_id": file_id,
                "upload_status": "COMPLETED",
                "processing_status": "PROCESSING"
            }
            
            # Marquer comme en traitement
            self.upload_tracker.mark_processing(upload_id)
            self.upload_tracker.update_upload(upload_id, {
                "frameio_data.file_id": file_id,
                "frameio_data.upload_status": "COMPLETED"
            })
            
            logger.info(f"üì§ Upload Frame.io termin√©: {file_name} (ID: {file_id})")
    
    def _handle_file_ready_sync(self, file_data: Dict[str, Any]):
        """G√®re l'√©v√©nement file.ready (traitement termin√©) (version synchrone)"""
        file_id = file_data.get("id")
        file_name = file_data.get("name")
        
        # Trouver l'upload correspondant
        upload_id = self._find_upload_by_filename_sync(file_name)
        if upload_id:
            frameio_data = {
                "file_id": file_id,
                "processing_status": "READY",
                "review_link": self._generate_review_link(file_data),
                "share_link": file_data.get("share_link")
            }
            
            # Marquer comme termin√©
            self.upload_tracker.mark_completed(upload_id, frameio_data)
            
            logger.info(f"üéâ Fichier Frame.io pr√™t: {file_name} (ID: {file_id})")
    
    def _handle_file_created_sync(self, file_data: Dict[str, Any]):
        """G√®re l'√©v√©nement file.created (version synchrone)"""
        logger.info(f"üìÅ Nouveau fichier cr√©√©: {file_data.get('name')}")
    
    def _handle_file_updated_sync(self, file_data: Dict[str, Any]):
        """G√®re l'√©v√©nement file.updated (version synchrone)"""
        logger.info(f"üìù Fichier mis √† jour: {file_data.get('name')}")
    
    def _handle_status_changed_sync(self, file_data: Dict[str, Any]):
        """G√®re l'√©v√©nement file.status.changed (statut g√©n√©ral du fichier) (version synchrone)"""
        file_id = file_data.get("id")
        file_name = file_data.get("name")
        file_status = file_data.get("status")
        
        # Trouver l'upload correspondant
        upload_id = self._find_upload_by_filename_sync(file_name)
        if upload_id:
            # Mapper le statut Frame.io vers notre statut interne
            internal_status = self._map_frameio_status_to_internal(file_status)
            
            frameio_data = {
                "file_id": file_id,
                "status": file_status,
                "processing_status": file_status
            }
            
            # Mettre √† jour le statut selon la logique Frame.io
            if file_status == "processing":
                self.upload_tracker.mark_processing(upload_id)
            elif file_status == "ready":
                frameio_data.update({
                    "review_link": self._generate_review_link(file_data),
                    "share_link": file_data.get("share_link")
                })
                self.upload_tracker.mark_completed(upload_id, frameio_data)
            elif file_status == "failed":
                self.upload_tracker.mark_failed(upload_id, f"Frame.io processing failed")
            
            # Mise √† jour des donn√©es Frame.io
            self.upload_tracker.update_upload(upload_id, {
                "frameio_data.status": file_status,
                "frameio_data.processing_status": file_status
            })
            
            logger.info(f"üìù Statut Frame.io chang√©: {file_name} -> {file_status} ({internal_status})")
    
    def _handle_review_status_changed_sync(self, file_data: Dict[str, Any]):
        """G√®re l'√©v√©nement review.status.changed (statut de review) (version synchrone)"""
        file_id = file_data.get("id")
        file_name = file_data.get("name")
        review_status = file_data.get("review_status")
        
        # Trouver l'upload correspondant
        upload_id = self._find_upload_by_filename_sync(file_name)
        if upload_id:
            # Mapper le statut de review Frame.io vers notre statut interne
            internal_status = self._map_frameio_review_status_to_internal(review_status)
            
            frameio_data = {
                "file_id": file_id,
                "review_status": review_status,
                "review_link": self._generate_review_link(file_data),
                "share_link": file_data.get("share_link")
            }
            
            # Mettre √† jour le statut selon le statut de review
            if review_status == "needs_review":
                # Le fichier est pr√™t mais attend une review
                self.upload_tracker.update_status(upload_id, "WAITING_APPROVAL")
                frameio_data["processing_status"] = "READY"
            elif review_status == "approved":
                # Review approuv√©e, fichier finalis√©
                self.upload_tracker.update_status(upload_id, "APPROVED")
                frameio_data["processing_status"] = "APPROVED"
            elif review_status == "rejected":
                # Review rejet√©e
                self.upload_tracker.update_status(upload_id, "REJECTED")
                frameio_data["processing_status"] = "REJECTED"
            elif review_status == "in_progress":
                # Review en cours
                frameio_data["processing_status"] = "REVIEWING"
            
            # Mise √† jour des donn√©es Frame.io
            self.upload_tracker.update_upload(upload_id, {
                "frameio_data.review_status": review_status,
                "frameio_data.review_link": frameio_data.get("review_link"),
                "frameio_data.share_link": frameio_data.get("share_link")
            })
            
            logger.info(f"üëÅÔ∏è Statut review Frame.io chang√©: {file_name} -> {review_status} ({internal_status})")
    
    def _handle_comment_event_sync(self, webhook_data: Dict[str, Any], event_type: str):
        """G√®re les √©v√©nements de commentaires avec r√©cup√©ration du contenu via API (version synchrone)"""
        try:
            # Debug: log de la structure compl√®te pour diagnostic
            logger.info(f"üîç DEBUG - Structure compl√®te du webhook {event_type}:")
            logger.info(f"üìã JSON complet: {json.dumps(webhook_data, indent=2)}")
            
            # Extraction de l'ID du commentaire depuis le webhook
            comment_id = webhook_data.get("id")
            logger.info(f"üÜî Comment ID: {comment_id}")
            
            if not comment_id:
                logger.error("‚ùå Pas d'ID de commentaire trouv√© dans le webhook")
                return
            
            # R√©cup√©ration des d√©tails du commentaire via l'API Frame.io
            comment_details = self._fetch_comment_details(comment_id)
            if not comment_details:
                logger.error(f"‚ùå Impossible de r√©cup√©rer les d√©tails du commentaire {comment_id}")
                return
            
            # Extraction des informations du commentaire
            comment_text = comment_details.get('text', '')
            file_id = comment_details.get('file_id')
            owner = comment_details.get('owner', {})
            owner_name = owner.get('name', 'Inconnu')
            
            logger.info(f"üí¨ Texte du commentaire: '{comment_text}'")
            logger.info(f"üìÅ File ID associ√©: {file_id}")
            logger.info(f"ÔøΩ Auteur: {owner_name}")
            
            if not file_id:
                logger.error("‚ùå Pas de file_id trouv√© dans les d√©tails du commentaire")
                return
                
            # R√©cup√©rer le nom du fichier depuis le file_id si n√©cessaire
            # Pour l'instant, on utilise le file_id pour trouver l'upload correspondant
            upload_id = self._find_upload_by_file_id_sync(file_id)
            if not upload_id:
                logger.warning(f"‚ö†Ô∏è Aucun upload trouv√© pour file_id: {file_id}")
                return
                
            logger.info(f"‚úÖ Upload trouv√©: {upload_id}")
            
            if event_type == "comment.created":
                logger.info(f"üí¨ Nouveau commentaire cr√©√© par {owner_name}: '{comment_text}'")
                
                # Analyser le commentaire et mettre √† jour le statut de review
                self._analyze_comment_and_update_status_sync(upload_id, file_id, comment_text, event_type)
                
                # Appel vers le tracking intelligent si disponible
                if hasattr(self, 'intelligent_tracker') and self.intelligent_tracker:
                    # Passer les d√©tails complets du webhook incluant le commentaire
                    try:
                        webhook_data = {
                            'type': event_type,
                            'resource': {
                                'id': comment_details.get('id'),
                                'type': 'comment'
                            },
                            'comment_details': comment_details,
                            'comment_text': comment_text
                        }
                        self.intelligent_tracker.process_webhook_intelligently(webhook_data)
                    except Exception as e:
                        logger.error(f"‚ùå Erreur tracking intelligent: {e}")
                else:
                    logger.warning("‚ö†Ô∏è Tracking intelligent non disponible")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement commentaire {event_type}: {e}", exc_info=True)
    
    def _find_upload_by_filename_sync(self, filename: str) -> Optional[str]:
        """
        Trouve un upload par nom de fichier (version synchrone)
        
        Args:
            filename: Nom du fichier
            
        Returns:
            str: ID de l'upload ou None
        """
        try:
            for upload_id, upload_data in self.upload_tracker.tracking_data.get("uploads", {}).items():
                if upload_data.get("filename") == filename:
                    return upload_id
            return None
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche upload: {e}")
            return None
    
    def _find_upload_by_file_id_sync(self, file_id: str) -> Optional[str]:
        """
        Trouve un upload par file_id Frame.io (version synchrone)
        
        Args:
            file_id: ID du fichier Frame.io
            
        Returns:
            str: ID de l'upload ou None
        """
        try:
            for upload_id, upload_data in self.upload_tracker.tracking_data.get("uploads", {}).items():
                # V√©rifier dans frameio_link si le file_id correspond
                frameio_link = upload_data.get("frameio_link", "")
                if file_id in frameio_link:
                    logger.info(f"‚úÖ Upload trouv√© par frameio_link: {upload_id}")
                    return upload_id
                
                # V√©rifier aussi dans frameio_data.file_id si disponible
                frameio_data = upload_data.get("frameio_data", {})
                stored_file_id = frameio_data.get("file_id")
                if stored_file_id == file_id:
                    logger.info(f"‚úÖ Upload trouv√© par frameio_data.file_id: {upload_id}")
                    return upload_id
                    
            logger.warning(f"‚ö†Ô∏è Aucun upload trouv√© pour file_id: {file_id}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche upload par file_id: {e}")
            return None

    def _analyze_comment_and_update_status_sync(self, upload_id: str, file_id: str, comment_text: str, event_type: str):
        """
        Analyse un commentaire et met √† jour le statut de review intelligemment
        """
        try:
            # R√©cup√©rer tous les commentaires du fichier
            comments = self._fetch_all_comments_for_file_sync(file_id)
            logger.info(f"üîç DEBUG: Commentaires r√©cup√©r√©s pour file_id {file_id}: {len(comments) if comments else 0} commentaires")
            if comments:
                for i, comment in enumerate(comments[-3:]):  # Afficher les 3 derniers
                    logger.info(f"üîç DEBUG: Commentaire {i}: {comment.get('text', 'N/A')}")
            
            # D√©terminer le statut de review
            review_status = self._determine_review_status_from_comments(comments)
            logger.info(f"üîç DEBUG: Statut d√©termin√© par _determine_review_status_from_comments: {review_status}")
            
            # R√©cup√©rer les donn√©es de l'upload pour l'√©v√©nement
            upload_data = self.upload_tracker.get_upload(upload_id)
            shot_name = upload_data.get('shot_id', '') if upload_data else ''
            old_review_status = upload_data.get('frameio_data', {}).get('review_status') if upload_data else None
            
            # Mettre √† jour le statut dans le tracker
            self.upload_tracker.update_upload(upload_id, {
                "frameio_data.review_status": review_status,
                "frameio_data.last_comment": comment_text,
                "frameio_data.last_comment_event": event_type
            })
            
            # √âmettre des √©v√©nements pour les commentaires et changements de statut
            from src.utils.event_manager import event_manager, EventType
            
            # √âv√©nement commentaire Frame.io
            comment_event_data = {
                'upload_id': upload_id,
                'shot_name': shot_name,
                'comment_text': comment_text,
                'review_status': review_status,
                'file_id': file_id,
                'commenter': 'Frame.io User'  # Pourrait √™tre am√©lior√© avec l'API
            }
            event_manager.emit_sync(EventType.FRAMEIO_COMMENT_RECEIVED, comment_event_data, source='webhook_manager')
            
            # √âv√©nement changement de statut de review si diff√©rent
            if review_status != old_review_status:
                status_event_data = {
                    'upload_id': upload_id,
                    'shot_name': shot_name,
                    'review_status': review_status,
                    'old_status': old_review_status,
                    'comment': comment_text
                }
                event_manager.emit_sync(EventType.REVIEW_STATUS_CHANGED, status_event_data, source='webhook_manager')
            
            logger.info(f"üîé Statut review d√©tect√© via commentaires: {review_status} (upload_id: {upload_id})")
            logger.info(f"üì§ √âv√©nements √©mis pour commentaire Frame.io: {shot_name}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse commentaire: {e}")

    def _fetch_all_comments_for_file_sync(self, file_id: str) -> List[Dict]:
        """
        R√©cup√®re tous les commentaires d'un fichier via API Frame.io
        """
        try:
            # Construction de l'URL selon l'endpoint Frame.io V4
            account_id = os.getenv('FRAMEIO_ACCOUNT_ID')
            if not account_id:
                logger.error("‚ùå FRAMEIO_ACCOUNT_ID non d√©fini")
                return []
                
            url = f"https://api.frame.io/v4/accounts/{account_id}/files/{file_id}/comments"

            # Authentification - utiliser la m√™me logique que _fetch_comment_details
            frameio_auth = None
            
            if hasattr(self.upload_tracker, 'frameio_auth'):
                frameio_auth = self.upload_tracker.frameio_auth
            elif hasattr(self.upload_tracker, 'upload_manager') and hasattr(self.upload_tracker.upload_manager, 'frameio_auth'):
                frameio_auth = self.upload_tracker.upload_manager.frameio_auth
            elif hasattr(self, 'frameio_auth'):
                frameio_auth = self.frameio_auth
            
            if not frameio_auth:
                logger.error("‚ùå Authentification Frame.io non disponible pour r√©cup√©ration commentaires")
                return []
                
            token_config = frameio_auth._load_current_tokens()
            access_token = token_config.get('access_token')
            if not access_token:
                logger.error("‚ùå Aucun token d'acc√®s disponible pour Frame.io")
                return []
                
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                comments_response = response.json()
                # G√©rer le wrapper "data" comme pour _fetch_comment_details
                comments_data = comments_response.get("data", comments_response)
                if isinstance(comments_data, list):
                    return comments_data
                else:
                    logger.warning(f"‚ö†Ô∏è Format inattendu des commentaires: {type(comments_data)}")
                    return []
            else:
                logger.error(f"‚ùå Erreur r√©cup√©ration commentaires: {response.status_code} - {response.text}")
                return []
        except Exception as e:
            logger.error(f"‚ùå Exception r√©cup√©ration commentaires: {e}")
            return []
    
    def _fetch_comment_details(self, comment_id: str) -> Optional[Dict]:
        """
        R√©cup√®re les d√©tails d'un commentaire sp√©cifique via l'API Frame.io V4
        
        Args:
            comment_id: ID du commentaire √† r√©cup√©rer
            
        Returns:
            Dict: D√©tails du commentaire ou None si erreur
        """
        try:
            # R√©cup√©ration de l'account_id depuis l'environnement
            import os
            account_id = os.getenv('FRAMEIO_ACCOUNT_ID')
            if not account_id:
                logger.error("‚ùå FRAMEIO_ACCOUNT_ID non d√©fini")
                return None
                
            # Construction de l'URL selon l'endpoint Frame.io V4
            url = f"https://api.frame.io/v4/accounts/{account_id}/comments/{comment_id}?include=owner"

            # Authentification - essayer plusieurs sources
            frameio_auth = None
            
            # 1. Essayer depuis upload_tracker
            if hasattr(self.upload_tracker, 'frameio_auth'):
                frameio_auth = self.upload_tracker.frameio_auth
                logger.info("üîë Auth trouv√©e via upload_tracker.frameio_auth")
            
            # 2. Essayer depuis upload_tracker.upload_manager
            elif hasattr(self.upload_tracker, 'upload_manager') and hasattr(self.upload_tracker.upload_manager, 'frameio_auth'):
                frameio_auth = self.upload_tracker.upload_manager.frameio_auth
                logger.info("üîë Auth trouv√©e via upload_tracker.upload_manager.frameio_auth")
            
            # 3. Essayer depuis self directement si on a une r√©f√©rence
            elif hasattr(self, 'frameio_auth'):
                frameio_auth = self.frameio_auth
                logger.info("üîë Auth trouv√©e via self.frameio_auth")
            
            if not frameio_auth:
                logger.error("‚ùå Authentification Frame.io non disponible dans toutes les sources")
                return None
                
            token_config = frameio_auth._load_current_tokens()
            access_token = token_config.get('access_token')
            if not access_token:
                logger.error("‚ùå Aucun token d'acc√®s disponible pour Frame.io")
                return None
                
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            logger.info(f"üîç R√©cup√©ration d√©tails commentaire: {comment_id}")
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                comment_response = response.json()
                comment_data = comment_response.get('data', comment_response)  # G√©rer le wrapper "data"
                logger.debug(f"‚úÖ D√©tails commentaire r√©cup√©r√©s pour {comment_id}")
                return comment_data
            else:
                logger.error(f"‚ùå Erreur API r√©cup√©ration commentaire {comment_id}: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Exception r√©cup√©ration d√©tails commentaire {comment_id}: {e}")
            return None

    def _determine_review_status_from_comments(self, comments: List[Dict]) -> str:
        """
        D√©termine le statut de review bas√© sur l'analyse des commentaires
        Utilise la m√™me logique que auto_hooks pour la coh√©rence
        """
        try:
            if not comments:
                return "NEED_REVIEW"
            
            # S'assurer qu'on a une liste de dictionnaires
            if not isinstance(comments, list):
                logger.warning(f"‚ö†Ô∏è Commentaires pas en format liste: {type(comments)}")
                return "NEED_REVIEW"
            
            # Utiliser la m√™me logique que auto_hooks.py
            positive_keywords = [
                'ok', 'valid√©', 'parfait', 'excellent', 'bien', 'good', 'approved', 'approve',
                'valide', 'nickel', 'super', 'bravo', 'top', '√ßa marche', 'c\'est bon',
                'validated', 'accepted', 'great', 'perfect'
            ]
            
            negative_keywords = [
                'modif', 'modification', 'change', 'corriger', 'correction', 'probl√®me', 
                'problem', 'issue', 'fix', 'revoir', 'refaire', '√† retravailler',
                'pas bon', 'incorrect', 'erreur', 'error', 'wrong', 'redo', 'revise'
            ]
            
            # Analyser le dernier commentaire (le plus r√©cent)
            if comments:
                latest_comment = comments[-1] if isinstance(comments, list) else comments
                comment_text = latest_comment.get("text", "").lower() if isinstance(latest_comment, dict) else ""
                
                # V√©rifier les mots cl√©s n√©gatifs en premier (priorit√©) - recherche par mots entiers
                has_negative = any(f' {keyword} ' in f' {comment_text} ' or 
                                  comment_text.startswith(f'{keyword} ') or 
                                  comment_text.endswith(f' {keyword}') or 
                                  comment_text == keyword 
                                  for keyword in negative_keywords)
                if has_negative:
                    return "NEED_REWORK"
                
                # V√©rifier les mots cl√©s positifs - recherche par mots entiers
                has_positive = any(f' {keyword} ' in f' {comment_text} ' or 
                                  comment_text.startswith(f'{keyword} ') or 
                                  comment_text.endswith(f' {keyword}') or 
                                  comment_text == keyword 
                                  for keyword in positive_keywords)
                if has_positive:
                    return "APPROVED"
            
            # Commentaire neutre/long = besoin de review suppl√©mentaire
            return "NEED_REVIEW"
                
        except Exception as e:
            logger.error(f"‚ùå Exception analyse statut review: {e}")
            return "NEED_REVIEW"
    
    def _generate_review_link(self, file_data: Dict[str, Any]) -> str:
        """
        G√©n√®re le lien de review Frame.io
        
        Args:
            file_data: Donn√©es du fichier
            
        Returns:
            str: Lien de review
        """
        try:
            project_id = file_data.get("project_id")
            file_id = file_data.get("id")
            return f"https://next.frame.io/project/{project_id}/view/{file_id}"
        except:
            return None
    
    def _map_frameio_status_to_internal(self, frameio_status: str) -> str:
        """
        Mappe un statut Frame.io vers notre statut interne
        
        Args:
            frameio_status: Statut Frame.io
            
        Returns:
            str: Statut interne correspondant
        """
        mapping = {
            "processing": "PROCESSING",
            "ready": "COMPLETED", 
            "failed": "FAILED",
            "uploading": "UPLOADING",
            "queued": "UPLOADING"
        }
        return mapping.get(frameio_status, "PROCESSING")
    
    def _map_frameio_review_status_to_internal(self, review_status: str) -> str:
        """
        Mappe un statut de review Frame.io vers notre statut interne
        
        Args:
            review_status: Statut de review Frame.io
            
        Returns:
            str: Statut interne correspondant
        """
        mapping = {
            "needs_review": "WAITING_APPROVAL",
            "approved": "APPROVED", 
            "rejected": "REJECTED",
            "in_progress": "PROCESSING"
        }
        return mapping.get(review_status, "WAITING_APPROVAL")
    
    def create_webhook_sync(self, 
                          frameio_auth,
                          account_id: str, 
                          workspace_id: str,
                          webhook_name: str = "PostFlow Webhook") -> bool:
        """
        Cr√©e un webhook Frame.io (version synchrone)
        
        Args:
            frameio_auth: Authentification Frame.io
            account_id: ID du compte Frame.io
            workspace_id: ID du workspace Frame.io
            webhook_name: Nom du webhook
            
        Returns:
            bool: True si cr√©√© avec succ√®s
        """
        try:
            # V√©rifier que l'URL publique est disponible
            public_url = self.get_public_webhook_url()
            if not public_url:
                logger.error("‚ùå URL publique du webhook non disponible")
                return False
            
            webhook_payload = {
                "data": {
                    "events": [
                        "file.created",
                        "file.ready",
                        "file.updated", 
                        "file.upload.completed",
                        "file.versioned",
                        "comment.created",
                        "comment.completed",
                        "comment.updated"
                    ],
                    "name": webhook_name,
                    "url": public_url
                }
            }
            
            # Cr√©er le webhook via l'API Frame.io
            url = f"https://api.frame.io/v4/accounts/{account_id}/workspaces/{workspace_id}/webhooks"
            
            # Utiliser le token directement depuis la configuration
            token_config = frameio_auth._load_current_tokens()
            access_token = token_config.get('access_token')
            if not access_token:
                logger.error("‚ùå Aucun token d'acc√®s disponible")
                return False
            
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=webhook_payload, headers=headers)
            
            if response.status_code == 201:
                webhook_response = response.json()
                webhook_data_response = webhook_response.get("data", {})
                webhook_id = webhook_data_response.get("id")
                # Frame.io V4 retourne le signing_secret dans la r√©ponse
                signing_secret = webhook_data_response.get("signing_secret")
                
                self.webhook_data.update({
                    "webhook_id": webhook_id,
                    "status": "active",
                    "created_at": datetime.now().isoformat(),
                    "signing_secret": signing_secret  # Stocker le secret pour v√©rifications
                })
                
                logger.info(f"‚úÖ Webhook Frame.io cr√©√©: {webhook_id}")
                if signing_secret:
                    logger.info("üîê Secret de signature configur√© pour s√©curiser le webhook")
                else:
                    logger.warning("‚ö†Ô∏è Pas de secret de signature re√ßu")
                return True
            else:
                logger.error(f"‚ùå Erreur cr√©ation webhook: {response.status_code} - {response.text}")
                return False
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation webhook: {e}")
            return False
    
    def delete_webhook_sync(self,
                           frameio_auth, 
                           account_id: str,
                           workspace_id: str) -> bool:
        """
        Supprime le webhook Frame.io (version synchrone)
        
        Args:
            frameio_auth: Authentification Frame.io
            account_id: ID du compte Frame.io
            workspace_id: ID du workspace Frame.io
            
        Returns:
            bool: True si supprim√© avec succ√®s
        """
        try:
            if not self.webhook_data.get("webhook_id"):
                logger.warning("‚ö†Ô∏è Aucun webhook √† supprimer")
                return True
            
            webhook_id = self.webhook_data["webhook_id"]
            url = f"https://api.frame.io/v4/accounts/{account_id}/workspaces/{workspace_id}/webhooks/{webhook_id}"
            
            # Utiliser le token directement depuis la configuration
            token_config = frameio_auth._load_current_tokens()
            access_token = token_config.get('access_token')
            if not access_token:
                logger.error("‚ùå Aucun token d'acc√®s disponible")
                return False
            
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.delete(url, headers=headers)
            
            if response.status_code == 204:
                self.webhook_data.update({
                    "webhook_id": None,
                    "status": "deleted",
                    "deleted_at": datetime.now().isoformat()
                })
                
                logger.info(f"‚úÖ Webhook Frame.io supprim√©: {webhook_id}")
                return True
            else:
                logger.error(f"‚ùå Erreur suppression webhook: {response.status_code} - {response.text}")
                return False
                        
        except Exception as e:
            logger.error(f"‚ùå Erreur suppression webhook: {e}")
            return False
    
    def start_webhook_server(self):
        """D√©marre le serveur webhook Flask et le tunnel Cloudflare"""
        try:
            # D√©marrer le tunnel Cloudflare si configur√©
            if self.use_cloudflare_tunnel and self.tunnel_manager:
                logger.info("üåê D√©marrage du tunnel Cloudflare...")
                tunnel_url = self.tunnel_manager.start_webhook_tunnel(timeout=60)
                
                if tunnel_url:
                    self.webhook_url = tunnel_url
                    self.webhook_data["tunnel_info"] = self.tunnel_manager.get_tunnel_info()
                    logger.info(f"‚úÖ Tunnel Cloudflare actif: {tunnel_url}")
                else:
                    logger.error("‚ùå √âchec d√©marrage tunnel Cloudflare")
                    return False
            
            # D√©marrer le serveur Flask
            def run_server():
                self.app.run(
                    host="0.0.0.0",
                    port=self.webhook_port,
                    debug=False,
                    use_reloader=False
                )
            
            self.server_thread = threading.Thread(target=run_server, daemon=True)
            self.server_thread.start()
            self.is_running = True
            
            logger.info(f"üöÄ Serveur webhook d√©marr√© sur port {self.webhook_port}")
            if self.webhook_url:
                logger.info(f"üîó Endpoint webhook public: {self.webhook_url}{self.webhook_path}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur serveur webhook: {e}")
            return False
    
    def stop_webhook_server(self):
        """Arr√™te le serveur webhook et le tunnel Cloudflare"""
        try:
            self.is_running = False
            
            # Arr√™ter le tunnel Cloudflare
            if self.tunnel_manager:
                self.tunnel_manager.stop_webhook_tunnel()
                logger.info("üõë Tunnel Cloudflare arr√™t√©")
            
            # Arr√™ter le serveur Flask
            if self.server_thread and self.server_thread.is_alive():
                logger.info("üõë Arr√™t du serveur webhook...")
            
            self.webhook_url = None
            self.webhook_data["tunnel_info"] = None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t webhook: {e}")
    
    def get_public_webhook_url(self) -> Optional[str]:
        """
        Retourne l'URL publique du webhook
        
        Returns:
            str: URL publique compl√®te ou None
        """
        if self.webhook_url:
            return f"{self.webhook_url}{self.webhook_path}"
        return None
    
    def get_webhook_stats(self) -> Dict[str, Any]:
        """
        Retourne les statistiques des webhooks
        
        Returns:
            Dict: Statistiques
        """
        events = self.webhook_data.get("events", [])
        
        # Compter par type d'√©v√©nement
        event_counts = {}
        for event in events:
            event_type = event.get("event_type")
            event_counts[event_type] = event_counts.get(event_type, 0) + 1
        
        stats = {
            "webhook_status": self.webhook_data.get("status"),
            "webhook_id": self.webhook_data.get("webhook_id"),
            "webhook_url": self.get_public_webhook_url(),
            "total_events": len(events),
            "events_by_type": event_counts,
            "last_event": events[-1] if events else None
        }
        
        # Ajouter les infos du tunnel si disponibles
        if self.tunnel_manager:
            stats["tunnel_info"] = self.tunnel_manager.get_tunnel_info()
        
        return stats
