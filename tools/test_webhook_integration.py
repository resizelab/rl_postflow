#!/usr/bin/env python3
"""
Script de test et int√©gration du syst√®me webhook Frame.io avec Cloudflare Tunnel
"""

import asyncio
import logging
import time
import json
from pathlib import Path
import sys

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.integrations.frameio.webhook_manager import FrameIOWebhookManager
from src.integrations.frameio.auth import FrameIOAuth
from src.utils.upload_tracker import UploadTracker

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class WebhookIntegrationManager:
    """
    Gestionnaire d'int√©gration du syst√®me webhook Frame.io
    """
    
    def __init__(self, config_path: str = "config/frameio_config.json"):
        """
        Initialise le gestionnaire d'int√©gration
        
        Args:
            config_path: Chemin vers la configuration Frame.io
        """
        self.config_path = Path(config_path)
        self.config = self._load_config()
        
        # Composants du syst√®me
        self.frameio_auth = None
        self.upload_tracker = None
        self.webhook_manager = None
        
    def _load_config(self) -> dict:
        """Charge la configuration Frame.io"""
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r') as f:
                    return json.load(f)
            else:
                logger.error(f"‚ùå Fichier config non trouv√©: {self.config_path}")
                return {}
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement config: {e}")
            return {}
    
    async def initialize_components(self):
        """Initialise tous les composants n√©cessaires"""
        try:
            # Initialiser l'authentification Frame.io
            self.frameio_auth = FrameIOAuth(
                client_id=self.config.get("client_id"),
                client_secret=self.config.get("client_secret"),
                redirect_uri=self.config.get("redirect_uri")
            )
            
            # Initialiser le tracker d'uploads
            self.upload_tracker = UploadTracker()
            
            # Initialiser le gestionnaire de webhooks avec Cloudflare Tunnel
            self.webhook_manager = FrameIOWebhookManager(
                upload_tracker=self.upload_tracker,
                webhook_port=8080,  # Port d√©di√© aux webhooks
                webhook_path="/frameio-webhook",
                use_cloudflare_tunnel=True
            )
            
            logger.info("‚úÖ Composants initialis√©s")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation: {e}")
            return False
    
    async def start_webhook_system(self) -> bool:
        """
        D√©marre le syst√®me webhook complet
        
        Returns:
            bool: True si d√©marr√© avec succ√®s
        """
        try:
            logger.info("üöÄ D√©marrage du syst√®me webhook Frame.io...")
            
            # D√©marrer le serveur webhook avec tunnel Cloudflare
            if not self.webhook_manager.start_webhook_server():
                logger.error("‚ùå √âchec d√©marrage serveur webhook")
                return False
            
            # Attendre que le tunnel soit stable
            await asyncio.sleep(5)
            
            # V√©rifier que le tunnel est op√©rationnel
            public_url = self.webhook_manager.get_public_webhook_url()
            if not public_url:
                logger.error("‚ùå URL publique webhook non disponible")
                return False
            
            logger.info(f"‚úÖ Syst√®me webhook op√©rationnel: {public_url}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage syst√®me webhook: {e}")
            return False
    
    async def create_frameio_webhook(self) -> bool:
        """
        Cr√©e le webhook Frame.io
        
        Returns:
            bool: True si cr√©√© avec succ√®s
        """
        try:
            # V√©rifier l'authentification
            if not self.frameio_auth or not self.frameio_auth.is_authenticated():
                logger.error("‚ùå Authentification Frame.io requise")
                return False
            
            # R√©cup√©rer les infos du compte
            account_id = self.config.get("account_id")
            workspace_id = self.config.get("workspace_id")
            
            if not account_id or not workspace_id:
                logger.error("‚ùå account_id et workspace_id requis dans la config")
                return False
            
            # Cr√©er le webhook
            success = self.webhook_manager.create_webhook_sync(
                frameio_auth=self.frameio_auth,
                account_id=account_id,
                workspace_id=workspace_id,
                webhook_name="PostFlow Webhook v2"
            )
            
            if success:
                logger.info("‚úÖ Webhook Frame.io cr√©√© avec succ√®s")
                return True
            else:
                logger.error("‚ùå √âchec cr√©ation webhook Frame.io")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation webhook: {e}")
            return False
    
    async def monitor_webhooks(self, duration: int = 300):
        """
        Surveille les webhooks pendant une dur√©e donn√©e
        
        Args:
            duration: Dur√©e de surveillance en secondes
        """
        try:
            logger.info(f"üëÅÔ∏è Surveillance webhooks pendant {duration}s...")
            
            start_time = time.time()
            while time.time() - start_time < duration:
                # Afficher les statistiques toutes les 30 secondes
                if int(time.time() - start_time) % 30 == 0:
                    stats = self.webhook_manager.get_webhook_stats()
                    logger.info(f"üìä Stats webhook: {stats['total_events']} √©v√©nements")
                    
                    # Afficher les √©v√©nements r√©cents
                    if stats.get('last_event'):
                        last_event = stats['last_event']
                        logger.info(f"   Dernier: {last_event['event_type']} - {last_event['file_name']}")
                
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("üõë Surveillance interrompue par l'utilisateur")
        except Exception as e:
            logger.error(f"‚ùå Erreur surveillance: {e}")
    
    async def stop_webhook_system(self):
        """Arr√™te le syst√®me webhook"""
        try:
            if self.webhook_manager:
                # Supprimer le webhook Frame.io si n√©cessaire
                account_id = self.config.get("account_id")
                workspace_id = self.config.get("workspace_id")
                
                if account_id and workspace_id:
                    self.webhook_manager.delete_webhook_sync(
                        frameio_auth=self.frameio_auth,
                        account_id=account_id,
                        workspace_id=workspace_id
                    )
                
                # Arr√™ter le serveur et le tunnel
                self.webhook_manager.stop_webhook_server()
                
            logger.info("üõë Syst√®me webhook arr√™t√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t syst√®me: {e}")
    
    def print_system_status(self):
        """Affiche le statut du syst√®me"""
        try:
            print("\n" + "="*60)
            print("üìä STATUT SYST√àME WEBHOOK FRAME.IO")
            print("="*60)
            
            if self.webhook_manager:
                stats = self.webhook_manager.get_webhook_stats()
                
                print(f"üîó URL webhook: {stats.get('webhook_url', 'Non d√©finie')}")
                print(f"üì° Statut: {stats.get('webhook_status', 'Inactif')}")
                print(f"üÜî Webhook ID: {stats.get('webhook_id', 'Non cr√©√©')}")
                print(f"üìà Total √©v√©nements: {stats.get('total_events', 0)}")
                
                # Tunnel info
                tunnel_info = stats.get('tunnel_info')
                if tunnel_info:
                    print(f"üåê Tunnel Cloudflare: {'‚úÖ Actif' if tunnel_info.get('is_healthy') else '‚ùå Inactif'}")
                    print(f"üîå Port webhook: {tunnel_info.get('webhook_port')}")
                
                # √âv√©nements par type
                events_by_type = stats.get('events_by_type', {})
                if events_by_type:
                    print("\nüìã √âv√©nements par type:")
                    for event_type, count in events_by_type.items():
                        print(f"   {event_type}: {count}")
                
                # Dernier √©v√©nement
                last_event = stats.get('last_event')
                if last_event:
                    print(f"\n‚è∞ Dernier √©v√©nement: {last_event['event_type']}")
                    print(f"   Fichier: {last_event.get('file_name', 'N/A')}")
                    print(f"   Timestamp: {last_event.get('timestamp', 'N/A')}")
            
            print("="*60)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur affichage statut: {e}")


async def main():
    """Fonction principale de test"""
    integration_manager = WebhookIntegrationManager()
    
    try:
        # Initialiser les composants
        if not await integration_manager.initialize_components():
            return
        
        # D√©marrer le syst√®me webhook
        if not await integration_manager.start_webhook_system():
            return
        
        # Afficher le statut
        integration_manager.print_system_status()
        
        # Cr√©er le webhook Frame.io (optionnel, n√©cessite auth)
        print("\n‚ö†Ô∏è Pour cr√©er le webhook Frame.io, vous devez √™tre authentifi√©")
        print("   Configurez client_id, client_secret, account_id, workspace_id dans config/frameio_config.json")
        
        # Surveiller les webhooks
        await integration_manager.monitor_webhooks(duration=300)  # 5 minutes
        
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
    finally:
        # Arr√™ter le syst√®me
        await integration_manager.stop_webhook_system()


if __name__ == "__main__":
    asyncio.run(main())
