#!/usr/bin/env python3
"""
Test d'une S√©quence Unique - G√©n√©ration R√©elle pour Tests
G√©n√®re r√©ellement les fichiers pour une s√©quence afin de tester le script AE
"""

import sys
import os
from pathlib import Path
import json
from datetime import datetime

# Ajouter le chemin parent pour les imports
sys.path.append(str(Path(__file__).parent))

from platform_detector import PlatformPathManager
from generate_ae_projects_v2 import AfterEffectsGeneratorV2
from manage_exclusions import SequenceExclusionManager

class SequenceTestManager:
    """Gestionnaire pour tester une s√©quence sp√©cifique."""
    
    def __init__(self):
        self.platform_manager = PlatformPathManager()
        self.exclusion_manager = SequenceExclusionManager()
        self.generator = None
        
        # V√©rifier que les chemins sont OK
        paths_ok, _ = self.platform_manager.validate_paths()
        if not paths_ok:
            raise RuntimeError("Chemins de plateforme invalides")
    
    def list_available_sequences(self):
        """Liste les s√©quences disponibles pour test."""
        
        try:
            # Charger les donn√©es
            config_path = self.platform_manager.paths["config"]
            with open(config_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            sequences = data.get('sequences', {})
            excluded = self.exclusion_manager.load_excluded_sequences()
            
            available = []
            for seq_name, seq_data in sequences.items():
                if seq_name not in excluded:
                    shot_count = len(seq_data.get('shots', []))
                    duration = seq_data.get('duration_total', 0)
                    available.append({
                        'name': seq_name,
                        'title': seq_data.get('nom', 'Sans titre'),
                        'shots': shot_count,
                        'duration': duration
                    })
            
            return available, excluded
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement des s√©quences : {e}")
            return [], []
    
    def check_sequence_files(self, sequence_name):
        """V√©rifie les fichiers disponibles pour une s√©quence."""
        
        try:
            config_path = self.platform_manager.paths["config"]
            with open(config_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            sequence_data = data.get('sequences', {}).get(sequence_name)
            if not sequence_data:
                return None
            
            shots = sequence_data.get('shots', [])
            edit_path = Path(self.platform_manager.paths["from_edit"])
            grading_path = Path(self.platform_manager.paths["from_grading"])
            
            stats = {
                'total_shots': len(shots),
                'edit_available': 0,
                'graded_available': 0,
                'missing_edit': [],
                'missing_graded': []
            }
            
            for shot in shots:
                shot_name = shot.get('nom')
                if not shot_name:
                    continue
                
                # V√©rifier fichier EDIT
                edit_file = edit_path / f"{shot_name}.mov"
                if edit_file.exists():
                    stats['edit_available'] += 1
                else:
                    stats['missing_edit'].append(shot_name)
                
                # V√©rifier fichier GRADED
                graded_file = grading_path / f"{shot_name}.mov"
                if graded_file.exists():
                    stats['graded_available'] += 1
                else:
                    stats['missing_graded'].append(shot_name)
            
            return stats
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification : {e}")
            return None
    
    def test_sequence_generation(self, sequence_name, confirm=True):
        """G√©n√®re r√©ellement une s√©quence pour test."""
        
        print(f"üß™ TEST G√âN√âRATION R√âELLE - {sequence_name}")
        print("=" * 50)
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üñ•Ô∏è  Plateforme : {self.platform_manager.platform}")
        print()
        
        # V√©rifier que la s√©quence n'est pas exclue
        excluded = self.exclusion_manager.load_excluded_sequences()
        if sequence_name in excluded:
            print(f"‚ùå S√âQUENCE EXCLUE : {sequence_name}")
            print(f"   Raison : {excluded[sequence_name]}")
            return False
        
        # Analyser les fichiers disponibles
        stats = self.check_sequence_files(sequence_name)
        if not stats:
            print(f"‚ùå S√©quence {sequence_name} non trouv√©e")
            return False
        
        print(f"üìä ANALYSE FICHIERS {sequence_name}")
        print("-" * 30)
        print(f"   Plans total : {stats['total_shots']}")
        
        if stats['total_shots'] == 0:
            print("   ‚ùå Aucun plan trouv√© pour cette s√©quence")
            return False
        
        edit_percent = stats['edit_available'] / stats['total_shots'] * 100
        graded_percent = stats['graded_available'] / stats['total_shots'] * 100
        
        print(f"   EDIT disponibles : {stats['edit_available']}/{stats['total_shots']} ({edit_percent:.1f}%)")
        print(f"   GRADED disponibles : {stats['graded_available']}/{stats['total_shots']} ({graded_percent:.1f}%)")
        
        if stats['missing_edit']:
            print(f"   ‚ö†Ô∏è  Fichiers EDIT manquants : {len(stats['missing_edit'])}")
        
        if stats['missing_graded']:
            print(f"   ‚ö†Ô∏è  Fichiers GRADED manquants : {len(stats['missing_graded'])}")
        
        print()
        
        # Recommandation
        if stats['total_shots'] == 0:
            print("‚ùå S√©quence sans plans - Impossible de continuer")
            return False
            
        edit_percent = stats['edit_available'] / stats['total_shots'] * 100
        if edit_percent < 70:
            print(f"‚ö†Ô∏è  ATTENTION : Seulement {edit_percent:.1f}% des fichiers EDIT disponibles")
            print("   Recommand√© de choisir une s√©quence avec plus de fichiers")
            if confirm and input("   Continuer quand m√™me ? (o/N): ").lower() != 'o':
                return False
        
        print(f"üöÄ G√âN√âRATION EN COURS...")
        print("-" * 25)
        
        # Initialiser le g√©n√©rateur
        try:
            self.generator = AfterEffectsGeneratorV2()
            
            # G√©n√©rer la s√©quence
            success = self.generator.generate_for_sequence(sequence_name, dry_run=False)
            
            if success:
                print()
                print("‚úÖ G√âN√âRATION R√âUSSIE !")
                print("=" * 25)
                
                # Afficher les chemins g√©n√©r√©s
                sequences_path = Path(self.platform_manager.paths["sequences"])
                seq_path = sequences_path / sequence_name
                
                ae_file = seq_path / "_AE" / f"{sequence_name}_01.aep"
                script_file = seq_path / "_AE" / f"{sequence_name}_generation_script_v2.jsx"
                
                print(f"üìÅ Dossier s√©quence : {seq_path}")
                print(f"üé¨ Projet AE : {ae_file}")
                print(f"üìù Script AE : {script_file}")
                
                # Instructions pour le test
                print()
                print("üéØ INSTRUCTIONS DE TEST")
                print("-" * 22)
                print("1Ô∏è‚É£  Ouvrir After Effects 2025")
                print(f"2Ô∏è‚É£  Ouvrir le projet : {ae_file}")
                print("3Ô∏è‚É£  V√©rifier que toutes les compositions sont cr√©√©es")
                print("4Ô∏è‚É£  V√©rifier que les sources sont bien li√©es")
                print("5Ô∏è‚É£  Tester le script pour voir s'il s'ex√©cute sans erreur")
                print()
                print("üìã Si tout fonctionne, vous pourrez lancer le d√©ploiement complet !")
                
                return True
                
            else:
                print("‚ùå √âchec de la g√©n√©ration")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration : {e}")
            return False

def main():
    """Fonction principale interactive."""
    
    print("üß™ TEST S√âQUENCE UNIQUE - G√âN√âRATION R√âELLE")
    print("=" * 48)
    print("Ce script g√©n√®re r√©ellement les fichiers pour une s√©quence")
    print("afin que vous puissiez tester le script dans After Effects.")
    print()
    
    try:
        tester = SequenceTestManager()
        
        # Lister les s√©quences disponibles
        available, excluded = tester.list_available_sequences()
        
        if not available:
            print("‚ùå Aucune s√©quence disponible pour test")
            return 1
        
        print("üìã S√âQUENCES DISPONIBLES POUR TEST")
        print("-" * 35)
        
        for i, seq in enumerate(available[:10], 1):  # Limiter √† 10 pour la lisibilit√©
            print(f"   {i:2d}. {seq['name']} - {seq['title']}")
            print(f"       üìÑ {seq['shots']} plans | ‚è±Ô∏è  {seq['duration']:.1f}s")
        
        if len(available) > 10:
            print(f"       ... et {len(available) - 10} autres s√©quences")
        
        print()
        
        if excluded:
            print("üö´ S√âQUENCES EXCLUES")
            print("-" * 18)
            for seq_name, reason in excluded.items():
                print(f"   ‚Ä¢ {seq_name}: {reason}")
            print()
        
        # Demander quelle s√©quence tester
        print("Recommandations :")
        print("‚Ä¢ SQ01 : S√©quence de d√©part (peut avoir quelques fichiers manquants)")
        print("‚Ä¢ SQ03 : S√©quence compl√®te (100% des fichiers)")
        print("‚Ä¢ SQ04 : S√©quence compl√®te (100% des fichiers)")
        print()
        
        while True:
            choice = input("üéØ Quelle s√©quence tester ? (nom ou num√©ro, 'q' pour quitter) : ").strip()
            
            if choice.lower() == 'q':
                print("Test annul√©")
                return 0
            
            # V√©rifier si c'est un num√©ro
            try:
                idx = int(choice) - 1
                if 0 <= idx < len(available):
                    sequence_name = available[idx]['name']
                    break
            except ValueError:
                pass
            
            # V√©rifier si c'est un nom direct
            sequence_name = choice.upper()
            if any(seq['name'] == sequence_name for seq in available):
                break
            
            print(f"‚ùå S√©quence '{choice}' non trouv√©e. Essayez √† nouveau.")
        
        print()
        
        # Confirmer avant g√©n√©ration
        print(f"‚ö†Ô∏è  ATTENTION : Cette op√©ration va R√âELLEMENT g√©n√©rer les fichiers pour {sequence_name}")
        print("   - Cr√©ation du projet After Effects")
        print("   - Cr√©ation du script ExtendScript")
        print("   - Cr√©ation de la structure EbSynth")
        print()
        
        if input("Confirmer la g√©n√©ration r√©elle ? (o/N): ").lower() != 'o':
            print("Test annul√©")
            return 0
        
        # Lancer le test
        success = tester.test_sequence_generation(sequence_name, confirm=False)
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Test interrompu par l'utilisateur")
        return 1
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
