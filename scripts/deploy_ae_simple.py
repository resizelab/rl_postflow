#!/usr/bin/env python3
"""
After Effects Template Deployment - Version Simple
D√©ploie le template SQXX vers les s√©quences avec renommage automatique
"""

import os
import shutil
import csv
import re
from pathlib import Path
from typing import Dict, List, Tuple
import json

class SimpleAEDeployer:
    """D√©ployeur simple de templates After Effects"""
    
    def __init__(self, template_path: str, output_path: str, shots_csv: str):
        self.template_path = Path(template_path)
        self.output_path = Path(output_path)
        self.shots_csv = Path(shots_csv)
        
        # V√©rifications
        if not self.template_path.exists():
            raise FileNotFoundError(f"Template non trouv√©: {template_path}")
        if not self.shots_csv.exists():
            raise FileNotFoundError(f"CSV non trouv√©: {shots_csv}")
    
    def analyze_shots_data(self) -> Dict[str, List[str]]:
        """Analyse le CSV pour extraire s√©quences et plans"""
        print("üìä Analyse des donn√©es shots.csv...")
        
        sequences = {}
        
        with open(self.shots_csv, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                shot_id = row.get('shot_id', '').strip()
                if not shot_id:
                    continue
                
                # Extraire s√©quence et plan du shot_id (ex: SQ01_001)
                match = re.match(r'(SQ\d+)_(\d+)', shot_id)
                if match:
                    sequence = match.group(1)
                    plan = match.group(2)
                    
                    if sequence not in sequences:
                        sequences[sequence] = []
                    
                    if plan not in sequences[sequence]:
                        sequences[sequence].append(plan)
        
        # Trier les plans
        for seq in sequences:
            sequences[seq].sort()
        
        print(f"   ‚úÖ {len(sequences)} s√©quences trouv√©es")
        for seq, plans in sequences.items():
            print(f"      - {seq}: {len(plans)} plans ({min(plans)}-{max(plans)})")
        
        return sequences
    
    def analyze_template_structure(self) -> Dict[str, List[Path]]:
        """Analyse la structure du template pour identifier les patterns"""
        print("üìÅ Analyse du template SQXX...")
        
        patterns = {
            'SQXX': [],
            'XXX': [],
            'files_to_rename': [],
            'folders_to_rename': [],
            'aep_files': []
        }
        
        for item in self.template_path.rglob('*'):
            item_name = item.name
            
            # Fichiers .aep
            if item.suffix.lower() == '.aep':
                patterns['aep_files'].append(item)
            
            # Fichiers et dossiers avec SQXX
            if 'SQXX' in item_name:
                patterns['SQXX'].append(item)
                if item.is_file():
                    patterns['files_to_rename'].append(item)
                else:
                    patterns['folders_to_rename'].append(item)
            
            # Fichiers et dossiers avec XXX
            if 'XXX' in item_name:
                patterns['XXX'].append(item)
                if item.is_file():
                    patterns['files_to_rename'].append(item)
                else:
                    patterns['folders_to_rename'].append(item)
        
        print(f"   üìÑ Fichiers .aep: {len(patterns['aep_files'])}")
        for aep in patterns['aep_files']:
            rel_path = aep.relative_to(self.template_path)
            print(f"      - {rel_path}")
        
        print(f"   üìÑ Fichiers avec SQXX: {len([p for p in patterns['SQXX'] if p.is_file()])}")
        print(f"   üìÅ Dossiers avec SQXX: {len([p for p in patterns['SQXX'] if p.is_dir()])}")
        print(f"   üìÑ Fichiers avec XXX: {len([p for p in patterns['XXX'] if p.is_file()])}")
        print(f"   üìÅ Dossiers avec XXX: {len([p for p in patterns['XXX'] if p.is_dir()])}")
        
        return patterns
    
    def deploy_sequence(self, sequence_id: str, plans: List[str], dry_run: bool = True) -> bool:
        """D√©ploie une s√©quence avec ses plans"""
        print(f"\nüöÄ D√©ploiement {sequence_id} ({len(plans)} plans)...")
        
        # Cr√©er le dossier de s√©quence
        seq_output = self.output_path / sequence_id
        
        if dry_run:
            print(f"   [DRY RUN] Cr√©erait: {seq_output}")
        else:
            # Backup si le dossier existe d√©j√†
            if seq_output.exists():
                backup_path = seq_output.with_suffix('.backup')
                if backup_path.exists():
                    shutil.rmtree(backup_path)
                seq_output.rename(backup_path)
                print(f"   üì¶ Backup cr√©√©: {backup_path}")
            
            seq_output.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ Cr√©√©: {seq_output}")
        
        # Copier le template
        if not dry_run:
            shutil.copytree(self.template_path, seq_output, dirs_exist_ok=True)
            print(f"   ‚úÖ Template copi√© vers {seq_output}")
        
        # Renommer les fichiers et dossiers SQXX
        self._rename_sqxx_items(seq_output, sequence_id, dry_run)
        
        # Cr√©er les dossiers EB par plan
        self._create_eb_structure(seq_output, sequence_id, plans, dry_run)
        
        return True
    
    def _rename_sqxx_items(self, seq_path: Path, sequence_id: str, dry_run: bool):
        """Renomme tous les √©l√©ments contenant SQXX"""
        print(f"   üîÑ Renommage SQXX -> {sequence_id}...")
        
        if dry_run:
            # Simulation
            for item in seq_path.rglob('*'):
                if 'SQXX' in item.name:
                    old_name = item.name
                    new_name = old_name.replace('SQXX', sequence_id)
                    print(f"      [DRY RUN] {old_name} -> {new_name}")
            return
        
        # Collecter tous les items √† renommer (dossiers d'abord, puis fichiers)
        items_to_rename = []
        
        for item in seq_path.rglob('*'):
            if 'SQXX' in item.name:
                items_to_rename.append(item)
        
        # Trier: dossiers en premier (plus profonds d'abord), puis fichiers
        items_to_rename.sort(key=lambda x: (-len(x.parts), x.is_file()))
        
        for item in items_to_rename:
            old_name = item.name
            new_name = old_name.replace('SQXX', sequence_id)
            new_path = item.parent / new_name
            
            try:
                item.rename(new_path)
                print(f"      ‚úÖ {old_name} -> {new_name}")
            except Exception as e:
                print(f"      ‚ùå Erreur renommage {old_name}: {e}")
    
    def _create_eb_structure(self, seq_path: Path, sequence_id: str, plans: List[str], dry_run: bool):
        """Cr√©e la structure EB avec un dossier par plan"""
        print(f"   üìÅ Cr√©ation structure EB ({len(plans)} plans)...")
        
        # Chercher le dossier EB existant
        eb_path = None
        
        if not dry_run:
            for item in seq_path.rglob('*'):
                if item.is_dir() and 'EB' in item.name.upper():
                    eb_path = item
                    break
        
        if not eb_path:
            eb_path = seq_path / 'EB'
            
        if dry_run:
            print(f"      [DRY RUN] Dossier EB: {eb_path}")
        else:
            eb_path.mkdir(exist_ok=True)
            print(f"      ‚úÖ Dossier EB: {eb_path}")
        
        # Cr√©er un dossier par plan
        for plan in plans:
            plan_folder = eb_path / f"{sequence_id}_{plan}"
            
            if dry_run:
                print(f"      [DRY RUN] Plan: {plan_folder.name}")
            else:
                plan_folder.mkdir(exist_ok=True)
                print(f"      ‚úÖ Plan: {plan_folder.name}")
                
                # Cr√©er les sous-dossiers standard pour EbSynth
                for subfolder in ['source', 'output', 'frames', 'assets']:
                    sub_path = plan_folder / subfolder
                    sub_path.mkdir(exist_ok=True)
    
    def deploy_all_sequences(self, dry_run: bool = True) -> bool:
        """D√©ploie toutes les s√©quences"""
        print("üöÄ D√âPLOIEMENT COMPLET DES TEMPLATES AFTER EFFECTS")
        print("=" * 60)
        
        # Analyser les donn√©es
        sequences = self.analyze_shots_data()
        template_info = self.analyze_template_structure()
        
        print(f"\nüìã Plan de d√©ploiement:")
        total_plans = sum(len(plans) for plans in sequences.values())
        print(f"   - {len(sequences)} s√©quences")
        print(f"   - {total_plans} plans au total")
        print(f"   - Template: {self.template_path}")
        print(f"   - Destination: {self.output_path}")
        
        if dry_run:
            print("   ‚ö†Ô∏è  MODE DRY RUN - Aucune modification r√©elle")
        else:
            print("   üî• MODE R√âEL - Modifications appliqu√©es")
        
        # Confirmation en mode r√©el
        if not dry_run:
            print(f"\n‚ö†Ô∏è  ATTENTION: Ceci va cr√©er/modifier {len(sequences)} dossiers de s√©quences")
            response = input("‚ùì Confirmer le d√©ploiement ? (y/N): ")
            if response.lower() != 'y':
                print("‚ùå D√©ploiement annul√©")
                return False
        
        # D√©ployer chaque s√©quence
        print(f"\nüöÄ D√©ploiement des s√©quences...")
        
        success_count = 0
        for sequence_id, plans in sequences.items():
            try:
                self.deploy_sequence(sequence_id, plans, dry_run)
                success_count += 1
                print(f"   ‚úÖ {sequence_id}: OK")
            except Exception as e:
                print(f"   ‚ùå {sequence_id}: ERREUR - {e}")
        
        print(f"\nüéâ D√âPLOIEMENT TERMIN√â !")
        print(f"   ‚úÖ R√©ussi: {success_count}/{len(sequences)} s√©quences")
        
        if dry_run:
            print("üí° Pour appliquer les changements: relancez avec --real")
        else:
            print(f"‚úÖ {success_count} s√©quences d√©ploy√©es vers {self.output_path}")
        
        return success_count == len(sequences)

def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description='D√©ploiement templates After Effects')
    parser.add_argument('--real', action='store_true', help='Mode r√©el (par d√©faut: dry run)')
    parser.add_argument('--template', default="/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/_TEMPLATES/SQXX", 
                       help='Chemin du template')
    parser.add_argument('--output', default="/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/SEQUENCES",
                       help='Dossier de destination')
    parser.add_argument('--csv', default="/Users/home/Library/CloudStorage/OneDrive-Personnel/WORK/_DEV/rl_postflow/data/shots.csv",
                       help='Fichier CSV des plans')
    
    args = parser.parse_args()
    
    try:
        # Cr√©er le d√©ployeur
        deployer = SimpleAEDeployer(args.template, args.output, args.csv)
        
        # Mode de d√©ploiement
        dry_run = not args.real
        
        if dry_run:
            print("üß™ TEST EN MODE DRY RUN")
            print("=" * 40)
        else:
            print("üî• D√âPLOIEMENT R√âEL")
            print("=" * 40)
        
        # D√©ploiement
        success = deployer.deploy_all_sequences(dry_run=dry_run)
        
        if dry_run:
            print("\n" + "=" * 60)
            print("üí° Pour d√©ployer r√©ellement: python script.py --real")
        
        return success
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        return False

if __name__ == "__main__":
    main()
