#!/usr/bin/env python3
"""
Rapport quotidien automatis√© Discord
Ce script g√©n√®re et envoie un rapport quotidien du pipeline PostFlow
"""

import sys
import os
import json
from pathlib import Path
from datetime import datetime
import pytz

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.integrations.discord import DiscordNotifier
from src.parsers.csv_parser import parse_shots_csv

def get_paris_time():
    """Retourne l'heure actuelle √† Paris."""
    paris_tz = pytz.timezone('Europe/Paris')
    return datetime.now(paris_tz)

def generate_daily_report():
    """G√©n√®re et envoie un rapport quotidien"""
    
    print("üìä G√©n√©ration du rapport quotidien PostFlow...")
    
    try:
        # Charger la configuration
        project_root = Path(__file__).parent.parent
        config_path = project_root / "config" / "integrations.json"
        
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        # Cr√©er la configuration Discord
        discord_config = {
            'webhook_url': config['discord']['webhook_url'],
            'username': config['discord'].get('username', 'PostFlow BOT'),
            'avatar_url': config['discord'].get('avatar_url', '')
        }
        
        # Initialiser le notificateur Discord
        notifier = DiscordNotifier(discord_config)
        
        # Analyser les donn√©es du pipeline
        csv_file = project_root / "data" / "shots.csv"
        
        if csv_file.exists():
            # Parser le CSV pour obtenir les statistiques
            post_production_data = parse_shots_csv(str(csv_file))
            
            # Calculer les statistiques
            total_shots = post_production_data.project_info.total_shots
            unique_scenes = post_production_data.project_info.unique_scenes
            source_files = len(post_production_data.project_info.source_files)
            duplicates = len(post_production_data.get_duplicate_shots())
            gaps = len(post_production_data.get_nomenclature_gaps())
            
            # Analyser les statuts des plans (simulation)
            # En r√©alit√©, ces donn√©es viendraient du tracker de statuts
            stats = {
                "total_shots": total_shots,
                "completion_percentage": 78.5,  # Simulation
                "status_counts": {
                    "final_delivery": 198,
                    "review_approved": 45,
                    "ae_completed": 67,
                    "ae_in_progress": 23,
                    "ebsynth_in_progress": 8,
                    "error": 6
                }
            }
            
            # Envoyer le rapport quotidien
            print("üì§ Envoi du rapport quotidien...")
            success = notifier.notify_daily_report(stats)
            
            if success:
                # Envoyer un rapport d√©taill√© suppl√©mentaire
                embed = {
                    "title": "ÔøΩ Rapport Quotidien de Production",
                    "description": "Statistiques d√©taill√©es du pipeline PostFlow",
                    "color": 0x9932cc,  # Violet
                    "fields": [
                        {"name": "üé¨ Sc√®nes Uniques", "value": str(unique_scenes), "inline": True},
                        {"name": "üìÅ Fichiers Sources", "value": str(source_files), "inline": True},
                        {"name": "üîÑ Doublons D√©tect√©s", "value": str(duplicates), "inline": True},
                        {"name": "‚ö†Ô∏è Trous Nomenclature", "value": str(gaps), "inline": True},
                        {"name": "üìä Taux de Completion", "value": f"{stats['completion_percentage']:.1f}%", "inline": True}
                    ],
                    "timestamp": get_paris_time().isoformat()
                }
                
                # Ajouter une analyse des erreurs si il y en a
                if stats['status_counts']['error'] > 0:
                    embed["fields"].append({
                        "name": "üö® Attention",
                        "value": f"{stats['status_counts']['error']} plans en erreur n√©cessitent une attention",
                        "inline": False
                    })
                
                notifier.send_message("", embed)
                
                print("‚úÖ Rapport quotidien envoy√© avec succ√®s!")
                return True
            else:
                print("‚ùå √âchec de l'envoi du rapport quotidien")
                return False
                
        else:
            print("‚ùå Fichier CSV introuvable. Envoi d'un rapport basique...")
            
            # Rapport basique sans donn√©es
            embed = {
                "title": "‚ö†Ô∏è Rapport Quotidien - Donn√©es Limit√©es",
                "description": f"Rapport automatique du {get_paris_time().strftime('%d/%m/%Y')}",
                "color": 0xff9900,  # Orange
                "fields": [
                    {"name": "Status", "value": "Pipeline en attente de donn√©es", "inline": False},
                    {"name": "Action Requise", "value": "V√©rifier la disponibilit√© du fichier shots.csv", "inline": False}
                ]
            }
            
            success = notifier.send_message("üìä **Rapport Quotidien**", embed)
            return success
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du rapport : {str(e)}")
        
        # Envoyer une notification d'erreur
        try:
            discord_config = {
                'webhook_url': config['discord']['webhook_url'],
                'username': config['discord'].get('username', 'PostFlow BOT'),
                'avatar_url': config['discord'].get('avatar_url', '')
            }
            notifier = DiscordNotifier(discord_config)
            
            embed = {
                "title": "‚ùå Erreur Rapport Quotidien",
                "description": "Erreur lors de la g√©n√©ration du rapport quotidien",
                "color": 0xff0000,
                "fields": [
                    {"name": "Erreur", "value": str(e), "inline": False}
                ],
                "timestamp": get_paris_time().isoformat()
            }
            
            notifier.send_message("üö® **Erreur Syst√®me**", embed)
        except:
            pass
        
        return False

def schedule_daily_report():
    """Information sur la planification du rapport quotidien"""
    
    print("üìÖ Configuration du rapport quotidien automatique")
    print("=" * 50)
    print()
    print("Pour automatiser l'envoi du rapport quotidien, vous pouvez :")
    print()
    print("1. üçé macOS - Utiliser launchd:")
    print("   Cr√©er un fichier ~/Library/LaunchAgents/com.postflow.daily.plist")
    print()
    print("2. üêß Linux - Utiliser cron:")
    print("   Ajouter √† crontab: 0 9 * * * /path/to/python /path/to/daily_report.py")
    print()
    print("3. üñ•Ô∏è Manuel - Ex√©cuter ce script:")
    print("   python scripts/daily_report.py")
    print()
    print("üìß Le rapport sera envoy√© chaque jour √† 9h00 sur Discord.")
    print()
    
    # Exemple de configuration launchd pour macOS
    launchd_config = """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.postflow.daily</string>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/bin/python3</string>
        <string>/Users/home/Library/CloudStorage/OneDrive-Personnel/WORK/_DEV/rl_postflow/scripts/daily_report.py</string>
    </array>
    <key>StartCalendarInterval</key>
    <dict>
        <key>Hour</key>
        <integer>9</integer>
        <key>Minute</key>
        <integer>0</integer>
    </dict>
</dict>
</plist>"""
    
    print("üìÑ Exemple de configuration launchd (macOS):")
    print(launchd_config)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--schedule":
        schedule_daily_report()
    else:
        success = generate_daily_report()
        sys.exit(0 if success else 1)
