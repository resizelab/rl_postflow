#!/usr/bin/env python3
"""
Test de configuration Frame.io v4 - V√©rification des variables
"""

import os
from pathlib import Path

# Charger les variables d'environnement
try:
    from dotenv import load_dotenv
    env_file = Path(__file__).parent.parent / ".env"
    if env_file.exists():
        load_dotenv(env_file)
        print(f"‚úÖ Variables d'environnement charg√©es depuis {env_file}")
    else:
        print("‚ö†Ô∏è  Fichier .env non trouv√©")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv non install√©")

def check_frameio_config():
    """V√©rifie la configuration Frame.io"""
    print("\n" + "="*60)
    print("üîç V√âRIFICATION CONFIGURATION FRAME.IO V4")
    print("="*60)
    
    # Variables Adobe IMS
    print("\nüîê Adobe IMS Authentication:")
    ims_vars = [
        ('FRAMEIO_CLIENT_ID', 'Client ID'),
        ('FRAMEIO_CLIENT_SECRET', 'Client Secret'),
        ('FRAMEIO_ORG_ID', 'Organization ID'),
        ('FRAMEIO_TECHNICAL_ACCOUNT_ID', 'Technical Account ID'),
        ('FRAMEIO_PRIVATE_KEY_PATH', 'Private Key Path')
    ]
    
    ims_configured = 0
    for var, description in ims_vars:
        value = os.getenv(var)
        if value and not value.startswith('your_'):
            if 'SECRET' in var or 'KEY' in var:
                print(f"   ‚úÖ {description}: {value[:10]}...***")
            else:
                print(f"   ‚úÖ {description}: {value}")
            ims_configured += 1
        else:
            print(f"   ‚ùå {description}: √Ä configurer")
    
    # Variables Frame.io
    print("\nüìÇ Frame.io REST Endpoints:")
    frameio_vars = [
        ('FRAMEIO_ACCOUNT_ID', 'Account ID'),
        ('FRAMEIO_WORKSPACE_ID', 'Workspace ID'),
        ('FRAMEIO_DEFAULT_PROJECT_ID', 'Default Project ID')
    ]
    
    frameio_configured = 0
    for var, description in frameio_vars:
        value = os.getenv(var)
        if value and not value.startswith('your_'):
            print(f"   ‚úÖ {description}: {value}")
            frameio_configured += 1
        else:
            print(f"   ‚ùå {description}: √Ä configurer")
    
    # Configuration optionnelle
    print("\n‚öôÔ∏è  Configuration optionnelle:")
    optional_vars = [
        ('FRAMEIO_BASE_URL', 'Base URL'),
        ('FRAMEIO_IMS_HOST', 'IMS Host'),
        ('FRAMEIO_TIMEOUT', 'Timeout'),
        ('FRAMEIO_MAX_RETRIES', 'Max Retries')
    ]
    
    for var, description in optional_vars:
        value = os.getenv(var)
        if value:
            print(f"   ‚úÖ {description}: {value}")
    
    # R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â:")
    print(f"   Adobe IMS: {ims_configured}/5 variables configur√©es")
    print(f"   Frame.io: {frameio_configured}/3 variables configur√©es")
    
    if ims_configured == 5 and frameio_configured == 3:
        print("   üéâ Configuration compl√®te!")
        return True
    else:
        print("   ‚ö†Ô∏è  Configuration incompl√®te")
        
        print("\nüí° PROCHAINES √âTAPES:")
        if ims_configured < 5:
            print("   1. Configurez Adobe IMS sur https://developer.adobe.com/console/")
            print("   2. R√©cup√©rez ORG_ID, TECHNICAL_ACCOUNT_ID et la cl√© priv√©e")
            print("   3. Mettez √† jour le fichier .env")
        
        if frameio_configured < 3:
            print("   4. V√©rifiez vos IDs Frame.io dans les URLs")
        
        return False

def check_private_key():
    """V√©rifie si la cl√© priv√©e existe"""
    key_path = os.getenv('FRAMEIO_PRIVATE_KEY_PATH')
    if key_path and not key_path.startswith('path/to/'):
        key_file = Path(key_path)
        if key_file.exists():
            print(f"   ‚úÖ Cl√© priv√©e trouv√©e: {key_path}")
            return True
        else:
            print(f"   ‚ùå Cl√© priv√©e non trouv√©e: {key_path}")
            return False
    else:
        print("   ‚ùå Chemin de cl√© priv√©e non configur√©")
        return False

if __name__ == "__main__":
    config_ok = check_frameio_config()
    
    if config_ok:
        print("\nüîë V√©rification de la cl√© priv√©e:")
        key_ok = check_private_key()
        
        if key_ok:
            print("\nüöÄ Configuration pr√™te pour les tests!")
            print("   Ex√©cutez: python scripts/test_frameio_auth.py")
        else:
            print("\n‚ö†Ô∏è  Cl√© priv√©e manquante")
    
    print("\n" + "="*60)
