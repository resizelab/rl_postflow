#!/usr/bin/env python3
"""
Script de D√©ploiement After Effects Templates
D√©ploie automatiquement la structure SQXX vers toutes les s√©quences
"""

import json
import shutil
import os
from pathlib import Path
import argparse
import time
import logging
from typing import Dict, List, Optional

# Configuration
TEMPLATE_SOURCE = Path("/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/_TEMPLATES/SQXX")
SEQUENCES_DEST = Path("/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/SEQUENCES")
CONFIG_FILE = Path(__file__).parent.parent / "config" / "after_effects_mapping.json"

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('after_effects_deployment.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AfterEffectsDeployer:
    """D√©ployeur automatique de templates After Effects."""
    
    def __init__(self):
        self.config = self.load_config()
        self.stats = {
            'sequences_created': 0,
            'plans_created': 0,
            'files_copied': 0,
            'errors': 0,
            'start_time': None,
            'end_time': None
        }
        
    def load_config(self) -> Dict:
        """Charge la configuration depuis le fichier JSON."""
        if not CONFIG_FILE.exists():
            raise FileNotFoundError(f"Configuration non trouv√©e : {CONFIG_FILE}")
            
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def validate_paths(self) -> bool:
        """Valide l'existence des chemins source et destination."""
        if not TEMPLATE_SOURCE.exists():
            logger.error(f"‚ùå Template source non trouv√© : {TEMPLATE_SOURCE}")
            return False
            
        if not SEQUENCES_DEST.exists():
            logger.error(f"‚ùå Dossier destination non trouv√© : {SEQUENCES_DEST}")
            return False
            
        logger.info(f"‚úÖ Chemins valid√©s")
        logger.info(f"   Source : {TEMPLATE_SOURCE}")
        logger.info(f"   Destination : {SEQUENCES_DEST}")
        return True
    
    def rename_patterns(self, content: str, sequence_id: str, plan_num: Optional[int] = None) -> str:
        """Renomme les patterns dans les fichiers et dossiers."""
        # SQXX ‚Üí SQ01, SQ02, etc.
        content = content.replace("SQXX", sequence_id)
        
        if plan_num is not None:
            # 00XXX ‚Üí 00001, 00002, etc.
            content = content.replace("00XXX", f"{plan_num:05d}")
            # XXX ‚Üí 001, 002, etc. (pour compatibility)
            content = content.replace("XXX", f"{plan_num:03d}")
            
        return content
    
    def copy_and_rename_file(self, src_file: Path, dest_file: Path, 
                           sequence_id: str, plan_num: Optional[int] = None) -> bool:
        """Copie et renomme un fichier en appliquant les patterns."""
        try:
            # Cr√©er le dossier parent si n√©cessaire
            dest_file.parent.mkdir(parents=True, exist_ok=True)
            
            # Copier le fichier
            shutil.copy2(src_file, dest_file)
            
            # Si c'est un fichier texte/script, renommer le contenu
            text_extensions = {'.aep', '.psd', '.jsx', '.txt', '.md', '.json'}
            if dest_file.suffix.lower() in text_extensions:
                try:
                    # Lire et renommer le contenu pour certains types
                    if dest_file.suffix.lower() in {'.txt', '.md', '.json'}:
                        content = dest_file.read_text(encoding='utf-8')
                        new_content = self.rename_patterns(content, sequence_id, plan_num)
                        dest_file.write_text(new_content, encoding='utf-8')
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  Renommage contenu √©chou√© pour {dest_file}: {e}")
            
            self.stats['files_copied'] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur copie {src_file} ‚Üí {dest_file}: {e}")
            self.stats['errors'] += 1
            return False
    
    def copy_directory_structure(self, src_dir: Path, dest_dir: Path, 
                                sequence_id: str, plan_num: Optional[int] = None) -> bool:
        """Copie r√©cursivement une structure de dossiers en renommant."""
        try:
            for src_item in src_dir.rglob('*'):
                if src_item.name.startswith('.'):
                    continue  # Ignorer les fichiers cach√©s
                    
                # Calculer le chemin relatif
                rel_path = src_item.relative_to(src_dir)
                
                # Renommer le chemin
                new_rel_path = self.rename_patterns(str(rel_path), sequence_id, plan_num)
                dest_item = dest_dir / new_rel_path
                
                if src_item.is_file():
                    if not self.copy_and_rename_file(src_item, dest_item, sequence_id, plan_num):
                        return False
                elif src_item.is_dir():
                    dest_item.mkdir(parents=True, exist_ok=True)
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur copie structure {src_dir} ‚Üí {dest_dir}: {e}")
            self.stats['errors'] += 1
            return False
    
    def create_sequence(self, sequence_id: str, sequence_info: Dict) -> bool:
        """Cr√©e une s√©quence compl√®te avec tous ses plans."""
        logger.info(f"\\nüé¨ Cr√©ation s√©quence {sequence_id}: {sequence_info['name']}")
        
        # Cr√©er le dossier de s√©quence
        sequence_dir = SEQUENCES_DEST / sequence_id
        if sequence_dir.exists():
            logger.warning(f"‚ö†Ô∏è  S√©quence {sequence_id} existe d√©j√†, suppression...")
            shutil.rmtree(sequence_dir)
        
        sequence_dir.mkdir(parents=True, exist_ok=True)
        
        # 1. Copier la structure _AE
        logger.info(f"   üìÅ Cr√©ation dossier _AE...")
        ae_src = TEMPLATE_SOURCE / "_AE"
        ae_dest = sequence_dir / "_AE"
        if not self.copy_directory_structure(ae_src, ae_dest, sequence_id):
            return False
        
        # 2. Cr√©er la structure _EB avec tous les plans
        logger.info(f"   üìÅ Cr√©ation dossier _EB avec {sequence_info['plan_count']} plans...")
        eb_dest = sequence_dir / "_EB"
        eb_dest.mkdir(parents=True, exist_ok=True)
        
        # Template plan source
        plan_template = TEMPLATE_SOURCE / "_EB" / "UNDLM_00XXX"
        
        # Cr√©er chaque plan de la s√©quence
        for plan_num in sequence_info['plans']:
            plan_name = f"UNDLM_{plan_num:05d}"
            plan_dest = eb_dest / plan_name
            
            logger.info(f"      üìã Plan {plan_num:03d} ‚Üí {plan_name}")
            
            if not self.copy_directory_structure(plan_template, plan_dest, sequence_id, plan_num):
                logger.error(f"‚ùå √âchec cr√©ation plan {plan_name}")
                return False
                
            self.stats['plans_created'] += 1
        
        # 3. Cr√©er la structure _PS (vide)
        logger.info(f"   üìÅ Cr√©ation dossier _PS...")
        ps_dest = sequence_dir / "_PS"
        ps_dest.mkdir(parents=True, exist_ok=True)
        
        self.stats['sequences_created'] += 1
        logger.info(f"‚úÖ S√©quence {sequence_id} cr√©√©e avec succ√®s")
        return True
    
    def deploy_sequence(self, sequence_id: str) -> bool:
        """D√©ploie une s√©quence sp√©cifique."""
        if sequence_id not in self.config['sequences']:
            logger.error(f"‚ùå S√©quence {sequence_id} non trouv√©e dans la configuration")
            return False
            
        sequence_info = self.config['sequences'][sequence_id]
        return self.create_sequence(sequence_id, sequence_info)
    
    def deploy_all_sequences(self) -> bool:
        """D√©ploie toutes les s√©quences."""
        logger.info(f"üöÄ D√âPLOIEMENT DE TOUTES LES S√âQUENCES")
        logger.info(f"   Total s√©quences : {len(self.config['sequences'])}")
        logger.info(f"   Total plans : {self.config['metadata']['total_plans']}")
        
        success_count = 0
        
        for sequence_id, sequence_info in self.config['sequences'].items():
            if self.deploy_sequence(sequence_id):
                success_count += 1
            else:
                logger.error(f"‚ùå √âchec d√©ploiement {sequence_id}")
        
        logger.info(f"\\nüìä R√âSUM√â D√âPLOIEMENT")
        logger.info(f"   ‚úÖ S√©quences r√©ussies : {success_count}/{len(self.config['sequences'])}")
        logger.info(f"   üìã Plans cr√©√©s : {self.stats['plans_created']}")
        logger.info(f"   üìÑ Fichiers copi√©s : {self.stats['files_copied']}")
        logger.info(f"   ‚ùå Erreurs : {self.stats['errors']}")
        
        return success_count == len(self.config['sequences'])
    
    def validate_deployment(self) -> bool:
        """Valide le d√©ploiement en v√©rifiant la structure cr√©√©e."""
        logger.info(f"\\nüîç VALIDATION DU D√âPLOIEMENT")
        
        validation_errors = 0
        
        for sequence_id, sequence_info in self.config['sequences'].items():
            sequence_dir = SEQUENCES_DEST / sequence_id
            
            # V√©rifier existence s√©quence
            if not sequence_dir.exists():
                logger.error(f"‚ùå S√©quence manquante : {sequence_id}")
                validation_errors += 1
                continue
            
            # V√©rifier structure _AE, _EB, _PS
            for folder in ['_AE', '_EB', '_PS']:
                folder_path = sequence_dir / folder
                if not folder_path.exists():
                    logger.error(f"‚ùå Dossier manquant : {sequence_id}/{folder}")
                    validation_errors += 1
            
            # V√©rifier fichier AE
            ae_file = sequence_dir / "_AE" / f"{sequence_id}_01.aep"
            if not ae_file.exists():
                logger.error(f"‚ùå Fichier AE manquant : {ae_file}")
                validation_errors += 1
            
            # V√©rifier plans EB
            eb_dir = sequence_dir / "_EB"
            for plan_num in sequence_info['plans']:
                plan_name = f"UNDLM_{plan_num:05d}"
                plan_dir = eb_dir / plan_name
                
                if not plan_dir.exists():
                    logger.error(f"‚ùå Plan manquant : {sequence_id}/{plan_name}")
                    validation_errors += 1
                    continue
                
                # V√©rifier structure plan
                for subfolder in ['1_VIDEO-REF', '2_KEY', '3_OUT']:
                    subfolder_path = plan_dir / subfolder
                    if not subfolder_path.exists():
                        logger.error(f"‚ùå Sous-dossier manquant : {plan_name}/{subfolder}")
                        validation_errors += 1
                
                # V√©rifier fichier PSD
                psd_file = plan_dir / f"EB_{plan_name}.psd"
                if not psd_file.exists():
                    logger.error(f"‚ùå Fichier PSD manquant : {psd_file}")
                    validation_errors += 1
        
        if validation_errors == 0:
            logger.info(f"‚úÖ VALIDATION R√âUSSIE - Aucune erreur d√©tect√©e")
            return True
        else:
            logger.error(f"‚ùå VALIDATION √âCHOU√âE - {validation_errors} erreurs d√©tect√©es")
            return False
    
    def run(self, sequence_id: Optional[str] = None, test_mode: bool = False) -> bool:
        """Ex√©cute le d√©ploiement."""
        self.stats['start_time'] = time.time()
        
        logger.info(f"üé¨ AFTER EFFECTS TEMPLATE DEPLOYER")
        logger.info(f"=" * 50)
        
        if test_mode:
            logger.info(f"üß™ MODE TEST ACTIV√â")
        
        # Validation des chemins
        if not self.validate_paths():
            return False
        
        # D√©ploiement
        success = False
        if sequence_id:
            logger.info(f"üéØ D√©ploiement s√©quence unique : {sequence_id}")
            success = self.deploy_sequence(sequence_id)
        else:
            success = self.deploy_all_sequences()
        
        # Validation finale
        if success and not test_mode:
            self.validate_deployment()
        
        self.stats['end_time'] = time.time()
        duration = self.stats['end_time'] - self.stats['start_time']
        
        logger.info(f"\\n‚è±Ô∏è  DUR√âE TOTALE : {duration:.1f} secondes")
        
        return success

def main():
    """Fonction principale avec arguments ligne de commande."""
    parser = argparse.ArgumentParser(description='D√©ploiement After Effects Templates')
    parser.add_argument('--sequence', '-s', help='D√©ployer une s√©quence sp√©cifique (ex: SQ01)')
    parser.add_argument('--test', '-t', action='store_true', help='Mode test (pas de validation finale)')
    parser.add_argument('--all', '-a', action='store_true', help='D√©ployer toutes les s√©quences')
    parser.add_argument('--validate', '-v', action='store_true', help='Valider seulement (pas de d√©ploiement)')
    
    args = parser.parse_args()
    
    try:
        deployer = AfterEffectsDeployer()
        
        if args.validate:
            # Mode validation seulement
            success = deployer.validate_deployment()
        elif args.sequence:
            # D√©ploiement s√©quence unique
            success = deployer.run(sequence_id=args.sequence, test_mode=args.test)
        elif args.all:
            # D√©ploiement complet
            success = deployer.run(test_mode=args.test)
        else:
            # Mode interactif
            print("üé¨ After Effects Template Deployer")
            print("Choisissez une option :")
            print("1. D√©ployer toutes les s√©quences")
            print("2. D√©ployer une s√©quence sp√©cifique")
            print("3. Valider le d√©ploiement existant")
            
            choice = input("Votre choix (1-3) : ").strip()
            
            if choice == "1":
                success = deployer.run()
            elif choice == "2":
                seq_id = input("ID de la s√©quence (ex: SQ01) : ").strip().upper()
                success = deployer.run(sequence_id=seq_id)
            elif choice == "3":
                success = deployer.validate_deployment()
            else:
                print("‚ùå Choix invalide")
                return 1
        
        return 0 if success else 1
        
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale : {e}")
        return 1

if __name__ == "__main__":
    exit(main())
