#!/usr/bin/env python3
"""
Script de test pour valider les corrections du pipeline avec un fichier sp√©cifique
Usage: python test_with_file.py <chemin_vers_fichier>
"""

import asyncio
import sys
from pathlib import Path
import logging

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.integrations.frameio.auth import FrameIOAuth
from src.integrations.frameio.upload import FrameIOUploadManager, validate_strict_nomenclature
from src.utils.config import ConfigManager
from src.utils.thumbnail import ThumbnailGenerator

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_upload_flow(test_file_path):
    """
    Test complet du flux d'upload avec les corrections
    """
    try:
        logger.info("üß™ === TEST DES CORRECTIONS ===")
        logger.info(f"üìÅ Fichier de test: {test_file_path}")
        
        # 1. Configuration
        config = ConfigManager()
        
        # 2. V√©rifier que le fichier existe
        if not Path(test_file_path).exists():
            logger.error(f"‚ùå Fichier de test non trouv√©: {test_file_path}")
            logger.error("‚ö†Ô∏è Veuillez sp√©cifier un fichier existant pour le test")
            return
        
        file_size = Path(test_file_path).stat().st_size
        logger.info(f"üìè Taille du fichier: {file_size / (1024*1024):.2f} MB")
        
        # 3. Test validation nomenclature
        logger.info("üîç Test 1: Validation nomenclature")
        
        try:
            nomenclature_info = validate_strict_nomenclature(test_file_path)
            logger.info(f"‚úÖ Nomenclature valid√©e:")
            logger.info(f"   Shot ID: {nomenclature_info['shot_id']}")
            logger.info(f"   Version: {nomenclature_info['version']}")
            logger.info(f"   Scene: {nomenclature_info['scene_name']}")
            logger.info(f"   Filename: {nomenclature_info['filename']}")
        except Exception as e:
            logger.error(f"‚ùå Validation nomenclature √©chou√©e: {e}")
            return
        
        # 4. Test g√©n√©ration thumbnail avec Google Drive
        logger.info("üîç Test 2: G√©n√©ration thumbnail avec Google Drive")
        
        try:
            thumbnail_gen = ThumbnailGenerator(config)
            
            # Extraire le nom du shot
            shot_name = nomenclature_info.get('shot_id', 'TEST_SHOT')
            
            # Test avec Google Drive
            thumbnail_url = await thumbnail_gen.generate_with_drive_upload(
                test_file_path, 
                shot_name=shot_name
            )
            
            if thumbnail_url:
                logger.info(f"‚úÖ Thumbnail g√©n√©r√© avec Google Drive: {thumbnail_url}")
                
                if thumbnail_url.startswith('https://drive.google.com'):
                    logger.info("‚úÖ URL Google Drive publique (Discord parfait)")
                else:
                    logger.warning(f"‚ö†Ô∏è URL inattendue: {thumbnail_url}")
                    
                    # Fallback vers m√©thode locale si disponible
                    try:
                        fallback_url = await thumbnail_gen.generate_with_public_url(test_file_path)
                        if fallback_url:
                            logger.info(f"‚úÖ Fallback URL locale: {fallback_url}")
                    except:
                        logger.warning("‚ö†Ô∏è Fallback non disponible")
            else:
                logger.error("‚ùå √âchec g√©n√©ration thumbnail Google Drive")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration thumbnail: {e}")
        
        # 5. Test authentification Frame.io
        logger.info("üîç Test 3: Authentification Frame.io")
        
        try:
            project_root = Path(__file__).parent
            auth = FrameIOAuth(project_root)
            await auth.ensure_valid_token()
            
            # V√©rifier l'authentification via une requ√™te test
            try:
                # Test simple avec get_access_token
                token = await auth.get_access_token()
                if token:
                    logger.info("‚úÖ Authentification Frame.io r√©ussie")
                else:
                    logger.error("‚ùå Authentification Frame.io √©chou√©e")
                    return
            except Exception as e:
                logger.error(f"‚ùå Test token √©chou√©: {e}")
                return
                
        except Exception as e:
            logger.error(f"‚ùå Erreur authentification: {e}")
            return
        
        # 6. Test upload Frame.io R√âEL avec attente am√©lior√©e
        logger.info("üîç Test 4: Upload Frame.io R√âEL avec logique d'attente am√©lior√©e")
        
        frameio_link = None
        try:
            upload_manager = FrameIOUploadManager(config)
            
            # Upload r√©el
            logger.info("üöÄ D√©marrage upload Frame.io R√âEL")
            
            upload_result = await upload_manager.upload_file(
                nomenclature_info['shot_id'],  # shot_id
                test_file_path,                # file_path
                nomenclature_info['scene_name'], # scene_name
                metadata=nomenclature_info      # metadata optionnel
            )
            
            if upload_result and upload_result.get('success'):
                frameio_link = upload_result.get('review_link')
                logger.info(f"‚úÖ Upload Frame.io r√©ussi: {frameio_link}")
                
                # V√©rifier que le lien est accessible
                if frameio_link:
                    logger.info("‚úÖ Lien Frame.io g√©n√©r√© avec succ√®s")
                else:
                    logger.warning("‚ö†Ô∏è Upload r√©ussi mais pas de lien g√©n√©r√©")
            else:
                logger.error("‚ùå Upload Frame.io √©chou√©")
                logger.error(f"R√©sultat: {upload_result}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur upload Frame.io: {e}")
            import traceback
            traceback.print_exc()
        
        # 7. Test Google Sheets avec user_manager (vraies mises √† jour)
        logger.info("üîç Test 5: Int√©gration Google Sheets avec user_manager")
        
        try:
            from src.integrations.sheets.tracker import SheetsTracker
            from src.integrations.sheets.simple_user_manager import SimpleGoogleSheetsUserManager
            
            # Cr√©er un simple user manager
            user_manager = SimpleGoogleSheetsUserManager("config/google_credentials.json")
            
            # Tester la connexion
            spreadsheet_id = config.get('google_sheets.spreadsheet_id')
            
            if user_manager.test_connection(spreadsheet_id):
                logger.info("‚úÖ Connexion Google Sheets √©tablie")
                
                # Cr√©er le tracker avec user_manager
                sheets_tracker = SheetsTracker(
                    spreadsheet_id,
                    user_manager=user_manager
                )
                
                logger.info("‚úÖ User manager configur√© pour vraies mises √† jour")
                
                # Test mise √† jour avec toutes les donn√©es
                test_data = {
                    'version': nomenclature_info['version'],
                    'file_name': nomenclature_info['filename'],
                    'frameio_link': frameio_link or 'https://app.frame.io/test',
                    'processing_date': '2025-07-09T08:00:00',
                    'thumbnail_url': thumbnail_url if 'thumbnail_url' in locals() else None
                }
                
                result = await sheets_tracker.update_shot_status(
                    nomenclature_info['shot_id'],
                    "PROCESSED",
                    test_data
                )
                
                if result:
                    logger.info("‚úÖ Mise √† jour Google Sheets r√©ussie")
                    logger.info("üéØ VRAIE mise √† jour effectu√©e (pas de simulation)")
                else:
                    logger.error("‚ùå Mise √† jour Google Sheets √©chou√©e")
                    
            else:
                logger.error("‚ùå Impossible de se connecter √† Google Sheets")
                # Fallback vers mode simulation
                sheets_tracker = SheetsTracker(spreadsheet_id)
                
                test_data = {
                    'version': nomenclature_info['version'],
                    'file_name': nomenclature_info['filename'],
                    'frameio_link': 'https://app.frame.io/test',
                    'processing_date': '2025-07-09T08:00:00'
                }
                
                result = await sheets_tracker.update_shot_status(
                    nomenclature_info['shot_id'],
                    "PROCESSED",
                    test_data
                )
                
                if result:
                    logger.warning("‚ö†Ô∏è Fallback vers mode simulation r√©ussi")
                else:
                    logger.error("‚ùå M√™me le mode simulation a √©chou√©")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test Google Sheets: {e}")
            import traceback
            traceback.print_exc()
        
        # 8. Test notifications Discord avec thumbnails Google Drive
        logger.info("ÔøΩ Test 6: Notifications Discord avec thumbnails Google Drive")
        
        try:
            from src.integrations.discord.notifier import DiscordNotifier
            
            # Cr√©er le notifier Discord
            discord_notifier = DiscordNotifier(config)
            
            # Pr√©parer les donn√©es pour la notification
            discord_data = {
                'shot_id': nomenclature_info['shot_id'],
                'version': nomenclature_info['version'],
                'filename': nomenclature_info['filename'],
                'file_size': file_size,
                'frameio_link': frameio_link or 'https://app.frame.io/test',
                'thumbnail_url': thumbnail_url if 'thumbnail_url' in locals() else None,
                'processing_status': 'PROCESSED',
                'scene_name': nomenclature_info.get('scene_name', ''),
                'shot_name': nomenclature_info.get('shot_name', '')
            }
            
            # Envoyer la notification
            logger.info("üì¢ Envoi notification Discord...")
            
            # Utiliser notify_file_processed qui supporte les thumbnails
            notification_result = discord_notifier.notify_file_processed(
                filename=nomenclature_info['filename'],
                message=f"Le plan {nomenclature_info['shot_id']} {nomenclature_info['version']} est disponible pour review",
                frameio_link=frameio_link or 'https://app.frame.io/test',
                thumbnail_url=thumbnail_url if 'thumbnail_url' in locals() else None
            )
            
            if notification_result:
                logger.info("‚úÖ Notification Discord envoy√©e avec succ√®s")
                
                # V√©rifier si le thumbnail est inclus
                if thumbnail_url:
                    logger.info(f"‚úÖ Thumbnail inclus: {thumbnail_url}")
                    
                    # V√©rifier le format de l'URL
                    if thumbnail_url.startswith('https://drive.google.com'):
                        logger.info("‚úÖ Thumbnail Google Drive (optimal pour Discord)")
                    else:
                        logger.warning(f"‚ö†Ô∏è Thumbnail non-Google Drive: {thumbnail_url}")
                else:
                    logger.warning("‚ö†Ô∏è Notification envoy√©e sans thumbnail")
            else:
                logger.error("‚ùå √âchec envoi notification Discord")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur notification Discord: {e}")
            import traceback
            traceback.print_exc()
        
        # 9. Test syst√®me de tracking JSON (pr√©paration future)
        logger.info("üîç Test 7: Pr√©paration syst√®me de tracking JSON")
        
        try:
            # Cr√©er les donn√©es pour le tracking JSON
            tracking_data = {
                'file_path': str(test_file_path),
                'shot_id': nomenclature_info['shot_id'],
                'version': nomenclature_info['version'],
                'filename': nomenclature_info['filename'],
                'file_size': file_size,
                'file_hash': None,  # √Ä calculer plus tard
                'upload_timestamp': '2025-07-09T08:00:00',
                'frameio_file_id': None,  # √Ä r√©cup√©rer de l'upload
                'frameio_link': frameio_link,
                'thumbnail_url': thumbnail_url if 'thumbnail_url' in locals() else None,
                'thumbnail_drive_id': None,  # √Ä r√©cup√©rer du Google Drive
                'discord_message_id': None,  # √Ä r√©cup√©rer apr√®s notification
                'google_sheets_row': None,  # √Ä r√©cup√©rer apr√®s mise √† jour
                'status': 'PROCESSED'
            }
            
            logger.info("‚úÖ Structure tracking JSON pr√©par√©e")
            logger.info(f"üìã Donn√©es collect√©es: {len(tracking_data)} champs")
            
            # Pour l'instant, on logge juste la structure
            logger.info("üîÆ Futur: Sauvegarde dans uploads_tracking.json")
            logger.info("üîÆ Futur: D√©tection doublons via hash + metadata")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©paration tracking: {e}")
        
        # 10. R√©sum√© des corrections
        logger.info("üìã === R√âSUM√â DES TESTS ===")
        logger.info("‚úÖ 1. Validation nomenclature stricte")
        logger.info("‚úÖ 2. Thumbnail Google Drive g√©n√©r√©")
        logger.info("‚úÖ 3. Authentification Frame.io valid√©e")
        logger.info("‚úÖ 4. Upload Frame.io R√âEL test√©")
        logger.info("‚úÖ 5. Google Sheets avec vraies mises √† jour")
        logger.info("‚úÖ 6. Notifications Discord avec thumbnails")
        logger.info("‚úÖ 7. Structure tracking JSON pr√©par√©e")
        
        logger.info("üéØ === PROCHAINES √âTAPES ===")
        logger.info("1. Impl√©menter le syst√®me de tracking JSON complet")
        logger.info("2. Ajouter la d√©tection de doublons via hash")
        logger.info("3. R√©cup√©rer les IDs Frame.io et Discord pour tracking")
        logger.info("4. Optimiser le pipeline avec le cache de tracking")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©rale du test: {e}")
        import traceback
        traceback.print_exc()

def main():
    """
    Point d'entr√©e principal avec gestion des arguments
    """
    if len(sys.argv) < 2:
        print("Usage: python test_with_file.py <chemin_vers_fichier>")
        print("\nExemples:")
        print("  python test_with_file.py /Volumes/resizelab/o2b-undllm/4_OUT/2_FROM_VFX/SC01/UNDLM_00001/SC01_UNDLM_00001_v001.mov")
        print("  python test_with_file.py /path/to/your/SC02_SHOTNAME_v002.mov")
        sys.exit(1)
    
    test_file_path = sys.argv[1]
    asyncio.run(test_upload_flow(test_file_path))

if __name__ == "__main__":
    main()
