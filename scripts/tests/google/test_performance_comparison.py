#!/usr/bin/env python3
"""
Test comparatif de performance entre connexions multiples et persistantes
"""

import sys
import os
import time
import asyncio
# Ajouter le chemin vers la racine du projet
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from src.integrations.google import connection_manager, OptimizedSheetsStatusAdapter
from src.integrations.sheets.simple_user_manager import SimpleGoogleSheetsUserManager

async def test_performance_comparison():
    print("üèéÔ∏è Test comparatif de performance...")
    
    spreadsheet_id = '1mVni49q63ItOvChyUmh7AD_BXN-MsMhz4krzGzMOUKI'
    credentials_file = 'config/google_credentials.json'
    
    # === TEST 1: M√âTHODE ANCIENNE (nouvelle connexion √† chaque fois) ===
    print("\nüìä TEST 1: M√©thode ancienne (nouvelles connexions)")
    start_time = time.time()
    
    try:
        # Simuler 5 mises √† jour comme dans l'ancienne m√©thode
        for i in range(5):
            print(f"  üîÑ Connexion {i+1}/5...")
            user_manager = SimpleGoogleSheetsUserManager(credentials_file)
            service = user_manager.get_service()  # Nouvelle connexion √† chaque fois !
            
            # Simuler une op√©ration basique
            result = service.spreadsheets().get(
                spreadsheetId=spreadsheet_id,
                fields='properties.title'
            ).execute()
            
            print(f"  ‚úÖ Connexion {i+1} r√©ussie: {result['properties']['title']}")
    
    except Exception as e:
        print(f"‚ùå Erreur m√©thode ancienne: {e}")
    
    old_method_time = time.time() - start_time
    print(f"‚è±Ô∏è Temps m√©thode ancienne: {old_method_time:.2f}s")
    
    # === TEST 2: M√âTHODE NOUVELLE (connexion persistante) ===
    print("\nüìä TEST 2: M√©thode nouvelle (connexion persistante)")
    start_time = time.time()
    
    try:
        # Initialiser une seule fois
        connection_manager.initialize(credentials_file, spreadsheet_id)
        
        # Simuler 5 mises √† jour avec la m√™me connexion
        for i in range(5):
            print(f"  üîÑ Op√©ration {i+1}/5...")
            service = connection_manager.get_sheets_service()  # Connexion r√©utilis√©e !
            
            # M√™me op√©ration basique
            result = service.spreadsheets().get(
                spreadsheetId=spreadsheet_id,
                fields='properties.title'
            ).execute()
            
            print(f"  ‚úÖ Op√©ration {i+1} r√©ussie: {result['properties']['title']}")
    
    except Exception as e:
        print(f"‚ùå Erreur m√©thode nouvelle: {e}")
    
    new_method_time = time.time() - start_time
    print(f"‚è±Ô∏è Temps m√©thode nouvelle: {new_method_time:.2f}s")
    
    # === COMPARAISON ===
    print(f"\nüèÜ R√âSULTATS:")
    print(f"üìä M√©thode ancienne: {old_method_time:.2f}s")
    print(f"üìä M√©thode nouvelle: {new_method_time:.2f}s")
    
    if old_method_time > new_method_time:
        improvement = ((old_method_time - new_method_time) / old_method_time) * 100
        print(f"üöÄ AM√âLIORATION: {improvement:.1f}% plus rapide !")
        print(f"‚ö° Gain de temps: {old_method_time - new_method_time:.2f}s")
    else:
        print("üìä Pas d'am√©lioration significative d√©tect√©e")
    
    # === TEST 3: TEST D'ADAPTATEUR OPTIMIS√â ===
    print(f"\nüìä TEST 3: Adaptateur optimis√©")
    start_time = time.time()
    
    try:
        adapter = OptimizedSheetsStatusAdapter(
            connection_manager,
            spreadsheet_id,
            'SHOTS_TRACK'
        )
        
        # Test de recherche de shot
        row_number = await adapter.find_shot_row('UNDLM_00036')
        if row_number:
            print(f"‚úÖ Shot trouv√© √† la ligne: {row_number}")
        else:
            print("‚ùå Shot non trouv√©")
            
    except Exception as e:
        print(f"‚ùå Erreur adaptateur optimis√©: {e}")
    
    adapter_time = time.time() - start_time
    print(f"‚è±Ô∏è Temps adaptateur optimis√©: {adapter_time:.2f}s")

if __name__ == "__main__":
    asyncio.run(test_performance_comparison())
