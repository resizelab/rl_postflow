#!/usr/bin/env python3
"""
OAuth Web App Frame.io - Processus complet
G√©n√®re l'URL d'autorisation et √©change le code contre un token
"""

import json
import requests
import urllib.parse
import base64
from pathlib import Path
from datetime import datetime

def load_oauth_config():
    """Charger les informations OAuth depuis les fichiers data/"""
    oauth_file = Path(__file__).parent.parent / "data" / "890CarmineWhitefish-1845895-OAuth Web App.json"
    
    if not oauth_file.exists():
        print(f"‚ùå Fichier OAuth non trouv√©: {oauth_file}")
        return None
    
    with open(oauth_file, 'r') as f:
        oauth_data = json.load(f)
    
    return {
        'client_id': oauth_data['API_KEY'],
        'client_secret': oauth_data['CLIENT_SECRET'],
        'redirect_uri': oauth_data['DEF_REDIRECT_URI']
    }

def generate_auth_url(oauth_config):
    """G√©n√©rer l'URL d'autorisation OAuth Adobe IMS pour Frame.io"""
    base_url = "https://ims-na1.adobelogin.com/ims/authorize/v2"
    
    params = {
        'client_id': oauth_config['client_id'],
        'redirect_uri': oauth_config['redirect_uri'],
        'response_type': 'code',
        'scope': 'email openid offline_access profile additional_info.roles'
    }
    
    auth_url = f"{base_url}?" + urllib.parse.urlencode(params)
    
    print("üîó URL D'AUTORISATION ADOBE IMS (FRAME.IO):")
    print("=" * 55)
    print(auth_url)
    print()
    print("üìã INSTRUCTIONS:")
    print("1. Copiez cette URL et ouvrez-la dans votre navigateur")
    print("2. Connectez-vous √† Adobe avec votre compte")
    print("3. Autorisez l'acc√®s √† Frame.io")
    print("4. Vous serez redirig√© vers https://localhost:8080/callback?code=...")
    print("5. Copiez le CODE depuis l'URL (apr√®s 'code=')")
    print("6. Relancez ce script avec le code comme argument")
    print()
    
    return auth_url

def exchange_code_for_token(oauth_config, authorization_code):
    """√âchanger le code d'autorisation contre un access token Adobe IMS"""
    token_url = "https://ims-na1.adobelogin.com/ims/token/v3"
    
    # Pour OAuth Web App, utiliser Authorization Basic header (selon doc Adobe)
    credentials = f"{oauth_config['client_id']}:{oauth_config['client_secret']}"
    credentials_b64 = base64.b64encode(credentials.encode()).decode()
    
    headers = {
        'Authorization': f'Basic {credentials_b64}',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
    }
    
    # Body avec seulement code et grant_type (selon doc Adobe)
    data = {
        'grant_type': 'authorization_code',
        'code': authorization_code
    }
    
    try:
        print(f"üîÑ √âchange du code contre un token...")
        print(f"üîß M√©thode: OAuth Web App (Basic Auth)")
        
        response = requests.post(token_url, data=data, headers=headers, timeout=30)
        
        print(f"üìä Statut: {response.status_code}")
        print(f"üìä Headers de r√©ponse: {dict(response.headers)}")
        
        if response.status_code == 200:
            token_data = response.json()
            
            print("‚úÖ TOKEN OBTENU !")
            print(f"Access Token: {token_data.get('access_token', 'N/A')[:50]}...")
            print(f"Refresh Token: {token_data.get('refresh_token', 'N/A')[:50]}...")
            print(f"Token Type: {token_data.get('token_type', 'N/A')}")
            print(f"Expires in: {token_data.get('expires_in', 'N/A')} secondes")
            print(f"ID Token pr√©sent: {'‚úÖ' if token_data.get('id_token') else '‚ùå'}")
            
            # Sauvegarder les tokens dans la config
            save_tokens_to_config(
                token_data.get('access_token'), 
                token_data.get('refresh_token')
            )
            
            return token_data
        else:
            print(f"‚ùå Erreur √©change token: {response.status_code}")
            print(f"R√©ponse compl√®te: {response.text}")
            
            # Essayer de d√©coder la r√©ponse JSON pour plus de d√©tails
            try:
                error_data = response.json()
                print(f"D√©tails erreur: {error_data}")
            except:
                pass
            
            return None
            
    except Exception as e:
        print(f"‚ùå Exception √©change token: {e}")
        return None

def save_token_to_config(access_token):
    """Sauvegarder le token dans la config"""
    config_path = Path(__file__).parent.parent / "config" / "integrations.json"
    
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        if 'frameio' not in config:
            config['frameio'] = {}
        
        config['frameio']['api_token'] = access_token
        
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=4)
        
        print(f"üíæ Token sauvegard√© dans {config_path}")
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")

def save_tokens_to_config(access_token, refresh_token):
    """Sauvegarder les tokens dans le fichier de configuration"""
    config_file = Path(__file__).parent.parent / "config" / "integrations.json"
    
    try:
        # Lire la config existante
        if config_file.exists():
            with open(config_file, 'r') as f:
                config = json.load(f)
        else:
            config = {}
        
        # Mettre √† jour les tokens Frame.io
        if 'frameio' not in config:
            config['frameio'] = {}
        
        config['frameio']['api_token'] = access_token
        config['frameio']['refresh_token'] = refresh_token
        config['frameio']['token_type'] = 'OAuth'
        config['frameio']['updated_at'] = datetime.now().isoformat()
        
        # Sauvegarder
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        
        print(f"‚úÖ Tokens sauvegard√©s dans {config_file}")
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde tokens: {e}")

def load_current_tokens():
    """Charger les tokens actuels depuis la configuration"""
    config_file = Path(__file__).parent.parent / "config" / "integrations.json"
    
    try:
        if config_file.exists():
            with open(config_file, 'r') as f:
                config = json.load(f)
            
            frameio_config = config.get('frameio', {})
            return {
                'access_token': frameio_config.get('api_token'),
                'refresh_token': frameio_config.get('refresh_token'),
                'token_type': frameio_config.get('token_type'),
                'updated_at': frameio_config.get('updated_at')
            }
    except Exception as e:
        print(f"‚ùå Erreur lecture tokens: {e}")
    
    return {}

def test_token(access_token):
    """Tester le nouveau token"""
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get("https://api.frame.io/v2/me", headers=headers, timeout=10)
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"‚úÖ Token valide ! Utilisateur: {user_data.get('name', 'N/A')}")
            return True
        else:
            print(f"‚ùå Token invalide: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test token: {e}")
        return False

def refresh_access_token(oauth_config, refresh_token):
    """Rafra√Æchir l'access token avec le refresh token (OAuth Web App)"""
    token_url = "https://ims-na1.adobelogin.com/ims/token/v3"
    
    # Pour OAuth Web App, utiliser Authorization Basic header
    credentials = f"{oauth_config['client_id']}:{oauth_config['client_secret']}"
    credentials_b64 = base64.b64encode(credentials.encode()).decode()
    
    headers = {
        'Authorization': f'Basic {credentials_b64}',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
    }
    
    data = {
        'grant_type': 'refresh_token',
        'refresh_token': refresh_token
    }
    
    try:
        print(f"üîÑ Rafra√Æchissement du token...")
        
        response = requests.post(token_url, data=data, headers=headers, timeout=30)
        
        print(f"üìä Statut: {response.status_code}")
        
        if response.status_code == 200:
            token_data = response.json()
            
            print("‚úÖ TOKEN RAFRA√éCHI !")
            print(f"Access Token: {token_data.get('access_token', 'N/A')[:50]}...")
            print(f"Refresh Token: {token_data.get('refresh_token', 'N/A')[:50]}...")
            print(f"Expires in: {token_data.get('expires_in', 'N/A')} secondes")
            
            # Sauvegarder les nouveaux tokens
            save_tokens_to_config(token_data.get('access_token'), token_data.get('refresh_token'))
            
            return token_data
        else:
            print(f"‚ùå Erreur rafra√Æchissement: {response.status_code}")
            print(f"R√©ponse compl√®te: {response.text}")
            
            try:
                error_data = response.json()
                print(f"D√©tails erreur: {error_data}")
            except:
                pass
            
            return None
            
    except Exception as e:
        print(f"‚ùå Exception rafra√Æchissement: {e}")
        return None

def test_frameio_api(access_token):
    """Tester l'acc√®s √† l'API Frame.io avec le token"""
    # Utiliser Frame.io V4 API (selon documentation officielle)
    api_url = "https://api.frame.io/v4/me"
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    try:
        print(f"üß™ Test Frame.io V4 API...")
        
        response = requests.get(api_url, headers=headers, timeout=30)
        
        print(f"üìä Statut: {response.status_code}")
        
        if response.status_code == 200:
            user_data = response.json()
            print("‚úÖ API FRAME.IO V4 ACCESSIBLE !")
            print(f"Utilisateur: {user_data.get('name', 'N/A')} ({user_data.get('email', 'N/A')})")
            print(f"ID: {user_data.get('id', 'N/A')}")
            
            # Informations suppl√©mentaires Frame.io v4
            if 'account' in user_data:
                print(f"Compte: {user_data['account'].get('name', 'N/A')}")
            if 'teams' in user_data:
                print(f"√âquipes: {len(user_data.get('teams', []))}")
                
            return True
        elif response.status_code == 401:
            print(f"‚ùå Non autoris√© - Compte Adobe pas li√© √† Frame.io")
            print("üí° Connectez-vous d'abord √† Frame.io avec votre compte Adobe")
            print("üí° Puis g√©n√©rez un nouveau token")
        else:
            print(f"‚ùå Erreur API Frame.io V4: {response.status_code}")
            print(f"R√©ponse: {response.text}")
        
        return False
            
    except Exception as e:
        print(f"‚ùå Exception test API: {e}")
        return False

def main_menu():
    """Menu principal pour g√©rer l'authentification Frame.io"""
    oauth_config = load_oauth_config()
    if not oauth_config:
        print("‚ùå Configuration OAuth manquante")
        return
    
    while True:
        print("\n" + "="*50)
        print("üé¨ AUTHENTIFICATION FRAME.IO - MENU PRINCIPAL")
        print("="*50)
        
        current_tokens = load_current_tokens()
        if current_tokens.get('access_token'):
            print(f"‚úÖ Token actuel: ...{current_tokens['access_token'][-10:]}")
            print(f"üìÖ Mis √† jour: {current_tokens.get('updated_at', 'N/A')}")
        else:
            print("‚ùå Aucun token configur√©")
        
        print("\nOptions:")
        print("1. üîó G√©n√©rer une nouvelle URL d'autorisation")
        print("2. üîë √âchanger un code d'autorisation contre un token")
        print("3. üîÑ Rafra√Æchir le token actuel")
        print("4. üß™ Tester l'API Frame.io")
        print("5. üìã Afficher la configuration actuelle")
        print("6. üìÅ Cr√©er un fichier temporaire pour le code")
        print("7. ‚ùå Quitter")
        
        choice = input("\nVotre choix (1-7): ").strip()
        
        if choice == "1":
            generate_auth_url_interactive(oauth_config)
        elif choice == "2":
            exchange_code_interactive(oauth_config)
        elif choice == "3":
            refresh_token_interactive(oauth_config)
        elif choice == "4":
            test_api_interactive()
        elif choice == "5":
            display_current_config()
        elif choice == "6":
            create_temp_code_file()
        elif choice == "7":
            print("üëã Au revoir !")
            break
        else:
            print("‚ùå Choix invalide")

def generate_auth_url_interactive(oauth_config):
    """Interface interactive pour g√©n√©rer l'URL d'autorisation"""
    print("\nüìã G√âN√âRATION URL D'AUTORISATION")
    print("-" * 40)
    
    auth_url = generate_auth_url(oauth_config)
    print(f"\nüîó URL d'autorisation g√©n√©r√©e:")
    print(f"{auth_url}")
    
    print(f"\nüìã √âTAPES √Ä SUIVRE:")
    print(f"1. Copiez l'URL ci-dessus")
    print(f"2. Ouvrez-la dans votre navigateur")
    print(f"3. Connectez-vous avec votre compte Adobe")
    print(f"4. Autorisez l'application")
    print(f"5. Copiez le code depuis l'URL de redirection")
    print(f"6. Utilisez l'option 2 du menu pour √©changer le code")

def extract_code_from_input(user_input):
    """Extraire le code d'autorisation depuis une URL ou une saisie brute"""
    user_input = user_input.strip()
    
    # Si c'est une URL compl√®te avec code=
    if 'code=' in user_input:
        try:
            # Extraire le code depuis l'URL
            parsed = urllib.parse.urlparse(user_input)
            query_params = urllib.parse.parse_qs(parsed.query)
            code = query_params.get('code', [None])[0]
            if code:
                print(f"‚úÖ Code extrait depuis l'URL: {code[:20]}...")
                return code
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur extraction URL: {e}")
    
    # Si c'est juste le code (commence g√©n√©ralement par des caract√®res alphanum√©riques)
    if len(user_input) > 50 and not user_input.startswith('http'):
        print(f"‚úÖ Code d√©tect√©: {user_input[:20]}...")
        return user_input
    
    # Si rien ne correspond, retourner tel quel
    print(f"‚ö†Ô∏è Format non reconnu, utilisation tel quel. Longueur: {len(user_input)}")
    return user_input

def exchange_code_interactive(oauth_config):
    """Interface interactive pour √©changer le code"""
    print("\nüîë √âCHANGE CODE D'AUTORISATION")
    print("-" * 40)
    
    print("üìã M√âTHODES DE SAISIE:")
    print("1. ÔøΩ Coller l'URL compl√®te de redirection")
    print("2. üìù Coller uniquement le code d'autorisation")
    print("3. üìÑ Saisie multi-lignes (pour tr√®s longs codes)")
    print("4. üìÅ Charger depuis un fichier texte")
    print()
    
    method = input("Choisissez la m√©thode (1-4): ").strip()
    
    if method == "1":
        print("\nüìã Collez l'URL compl√®te de redirection:")
        print("Exemple: https://localhost:8080/callback?code=eyJhbGc...")
        user_input = input("> ").strip()
        code = extract_code_from_input(user_input)
    
    elif method == "2":
        print("\nüìù Collez le code d'autorisation:")
        print("(Le code peut √™tre tr√®s long, plusieurs centaines de caract√®res)")
        code = input("> ").strip()
    
    elif method == "3":
        print("\nüìÑ SAISIE MULTI-LIGNES:")
        print("Collez le code (peut √™tre sur plusieurs lignes)")
        print("Appuyez sur Ctrl+D (Mac/Linux) ou Ctrl+Z puis Entr√©e (Windows) pour terminer:")
        print()
        
        lines = []
        try:
            while True:
                line = input()
                lines.append(line)
        except EOFError:
            pass
        
        code = ''.join(lines).strip()
        print(f"‚úÖ Code re√ßu: {len(code)} caract√®res")
    
    elif method == "4":
        print("\nüìÅ Chargement depuis un fichier:")
        filepath = input("Chemin du fichier contenant le code: ").strip()
        try:
            with open(filepath, 'r') as f:
                code = f.read().strip()
            print(f"‚úÖ Code charg√© depuis {filepath}: {len(code)} caract√®res")
        except Exception as e:
            print(f"‚ùå Erreur lecture fichier: {e}")
            return
    
    else:
        print("‚ùå M√©thode invalide")
        return
    
    if not code:
        print("‚ùå Aucun code fourni")
        return
    
    # Nettoyer le code (supprimer espaces, retours √† la ligne superflus)
    # Mais garder la structure si c'est une URL
    if not code.startswith('http'):
        code = ''.join(code.split())
    
    print(f"\nüîç V√âRIFICATION DU CODE:")
    print(f"Longueur: {len(code)} caract√®res")
    print(f"D√©but: {code[:30]}...")
    print(f"Fin: ...{code[-20:]}")
    
    # Demander confirmation si le code semble anormalement court
    if len(code) < 100:
        print(f"‚ö†Ô∏è ATTENTION: Le code semble court ({len(code)} caract√®res)")
        print("   Les codes OAuth Adobe sont g√©n√©ralement tr√®s longs (200+ caract√®res)")
        confirm = input("Continuer malgr√© tout ? (o/N): ").strip().lower()
        if confirm != 'o':
            print("‚ùå Op√©ration annul√©e")
            return
    
    # Extraire le code final si c'√©tait une URL
    final_code = extract_code_from_input(code)
    
    print(f"\nüîÑ √âchange en cours...")
    token_data = exchange_code_for_token(oauth_config, final_code)
    if token_data:
        print("‚úÖ Token obtenu avec succ√®s !")

def refresh_token_interactive(oauth_config):
    """Interface interactive pour rafra√Æchir le token"""
    print("\nüîÑ RAFRA√éCHISSEMENT TOKEN")
    print("-" * 40)
    
    current_tokens = load_current_tokens()
    refresh_token = current_tokens.get('refresh_token')
    
    if not refresh_token:
        print("‚ùå Aucun refresh token disponible")
        print("üí° Vous devez d'abord obtenir un token via l'option 1 et 2")
        return
    
    token_data = refresh_access_token(oauth_config, refresh_token)
    if token_data:
        print("‚úÖ Token rafra√Æchi avec succ√®s !")

def test_api_interactive():
    """Interface interactive pour tester l'API"""
    print("\nüß™ TEST API FRAME.IO")
    print("-" * 40)
    
    current_tokens = load_current_tokens()
    access_token = current_tokens.get('access_token')
    
    if not access_token:
        print("‚ùå Aucun access token disponible")
        print("üí° Vous devez d'abord obtenir un token via l'option 1 et 2")
        return
    
    test_frameio_api(access_token)

def display_current_config():
    """Afficher la configuration actuelle"""
    print("\nüìã CONFIGURATION ACTUELLE")
    print("-" * 40)
    
    oauth_config = load_oauth_config()
    current_tokens = load_current_tokens()
    
    print(f"Client ID: {oauth_config['client_id']}")
    print(f"Redirect URI: {oauth_config['redirect_uri']}")
    
    if current_tokens.get('access_token'):
        print(f"Access Token: ...{current_tokens['access_token'][-20:]}")
        print(f"Refresh Token: {'‚úÖ Pr√©sent' if current_tokens.get('refresh_token') else '‚ùå Absent'}")
        print(f"Type: {current_tokens.get('token_type', 'N/A')}")
        print(f"Mis √† jour: {current_tokens.get('updated_at', 'N/A')}")
    else:
        print("‚ùå Aucun token configur√©")

def main():
    import sys
    
    print("üé¨ OAUTH WEB APP FRAME.IO")
    print("=" * 30)
    print()
    
    # Charger la config OAuth
    oauth_config = load_oauth_config()
    if not oauth_config:
        return
    
    # V√©rifier si un code a √©t√© fourni en argument (mode legacy)
    if len(sys.argv) > 1:
        authorization_code = sys.argv[1]
        print(f"üìù Code d'autorisation re√ßu: {authorization_code[:20]}...")
        
        # √âchanger le code contre un token
        token_data = exchange_code_for_token(oauth_config, authorization_code)
        
        if token_data and token_data.get('access_token'):
            # Tester le token
            test_frameio_api(token_data.get('access_token'))
        
    else:
        # Mode interactif avec menu
        main_menu()

def create_temp_code_file():
    """Cr√©er un fichier temporaire pour faciliter la saisie du code"""
    temp_dir = Path(__file__).parent.parent / "temp"
    temp_dir.mkdir(exist_ok=True)
    
    temp_file = temp_dir / "oauth_code.txt"
    
    # Cr√©er le fichier avec des instructions
    instructions = """# INSTRUCTIONS:
# 1. Supprimez ces lignes de commentaire
# 2. Collez votre code d'autorisation sur la ligne suivante
# 3. Sauvegardez le fichier
# 4. Retournez au script et choisissez l'option 4 (fichier)

"""
    
    with open(temp_file, 'w') as f:
        f.write(instructions)
    
    print(f"‚úÖ Fichier temporaire cr√©√©: {temp_file}")
    print("üí° Vous pouvez ouvrir ce fichier dans un √©diteur pour coller le code")
    
    return str(temp_file)

if __name__ == "__main__":
    main()
