"""
Script de test pour l'int√©gration compl√®te PostFlow
Teste les nouvelles fonctionnalit√©s Frame.io + Discord + Google Sheets
"""

import asyncio
import logging
import os
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ajout du chemin pour les imports
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.integrations.frameio.auth import FrameIOAuth
from src.integrations.discord.notifier import create_discord_notifier
from src.integrations.sheets.auth import GoogleSheetsAuth, GoogleSheetsConfig
from src.integrations.sheets.users import init_sheets_user_manager, get_assigned_user
from examples.complete_integration import PostFlowIntegration


async def test_complete_integration():
    """Test de l'int√©gration compl√®te."""
    
    try:
        logger.info("üöÄ Test int√©gration compl√®te PostFlow")
        
        # Configuration Frame.io
        frameio_auth = FrameIOAuth()
        
        # Configuration Discord (utilise le webhook existant)
        discord_webhook = os.getenv('DISCORD_WEBHOOK_URL', 'https://discord.com/api/webhooks/YOUR-WEBHOOK-URL')
        
        # Configuration Google Sheets
        sheets_config = GoogleSheetsConfig(
            credentials_file=os.getenv('GOOGLE_SHEETS_CREDENTIALS', 'config/google_sheets_credentials.json'),
            spreadsheet_id=os.getenv('GOOGLE_SHEETS_ID', 'your-spreadsheet-id'),
            worksheet_name="Shot Tracking"
        )
        
        # Cr√©er l'int√©gration
        integration = PostFlowIntegration(frameio_auth, discord_webhook, sheets_config)
        
        # Initialiser
        logger.info("üìã Initialisation de l'int√©gration...")
        if not await integration.initialize():
            logger.error("‚ùå Impossible d'initialiser l'int√©gration")
            return
        
        logger.info("‚úÖ Int√©gration initialis√©e avec succ√®s")
        
        # Test des fonctionnalit√©s
        
        # 1. Test r√©cup√©ration utilisateur assign√©
        logger.info("üë§ Test r√©cup√©ration utilisateur assign√©...")
        test_shot_id = "UNDLM_00412"
        assigned_user = integration.get_assigned_user_info(test_shot_id)
        
        if assigned_user:
            logger.info(f"‚úÖ Utilisateur assign√©: {assigned_user}")
        else:
            logger.warning("‚ö†Ô∏è Aucun utilisateur assign√© trouv√©")
        
        # 2. Test r√©cup√©ration statut plan
        logger.info("üìä Test r√©cup√©ration statut plan...")
        shot_status = integration.get_shot_status(test_shot_id)
        
        if shot_status:
            logger.info(f"‚úÖ Statut du plan: {shot_status}")
        else:
            logger.warning("‚ö†Ô∏è Aucun statut trouv√© pour le plan")
        
        # 3. Test notification Discord
        logger.info("üì¢ Test notification Discord...")
        discord_notifier = create_discord_notifier(discord_webhook)
        
        notification_sent = discord_notifier.notify_shot_upload_complete(
            shot_nomenclature="UNDLM_TEST",
            scene_name="TEST SCENE",
            version="v001",
            frameio_link="https://app.frame.io/workspace/test/asset/test",
            mention_user_id=assigned_user.get('discord_id') if assigned_user else None
        )
        
        if notification_sent:
            logger.info("‚úÖ Notification Discord envoy√©e")
        else:
            logger.warning("‚ö†Ô∏è Notification Discord non envoy√©e")
        
        # 4. Test simulation d'upload complet (sans fichier r√©el)
        logger.info("üé¨ Test simulation upload complet...")
        
        # Cr√©er un fichier de test temporaire
        test_file = Path("/tmp/test_upload.mp4")
        test_file.write_text("test content")
        
        try:
            # Simuler un upload (va √©chouer mais tester la logique)
            success = await integration.process_shot_upload(
                shot_id="UNDLM_TEST",
                file_path=str(test_file),
                scene_name="TEST SCENE"
            )
            
            if success:
                logger.info("‚úÖ Upload simul√© r√©ussi")
            else:
                logger.info("‚ÑπÔ∏è Upload simul√© √©chou√© (normal avec fichier test)")
                
        except Exception as e:
            logger.info(f"‚ÑπÔ∏è Upload simul√© √©chou√©: {e} (normal)")
        
        finally:
            # Nettoyer
            if test_file.exists():
                test_file.unlink()
        
        logger.info("üéâ Test int√©gration compl√®te termin√©")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test int√©gration: {e}")


async def test_discord_notifier():
    """Test sp√©cifique du notificateur Discord."""
    
    try:
        logger.info("üì¢ Test notificateur Discord")
        
        discord_webhook = os.getenv('DISCORD_WEBHOOK_URL', 'https://discord.com/api/webhooks/YOUR-WEBHOOK-URL')
        
        if 'YOUR-WEBHOOK-URL' in discord_webhook:
            logger.warning("‚ö†Ô∏è Webhook Discord non configur√©, skip du test")
            return
        
        notifier = create_discord_notifier(discord_webhook)
        
        # Test message simple
        success = notifier.send_message("üß™ Test message depuis PostFlow Integration")
        
        if success:
            logger.info("‚úÖ Message Discord envoy√©")
        else:
            logger.warning("‚ö†Ô∏è Message Discord non envoy√©")
        
        # Test notification compl√®te
        success = notifier.notify_shot_upload_complete(
            shot_nomenclature="UNDLM_TEST",
            scene_name="TEST INTEGRATION",
            version="v001",
            frameio_link="https://app.frame.io/workspace/test/asset/test",
            mention_user_id=None  # Pas de mention pour le test
        )
        
        if success:
            logger.info("‚úÖ Notification upload Discord envoy√©e")
        else:
            logger.warning("‚ö†Ô∏è Notification upload Discord non envoy√©e")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test Discord: {e}")


async def test_sheets_connection():
    """Test sp√©cifique de la connexion Google Sheets."""
    
    try:
        logger.info("üìä Test connexion Google Sheets")
        
        credentials_file = os.getenv('GOOGLE_SHEETS_CREDENTIALS', 'config/google_sheets_credentials.json')
        spreadsheet_id = os.getenv('GOOGLE_SHEETS_ID', 'your-spreadsheet-id')
        
        if not Path(credentials_file).exists():
            logger.warning("‚ö†Ô∏è Fichier credentials Google Sheets non trouv√©, skip du test")
            return
        
        if spreadsheet_id == 'your-spreadsheet-id':
            logger.warning("‚ö†Ô∏è ID Google Sheets non configur√©, skip du test")
            return
        
        # Configuration
        config = GoogleSheetsConfig(
            credentials_file=credentials_file,
            spreadsheet_id=spreadsheet_id,
            worksheet_name="Shot Tracking"
        )
        
        # Test connexion
        auth = GoogleSheetsAuth(config)
        
        if auth.connect():
            logger.info("‚úÖ Connexion Google Sheets r√©ussie")
            
            # Test r√©cup√©ration worksheet
            worksheet = auth.get_worksheet("Shot Tracking")
            if worksheet:
                logger.info("‚úÖ Worksheet 'Shot Tracking' trouv√©e")
            else:
                logger.warning("‚ö†Ô∏è Worksheet 'Shot Tracking' non trouv√©e")
                
        else:
            logger.warning("‚ö†Ô∏è Connexion Google Sheets √©chou√©e")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test Google Sheets: {e}")


async def main():
    """Fonction principale de test."""
    
    logger.info("üîß D√©marrage des tests d'int√©gration PostFlow")
    
    # Test 1: Discord
    await test_discord_notifier()
    
    # Test 2: Google Sheets
    await test_sheets_connection()
    
    # Test 3: Int√©gration compl√®te
    await test_complete_integration()
    
    logger.info("üéØ Tests termin√©s")


if __name__ == "__main__":
    asyncio.run(main())
