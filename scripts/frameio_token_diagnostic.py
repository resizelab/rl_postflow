#!/usr/bin/env python3
"""
Diagnostic avanc√© du token Adobe IMS pour Frame.io
"""

import json
import requests
from pathlib import Path

def load_current_token():
    """Charger le token actuel"""
    config_file = Path(__file__).parent.parent / "config" / "integrations.json"
    
    with open(config_file, 'r') as f:
        config = json.load(f)
    
    return config['frameio']['api_token']

def test_adobe_token_info(access_token):
    """Tester les informations du token Adobe IMS"""
    print("üîç DIAGNOSTIC TOKEN ADOBE IMS")
    print("=" * 40)
    
    # Test 1: Informations utilisateur Adobe
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    # Endpoint Adobe IMS pour les infos utilisateur
    adobe_url = "https://ims-na1.adobelogin.com/ims/userinfo/v2"
    
    try:
        print("üìä Test Adobe IMS /userinfo...")
        response = requests.get(adobe_url, headers=headers, timeout=10)
        print(f"   Statut: {response.status_code}")
        
        if response.status_code == 200:
            user_info = response.json()
            print("   ‚úÖ Token Adobe valide")
            print(f"   Utilisateur: {user_info.get('name', 'N/A')}")
            print(f"   Email: {user_info.get('email', 'N/A')}")
        else:
            print(f"   ‚ùå Erreur Adobe: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Exception Adobe: {e}")
    
    print()

def test_frameio_endpoints(access_token):
    """Tester diff√©rents endpoints Frame.io"""
    print("üé¨ DIAGNOSTIC FRAME.IO API")
    print("=" * 40)
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    # Focus sur Frame.io V4 API (selon documentation officielle)
    endpoints = [
        ("Frame.io V4 /me", "https://api.frame.io/v4/me"),
        ("Frame.io V4 /accounts", "https://api.frame.io/v4/accounts"),
        ("Frame.io V4 /teams", "https://api.frame.io/v4/teams"),
        # Tests v2 pour comparaison (devraient √©chouer)
        ("Frame.io V2 /me (legacy)", "https://api.frame.io/v2/me"),
    ]
    
    for name, url in endpoints:
        try:
            print(f"üìä Test {name}...")
            response = requests.get(url, headers=headers, timeout=10)
            print(f"   Statut: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Succ√®s")
                if 'name' in data:
                    print(f"   Utilisateur: {data.get('name', 'N/A')}")
                    print(f"   Email: {data.get('email', 'N/A')}")
                elif isinstance(data, list) and len(data) > 0:
                    print(f"   √âl√©ments trouv√©s: {len(data)}")
                    if data[0].get('name'):
                        print(f"   Premier √©l√©ment: {data[0].get('name', 'N/A')}")
                else:
                    print(f"   R√©ponse: {str(data)[:100]}...")
            elif response.status_code == 401:
                print(f"   ‚ùå Non autoris√© (token sans scopes Frame.io)")
            elif response.status_code == 403:
                print(f"   ‚ùå Interdit (permissions insuffisantes)")
            elif response.status_code == 404:
                print(f"   ‚ùå Endpoint non trouv√©")
            else:
                print(f"   ‚ùå Erreur {response.status_code}: {response.text[:100]}...")
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
        
        print()

def analyze_token_scopes(access_token):
    """Analyser les scopes du token (d√©codage basique du JWT)"""
    print("üîê ANALYSE DU TOKEN")
    print("=" * 40)
    
    try:
        # Le token est un JWT, on peut d√©coder la partie payload (base64)
        import base64
        
        parts = access_token.split('.')
        if len(parts) >= 2:
            # Ajouter le padding n√©cessaire
            payload = parts[1]
            payload += '=' * (4 - len(payload) % 4)
            
            decoded = base64.b64decode(payload)
            token_data = json.loads(decoded)
            
            print(f"Client ID: {token_data.get('client_id', 'N/A')}")
            print(f"User ID: {token_data.get('user_id', 'N/A')}")
            print(f"Scopes: {token_data.get('scope', 'N/A')}")
            print(f"Expires: {token_data.get('expires_in', 'N/A')} secondes")
            print(f"Cr√©√©: {token_data.get('created_at', 'N/A')}")
            print(f"Type: {token_data.get('type', 'N/A')}")
            
            # V√©rifier les scopes Adobe (qui donnent acc√®s √† Frame.io)
            scopes = token_data.get('scope', '')
            if 'AdobeID' in scopes:
                print("‚úÖ Scope AdobeID d√©tect√© (acc√®s aux services Adobe)")
                if 'offline_access' in scopes:
                    print("‚úÖ Scope offline_access d√©tect√© (refresh token)")
            else:
                print("‚ùå Scope AdobeID manquant")
                print("   Ce scope est requis pour acc√©der aux services Adobe/Frame.io")
            
    except Exception as e:
        print(f"‚ùå Impossible de d√©coder le token: {e}")
    
    print()

def check_token_permissions(access_token):
    """V√©rifier les permissions sp√©cifiques du token"""
    print("üîí V√âRIFICATION PERMISSIONS")
    print("=" * 40)
    
    try:
        import base64
        parts = access_token.split('.')
        if len(parts) >= 2:
            payload = parts[1]
            payload += '=' * (4 - len(payload) % 4)
            decoded = base64.b64decode(payload)
            token_data = json.loads(decoded)
            
            scopes = token_data.get('scope', '').split(',')
            
            print("üìã Scopes pr√©sents:")
            for scope in scopes:
                scope = scope.strip()
                if scope:
                    if scope == 'AdobeID':
                        print(f"   ‚úÖ {scope} (Acc√®s services Adobe/Frame.io)")
                    elif scope in ['openid', 'email', 'profile', 'offline_access']:
                        print(f"   ‚úÖ {scope} (Standard)")
                    else:
                        print(f"   ‚ÑπÔ∏è {scope}")
            
            # V√©rification des scopes Adobe requis
            required_adobe_scopes = ['AdobeID', 'openid']
            missing_scopes = [s for s in required_adobe_scopes if s not in scopes]
            
            if missing_scopes:
                print(f"\n‚ö†Ô∏è Scopes Adobe manquants: {missing_scopes}")
                print("   ‚Üí AdobeID est requis pour acc√©der √† Frame.io")
            else:
                print("\n‚úÖ Tous les scopes Adobe requis sont pr√©sents")
                print("   Le token devrait avoir acc√®s √† Frame.io")
                
    except Exception as e:
        print(f"‚ùå Erreur analyse permissions: {e}")
    
    print()

def main():
    print("üß™ DIAGNOSTIC COMPLET ADOBE IMS + FRAME.IO")
    print("=" * 50)
    print()
    
    # Charger le token
    try:
        access_token = load_current_token()
        print(f"Token charg√©: {access_token[:30]}...{access_token[-20:]}")
        print()
    except Exception as e:
        print(f"‚ùå Erreur chargement token: {e}")
        return
    
    # Tests
    analyze_token_scopes(access_token)
    check_token_permissions(access_token)
    test_adobe_token_info(access_token)
    test_frameio_endpoints(access_token)
    
    print("üéØ CONCLUSION")
    print("=" * 40)
    print("Si Adobe IMS fonctionne mais pas Frame.io, cela peut indiquer:")
    print("1. Le token Adobe n'a pas acc√®s √† Frame.io")
    print("2. L'int√©gration Frame.io n'est pas correctement configur√©e")
    print("3. Le compte Adobe n'est pas li√© √† Frame.io")
    print("4. Les scopes demand√©s ne sont pas suffisants")

if __name__ == "__main__":
    main()
