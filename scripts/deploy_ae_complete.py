#!/usr/bin/env python3
"""
D√©ployeur Complet After Effects 2025 pour RL PostFlow
Combine cr√©ation d'arborescence + ex√©cution scripts + validation
"""

import json
import os
import sys
import shutil
import time
from pathlib import Path
import argparse

# Ajouter src au path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

class CompleteAEDeployer:
    """D√©ployeur complet pour After Effects 2025."""
    
    def __init__(self):
        self.sequences_path = Path("/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/SEQUENCES")
        self.template_path = Path("/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/_TEMPLATES/SQXX/_EB/UNDLM_00XXX")
        self.config_path = Path(__file__).parent.parent / "config" / "after_effects_mapping_gsheets.json"
        self.ae_scripts_path = Path(__file__).parent.parent / "ae_scripts"  # Dossier local
        
    def load_sequence_data(self):
        """Charge les donn√©es de mapping des s√©quences."""
        if not self.config_path.exists():
            raise FileNotFoundError(f"Configuration non trouv√©e : {self.config_path}")
            
        with open(self.config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def create_sequence_folder(self, sequence_id, seq_info):
        """
        Cr√©e l'arborescence compl√®te pour une s√©quence avec template.
        
        Structure cr√©√©e:
        SEQUENCES/SQxx/
        ‚îú‚îÄ‚îÄ _AE/                    # Projets After Effects
        ‚îú‚îÄ‚îÄ _PS/                    # Dossier Photoshop (nouveau)
        ‚îî‚îÄ‚îÄ _EB/                    # Plans individuels
            ‚îú‚îÄ‚îÄ UNDLM_00001/        # Nom complet du plan
            ‚îÇ   ‚îî‚îÄ‚îÄ [arborescence template copi√©e]
            ‚îÇ   ‚îî‚îÄ‚îÄ EB_UNDLM_00001.psd (renomm√©)
            ‚îú‚îÄ‚îÄ UNDLM_00002/
            ‚îî‚îÄ‚îÄ ...
        """
        
        seq_path = self.sequences_path / sequence_id
        
        try:
            # Cr√©er dossiers principaux
            ae_folder = seq_path / "_AE"
            ps_folder = seq_path / "_PS"  # Nouveau dossier _PS
            eb_folder = seq_path / "_EB"
            
            ae_folder.mkdir(parents=True, exist_ok=True)
            ps_folder.mkdir(parents=True, exist_ok=True)  # Cr√©er _PS
            eb_folder.mkdir(parents=True, exist_ok=True)
            
            print(f"   üìÅ Dossiers principaux cr√©√©s : _AE, _PS, _EB")
            
            # V√©rifier que le template existe
            if not self.template_path.exists():
                print(f"   ‚ùå Template manquant : {self.template_path}")
                return False
            
            # Cr√©er dossiers plans individuels avec template
            plan_numbers = seq_info['plans']
            created_count = 0
            
            for plan_num in plan_numbers:
                # Nom complet du plan (ex: UNDLM_00001)
                plan_name = f"UNDLM_{plan_num:05d}"
                plan_folder = eb_folder / plan_name
                
                # Copier l'arborescence du template
                if self.copy_template_structure(plan_folder, plan_name):
                    created_count += 1
                else:
                    print(f"   ‚ö†Ô∏è  √âchec copie template pour {plan_name}")
            
            print(f"   ‚úÖ Plans cr√©√©s : {created_count}/{len(plan_numbers)} avec template")
            return created_count == len(plan_numbers)
            
        except Exception as e:
            print(f"   ‚ùå Erreur cr√©ation arborescence : {e}")
            return False
    
    def copy_template_structure(self, plan_folder, plan_name):
        """
        Copie l'arborescence du template vers le dossier plan et renomme le PSD.
        
        Args:
            plan_folder (Path): Dossier destination (ex: /SEQUENCES/SQ01/_EB/UNDLM_00001)
            plan_name (str): Nom du plan (ex: UNDLM_00001)
        """
        
        try:
            # Copier tout le contenu du template
            if plan_folder.exists():
                shutil.rmtree(plan_folder)  # Nettoyer si existe d√©j√†
            
            shutil.copytree(self.template_path, plan_folder)
            
            # Trouver et renommer le fichier PSD template
            template_psd = plan_folder / "EB_UNDLM_00XXX.psd"
            target_psd = plan_folder / f"EB_{plan_name}.psd"
            
            if template_psd.exists():
                template_psd.rename(target_psd)
                # print(f"      üìÑ PSD renomm√© : EB_{plan_name}.psd")
            else:
                print(f"      ‚ö†Ô∏è  PSD template manquant dans {plan_name}")
            
            return True
            
        except Exception as e:
            print(f"      ‚ùå Erreur copie template {plan_name} : {e}")
            return False
    
    def copy_script_to_ae_folder(self, sequence_id):
        """Copie le script ExtendScript dans notre dossier ae_scripts pour acc√®s facile."""
        
        # Script source
        source_script = self.sequences_path / sequence_id / "_AE" / f"{sequence_id}_generation_script.jsx"
        
        if not source_script.exists():
            print(f"   ‚ùå Script source manquant : {source_script}")
            return False
        
        # Cr√©er dossier ae_scripts si n√©cessaire
        self.ae_scripts_path.mkdir(exist_ok=True)
        
        # Destination dans notre dossier ae_scripts
        dest_script = self.ae_scripts_path / f"RL_PostFlow_{sequence_id}_GENERATION.jsx"
        
        try:
            shutil.copy2(source_script, dest_script)
            print(f"   üìã Script copi√© : {dest_script.name}")
            return True
        except Exception as e:
            print(f"   ‚ùå Erreur copie script : {e}")
            return False
    
    def validate_project_output(self, sequence_id):
        """Valide que le projet .aep a √©t√© cr√©√©."""
        
        aep_file = self.sequences_path / sequence_id / "_AE" / f"{sequence_id}_01.aep"
        
        if aep_file.exists():
            size_mb = aep_file.stat().st_size / (1024 * 1024)
            print(f"   ‚úÖ Projet valid√© : {aep_file.name} ({size_mb:.1f} MB)")
            return True
        else:
            print(f"   ‚ö†Ô∏è  Projet manquant : {aep_file.name}")
            return False
    
    def deploy_validation_sequences(self):
        """
        D√©ploie compl√®tement les 3 s√©quences de validation :
        1. Cr√©e l'arborescence de dossiers
        2. Copie les scripts vers AE Scripts pour ex√©cution manuelle
        3. Fournit instructions pour l'√©quipe
        """
        
        validation_sequences = ['SQ01', 'SQ02', 'SQ03']
        
        print("üöÄ D√âPLOIEMENT COMPLET AFTER EFFECTS 2025 - VALIDATION")
        print("=" * 60)
        
        try:
            data = self.load_sequence_data()
        except Exception as e:
            print(f"‚ùå Erreur chargement donn√©es : {e}")
            return {}
        
        results = {}
        
        for seq_id in validation_sequences:
            if seq_id not in data['sequences']:
                print(f"\n‚ùå {seq_id} : S√©quence inconnue")
                results[seq_id] = False
                continue
                
            seq_info = data['sequences'][seq_id]
            print(f"\nüìÅ D√©ploiement de {seq_id} ({seq_info['name']})...")
            print(f"   üìã Plans : {seq_info['plan_count']} ({seq_info['duration_minutes']:.1f}min)")
            
            # 1. Cr√©er arborescence
            if not self.create_sequence_folder(seq_id, seq_info):
                results[seq_id] = False
                continue
            
            # 2. Copier script vers AE Scripts
            if not self.copy_script_to_ae_folder(seq_id):
                results[seq_id] = False
                continue
            
            # 3. V√©rifier si projet d√©j√† existant
            project_exists = self.validate_project_output(seq_id)
            
            results[seq_id] = True
            print(f"   ‚úÖ {seq_id} pr√™t pour g√©n√©ration AE")
        
        # Rapport final
        success_count = sum(results.values())
        print(f"\nüìä R√âSULTATS D√âPLOIEMENT")
        print(f"   Pr√©paration : {success_count}/3 r√©ussies")
        
        for seq_id, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"   {status} {seq_id}")
        
        if success_count == 3:
            print(f"\nüéâ D√âPLOIEMENT COMPLET - Pr√™t pour g√©n√©ration AE !")
            print(f"\nüìÇ STRUCTURE CR√â√âE :")
            print(f"   {self.sequences_path}/")
            print(f"   ‚îú‚îÄ‚îÄ SQ01/ (_AE, _PS, _EB)")
            print(f"   ‚îÇ   ‚îî‚îÄ‚îÄ _EB/ (34 plans : UNDLM_00001 √† UNDLM_00034)")
            print(f"   ‚îú‚îÄ‚îÄ SQ02/ (_AE, _PS, _EB)")
            print(f"   ‚îÇ   ‚îî‚îÄ‚îÄ _EB/ (39 plans : UNDLM_00035 √† UNDLM_00073)")
            print(f"   ‚îî‚îÄ‚îÄ SQ03/ (_AE, _PS, _EB)")
            print(f"       ‚îî‚îÄ‚îÄ _EB/ (20 plans : UNDLM_00074 √† UNDLM_00093)")
            
            print(f"\nüìã CHAQUE PLAN CONTIENT :")
            print(f"   ‚Ä¢ Arborescence template compl√®te copi√©e")
            print(f"   ‚Ä¢ Fichier PSD renomm√© (ex: EB_UNDLM_00001.psd)")
            print(f"   ‚Ä¢ Structure pr√™te pour workflow animation")
            
            print(f"\nüé¨ SCRIPTS AFTER EFFECTS DISPONIBLES :")
            print(f"   {self.ae_scripts_path}/")
            print(f"   ‚îú‚îÄ‚îÄ RL_PostFlow_SQ01_GENERATION.jsx")
            print(f"   ‚îú‚îÄ‚îÄ RL_PostFlow_SQ02_GENERATION.jsx")
            print(f"   ‚îî‚îÄ‚îÄ RL_PostFlow_SQ03_GENERATION.jsx")
            
            print(f"\nüìã INSTRUCTIONS POUR L'√âQUIPE :")
            print(f"   1. Ouvrir After Effects 2025")
            print(f"   2. Menu : Fichier > Scripts > Ex√©cuter le fichier de script...")
            print(f"   3. Naviguer vers : {self.ae_scripts_path}/")
            print(f"   4. S√©lectionner : RL_PostFlow_SQ01_GENERATION.jsx")
            print(f"   5. Attendre la g√©n√©ration automatique (~2-3min)")
            print(f"   6. V√©rifier le projet SQ01_01.aep cr√©√©")
            print(f"   7. R√©p√©ter pour SQ02 et SQ03")
            
            print(f"\nüéØ VALIDATION ATTENDUE :")
            print(f"   ‚Ä¢ 3 projets .aep g√©n√©r√©s (SQ01_01.aep, SQ02_01.aep, SQ03_01.aep)")
            print(f"   ‚Ä¢ 93 plans import√©s au total (montage + √©talonnage)")
            print(f"   ‚Ä¢ Switch Edit/Graded fonctionnel")
            print(f"   ‚Ä¢ Dur√©e totale : ~7.8 minutes")
            
        else:
            print(f"\n‚ö†Ô∏è  D√âPLOIEMENT PARTIEL - {3-success_count} √©checs")
            print(f"   Action recommand√©e : V√©rifier les erreurs ci-dessus")
        
        return results
    
    def deploy_single_sequence(self, sequence_id):
        """D√©ploie une seule s√©quence."""
        
        print(f"üöÄ D√âPLOIEMENT {sequence_id}")
        print("=" * 40)
        
        try:
            data = self.load_sequence_data()
        except Exception as e:
            print(f"‚ùå Erreur chargement donn√©es : {e}")
            return False
        
        if sequence_id not in data['sequences']:
            print(f"‚ùå S√©quence inconnue : {sequence_id}")
            return False
        
        seq_info = data['sequences'][sequence_id]
        print(f"üìÅ {sequence_id} ({seq_info['name']}) - {seq_info['plan_count']} plans")
        
        # Cr√©er arborescence
        if not self.create_sequence_folder(sequence_id, seq_info):
            return False
        
        # Copier script
        if not self.copy_script_to_ae_folder(sequence_id):
            return False
        
        # Valider
        project_exists = self.validate_project_output(sequence_id)
        
        print(f"\n‚úÖ {sequence_id} pr√™t pour g√©n√©ration AE")
        print(f"   üìÑ Script : {self.ae_scripts_path}/RL_PostFlow_{sequence_id}_GENERATION.jsx")
        print(f"   üéØ Action : AE > Fichier > Scripts > Ex√©cuter le fichier de script...")
        
        return True

def main():
    """Fonction principale."""
    
    parser = argparse.ArgumentParser(description="D√©ployeur complet After Effects 2025 - RL PostFlow")
    parser.add_argument('--validation', action='store_true',
                        help='D√©ployer les 3 s√©quences de validation (SQ01, SQ02, SQ03)')
    parser.add_argument('--sequence', '-s',
                        help='D√©ployer une s√©quence sp√©cifique (ex: SQ01)')
    parser.add_argument('--all', action='store_true',
                        help='D√©ployer toutes les s√©quences disponibles')
    
    args = parser.parse_args()
    
    deployer = CompleteAEDeployer()
    
    try:
        if args.validation:
            # D√©ployer validation (3 s√©quences)
            deployer.deploy_validation_sequences()
            
        elif args.sequence:
            # D√©ployer une s√©quence
            deployer.deploy_single_sequence(args.sequence)
            
        elif args.all:
            # D√©ployer toutes les s√©quences
            data = deployer.load_sequence_data()
            all_sequences = list(data['sequences'].keys())
            
            print(f"üöÄ D√âPLOIEMENT COMPLET - {len(all_sequences)} S√âQUENCES")
            print("=" * 60)
            
            success_count = 0
            for seq_id in all_sequences:
                if deployer.deploy_single_sequence(seq_id):
                    success_count += 1
                print()  # S√©parateur
            
            print(f"üìä D√©ploiement global : {success_count}/{len(all_sequences)} r√©ussies")
            
        else:
            print("‚ùì Sp√©cifiez --validation, --sequence, ou --all")
            print("   Exemples :")
            print("   python scripts/deploy_ae_complete.py --validation")
            print("   python scripts/deploy_ae_complete.py --sequence SQ01")
            print("   python scripts/deploy_ae_complete.py --all")
            
    except Exception as e:
        print(f"‚ùå Erreur : {e}")

if __name__ == "__main__":
    main()
