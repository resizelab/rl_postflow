#!/usr/bin/env python3
"""
Script pour g√©n√©rer les cl√©s priv√©es n√©cessaires √† l'authentification JWT Server-to-Server

[ARCHIV√â] Ce script est obsol√®te : l'int√©gration Frame.io utilise uniquement OAuth Web App v4.
Voir scripts/frameio_oauth_webapp_demo.py
"""

import os
import sys
from pathlib import Path
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend

def generate_private_key(key_size=2048):
    """G√©n√®re une cl√© priv√©e RSA"""
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=key_size,
        backend=default_backend()
    )
    return private_key

def save_private_key(private_key, file_path, passphrase=None):
    """Sauvegarde la cl√© priv√©e dans un fichier"""
    encryption_algorithm = serialization.NoEncryption()
    if passphrase:
        encryption_algorithm = serialization.BestAvailableEncryption(passphrase.encode())
    
    pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=encryption_algorithm
    )
    
    with open(file_path, 'wb') as f:
        f.write(pem)

def save_public_key(private_key, file_path):
    """Sauvegarde la cl√© publique correspondante"""
    public_key = private_key.public_key()
    pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    
    with open(file_path, 'wb') as f:
        f.write(pem)

def main():
    """Fonction principale"""
    print("üîë G√©n√©ration des cl√©s priv√©es pour Adobe IMS Server-to-Server")
    print("=" * 65)
    
    # Cr√©er le dossier config s'il n'existe pas
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    
    # Chemins des fichiers
    private_key_path = config_dir / "private.key"
    public_key_path = config_dir / "public.key"
    
    # V√©rifier si les cl√©s existent d√©j√†
    if private_key_path.exists():
        response = input(f"‚ö†Ô∏è  La cl√© priv√©e existe d√©j√† : {private_key_path}\n"
                        "Voulez-vous la remplacer ? (y/N): ")
        if response.lower() != 'y':
            print("üö´ G√©n√©ration annul√©e")
            return
    
    try:
        # G√©n√©rer la cl√© priv√©e
        print("üîÑ G√©n√©ration de la cl√© priv√©e RSA 2048 bits...")
        private_key = generate_private_key()
        
        # Demander une passphrase (optionnel)
        passphrase = input("üîê Entrez une passphrase pour s√©curiser la cl√© priv√©e (optionnel): ")
        if not passphrase.strip():
            passphrase = None
        
        # Sauvegarder la cl√© priv√©e
        print(f"üíæ Sauvegarde de la cl√© priv√©e dans {private_key_path}")
        save_private_key(private_key, private_key_path, passphrase)
        
        # Sauvegarder la cl√© publique
        print(f"üíæ Sauvegarde de la cl√© publique dans {public_key_path}")
        save_public_key(private_key, public_key_path)
        
        # D√©finir les permissions appropri√©es
        os.chmod(private_key_path, 0o600)  # Lecture seule pour le propri√©taire
        os.chmod(public_key_path, 0o644)   # Lecture pour tous
        
        print("\n‚úÖ Cl√©s g√©n√©r√©es avec succ√®s !")
        print(f"   Cl√© priv√©e : {private_key_path}")
        print(f"   Cl√© publique : {public_key_path}")
        
        # Instructions pour Adobe Developer Console
        print("\nüìã Prochaines √©tapes :")
        print("1. Copiez le contenu de public.key")
        print("2. Dans Adobe Developer Console, collez cette cl√© publique")
        print("3. R√©cup√©rez le Technical Account ID g√©n√©r√©")
        print("4. Mettez √† jour FRAMEIO_TECHNICAL_ACCOUNT_ID dans .env")
        
        # Afficher la cl√© publique
        print("\nüìÑ Contenu de la cl√© publique √† copier :")
        print("-" * 50)
        with open(public_key_path, 'r') as f:
            print(f.read())
        print("-" * 50)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des cl√©s : {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
