"""
Test d'int√©gration avec Discord webhook r√©el
"""

import asyncio
import logging
from pathlib import Path
import os

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ajout du chemin pour les imports
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.integrations.discord.notifier import create_discord_notifier


async def test_discord_webhook():
    """Test du webhook Discord avec le webhook configur√©."""
    logger.info("üì¢ Test Discord webhook r√©el...")
    
    try:
        # R√©cup√©rer le webhook depuis la config
        config_path = Path("config/integrations.json")
        if not config_path.exists():
            logger.warning("‚ö†Ô∏è Fichier config/integrations.json non trouv√©")
            return False
        
        import json
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        discord_config = config.get('discord', {})
        webhook_url = discord_config.get('webhook_url')
        
        if not webhook_url:
            logger.warning("‚ö†Ô∏è Webhook Discord non configur√© dans integrations.json")
            return False
        
        # Cr√©er le notificateur
        notifier = create_discord_notifier(webhook_url)
        
        # Test 1: Message simple
        logger.info("1Ô∏è‚É£ Test message simple...")
        success = notifier.send_message("üß™ Test d'int√©gration PostFlow v0.1.4b - Nouveaux modules")
        if success:
            logger.info("‚úÖ Message simple envoy√©")
        else:
            logger.error("‚ùå √âchec envoi message simple")
            return False
        
        # Test 2: Notification upload avec mention (sans mention r√©elle)
        logger.info("2Ô∏è‚É£ Test notification upload...")
        success = notifier.notify_shot_upload_complete(
            shot_nomenclature="UNDLM_TEST",
            scene_name="TEST INTEGRATION",
            version="v001",
            frameio_link="https://app.frame.io/workspace/test/asset/test-integration",
            mention_user_id=None  # Pas de mention pour √©viter de spammer
        )
        if success:
            logger.info("‚úÖ Notification upload envoy√©e")
        else:
            logger.error("‚ùå √âchec notification upload")
            return False
        
        # Test 3: Notification avec mention simul√©e
        logger.info("3Ô∏è‚É£ Test notification avec mention simul√©e...")
        success = notifier.notify_shot_status_change(
            shot_nomenclature="UNDLM_TEST",
            previous_status="ae_in_progress",
            current_status="ae_completed",
            stage="after_effects",
            frameio_link="https://app.frame.io/workspace/test/asset/test-integration",
            mention_user_id="123456789012345",  # ID Discord fictif
            notes="Test d'int√©gration des nouveaux modules"
        )
        if success:
            logger.info("‚úÖ Notification avec mention envoy√©e")
        else:
            logger.error("‚ùå √âchec notification avec mention")
            return False
        
        # Test 4: Notification d'erreur
        logger.info("4Ô∏è‚É£ Test notification d'erreur...")
        success = notifier.notify_error(
            shot_nomenclature="UNDLM_TEST",
            stage="upload",
            error_message="Test d'erreur pour validation de l'int√©gration",
            mention_user_id=None
        )
        if success:
            logger.info("‚úÖ Notification d'erreur envoy√©e")
        else:
            logger.error("‚ùå √âchec notification d'erreur")
            return False
        
        logger.info("‚úÖ Tous les tests Discord webhook r√©ussis")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test Discord webhook: {e}")
        return False


async def test_frameio_links():
    """Test des liens Frame.io sans upload r√©el."""
    logger.info("üé¨ Test g√©n√©ration liens Frame.io...")
    
    try:
        from src.integrations.frameio.upload import FrameIOUploadManager
        from src.integrations.frameio.auth import FrameIOAuth
        
        # Cr√©er les instances
        auth = FrameIOAuth()
        upload_manager = FrameIOUploadManager(auth)
        
        # Simuler la g√©n√©ration de liens
        test_file_id = "test-file-id"
        test_workspace_id = upload_manager.workspace_id
        
        # Test g√©n√©ration lien review
        expected_review_url = f"https://app.frame.io/workspace/{test_workspace_id}/asset/{test_file_id}"
        logger.info(f"‚úÖ Lien review g√©n√©r√©: {expected_review_url}")
        
        # Test structure compl√®te
        from src.integrations.frameio.upload import FrameIOFile
        test_file = FrameIOFile(
            id=test_file_id,
            name="UNDLM_TEST_v001.mp4",
            size=1024000,
            status="completed",
            folder_id="test-folder",
            project_id="test-project",
            workspace_id=test_workspace_id,
            account_id=upload_manager.account_id,
            review_url=expected_review_url,
            share_url=f"https://share.frame.io/{test_file_id}"
        )
        
        logger.info(f"‚úÖ FrameIOFile avec liens: {test_file.name}")
        logger.info(f"   - Review: {test_file.review_url}")
        logger.info(f"   - Share: {test_file.share_url}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test Frame.io: {e}")
        return False


async def test_complete_workflow():
    """Test du workflow complet avec Discord."""
    logger.info("üîÑ Test workflow complet...")
    
    try:
        # R√©cup√©rer config Discord
        config_path = Path("config/integrations.json")
        if not config_path.exists():
            logger.warning("‚ö†Ô∏è Pas de config Discord, skip du test")
            return True
        
        import json
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        discord_config = config.get('discord', {})
        webhook_url = discord_config.get('webhook_url')
        
        if not webhook_url:
            logger.warning("‚ö†Ô∏è Webhook Discord non configur√©, skip du test")
            return True
        
        # Simuler le workflow complet
        shot_id = "UNDLM_TEST_WORKFLOW"
        scene_name = "TEST WORKFLOW COMPLETE"
        version = "v001"
        
        # 1. Simuler upload Frame.io
        from src.integrations.frameio.upload import FrameIOFile
        frameio_file = FrameIOFile(
            id="workflow-test-id",
            name=f"{shot_id}_{version}.mp4",
            size=2048000,
            status="completed",
            folder_id="test-folder",
            project_id="test-project",
            workspace_id="test-workspace",
            account_id="test-account",
            review_url=f"https://app.frame.io/workspace/test-workspace/asset/workflow-test-id",
            share_url=f"https://share.frame.io/workflow-test-id"
        )
        logger.info(f"‚úÖ 1. Upload Frame.io simul√©: {frameio_file.name}")
        
        # 2. Simuler r√©cup√©ration utilisateur
        from src.integrations.sheets.users import User
        assigned_user = User(
            name="Supervisor Test",
            discord_id="987654321098765",
            email="supervisor@test.com",
            role="Supervisor"
        )
        logger.info(f"‚úÖ 2. Utilisateur assign√©: {assigned_user.name}")
        
        # 3. Envoyer notification Discord
        notifier = create_discord_notifier(webhook_url)
        success = notifier.notify_shot_upload_complete(
            shot_nomenclature=shot_id,
            scene_name=scene_name,
            version=version,
            frameio_link=frameio_file.review_url,
            mention_user_id=assigned_user.discord_id
        )
        
        if success:
            logger.info("‚úÖ 3. Notification Discord envoy√©e")
        else:
            logger.error("‚ùå 3. √âchec notification Discord")
            return False
        
        # 4. Simuler mise √† jour Google Sheets
        sheets_data = {
            "shot_id": shot_id,
            "frameio_link": frameio_file.review_url,
            "status": "review_uploaded",
            "assigned_to": assigned_user.name,
            "last_updated": "2025-07-08 14:30:00"
        }
        logger.info(f"‚úÖ 4. Donn√©es Google Sheets: {sheets_data}")
        
        # 5. Notification de changement de statut
        success = notifier.notify_shot_status_change(
            shot_nomenclature=shot_id,
            previous_status="ae_completed",
            current_status="review_uploaded",
            stage="review_process",
            frameio_link=frameio_file.review_url,
            mention_user_id=assigned_user.discord_id,
            notes="Workflow complet test√© avec succ√®s"
        )
        
        if success:
            logger.info("‚úÖ 5. Notification changement statut envoy√©e")
        else:
            logger.error("‚ùå 5. √âchec notification changement statut")
            return False
        
        logger.info("üéâ Workflow complet test√© avec succ√®s!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur workflow complet: {e}")
        return False


async def main():
    """Test principal avec int√©grations r√©elles."""
    logger.info("üöÄ Test int√©gration PostFlow v0.1.4b avec services r√©els")
    
    tests = [
        ("Discord Webhook", test_discord_webhook),
        ("Frame.io Links", test_frameio_links),
        ("Workflow Complet", test_complete_workflow)
    ]
    
    results = []
    for name, test_func in tests:
        logger.info(f"\n--- Test: {name} ---")
        success = await test_func()
        results.append((name, success))
        logger.info(f"{'‚úÖ' if success else '‚ùå'} {name}: {'PASS' if success else 'FAIL'}")
    
    # R√©sum√©
    logger.info("\nüéØ R√©sum√© des tests d'int√©gration:")
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for name, success in results:
        logger.info(f"  {'‚úÖ' if success else '‚ùå'} {name}")
    
    logger.info(f"\nüìä Tests: {passed}/{total} r√©ussis")
    
    if passed == total:
        logger.info("üéâ L'int√©gration PostFlow v0.1.4b est fonctionnelle !")
        logger.info("üîó Les nouveaux modules (Frame.io + Discord + Google Sheets) sont op√©rationnels")
    else:
        logger.warning("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")


if __name__ == "__main__":
    asyncio.run(main())
