#!/usr/bin/env python3
"""
Ex√©cuteur After Effects pour RL PostFlow
Ex√©cute les scripts ExtendScript pour g√©n√©rer les projets .aep
"""

import json
import os
import sys
import subprocess
import time
from pathlib import Path
import argparse

# Ajouter src au path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

class AfterEffectsExecutor:
    """Ex√©cuteur de scripts ExtendScript dans After Effects."""
    
    def __init__(self):
        self.base_path = Path("/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/SEQUENCES")
        self.config_path = Path(__file__).parent.parent / "config" / "after_effects_mapping_gsheets.json"
        
        # Chemins After Effects possibles (ex√©cutable principal pour scripts)
        self.ae_paths = [
            "/Applications/Adobe After Effects 2025/Adobe After Effects 2025.app/Contents/MacOS/After Effects",
            "/Applications/Adobe After Effects 2024/Adobe After Effects 2024.app/Contents/MacOS/After Effects",
            "/Applications/Adobe After Effects 2023/Adobe After Effects 2023.app/Contents/MacOS/After Effects",
            "/Applications/Adobe After Effects CC 2019/Adobe After Effects CC 2019.app/Contents/MacOS/After Effects",
            "/Applications/Adobe After Effects CC 2018/Adobe After Effects CC 2018.app/Contents/MacOS/After Effects"
        ]
        
        self.ae_executable = self.find_after_effects()
    
    def find_after_effects(self):
        """Trouve l'ex√©cutable After Effects install√©."""
        for ae_path in self.ae_paths:
            if Path(ae_path).exists():
                print(f"‚úÖ After Effects trouv√© : {ae_path}")
                return ae_path
        
        raise FileNotFoundError("‚ùå After Effects non trouv√©. Chemins test√©s:\n" + 
                               "\n".join(f"  - {path}" for path in self.ae_paths))
    
    def load_sequence_data(self):
        """Charge les donn√©es de mapping des s√©quences."""
        if not self.config_path.exists():
            raise FileNotFoundError(f"Configuration non trouv√©e : {self.config_path}")
            
        with open(self.config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def execute_ae_script(self, script_file, sequence_id, timeout=300):
        """
        Ex√©cute un script ExtendScript dans After Effects via ligne de commande.
        
        Args:
            script_file (Path): Chemin vers le script .jsx
            sequence_id (str): ID de la s√©quence (ex: SQ01)
            timeout (int): Timeout en secondes (default: 5min)
        
        Returns:
            bool: True si succ√®s, False sinon
        """
        
        if not script_file.exists():
            print(f"   ‚ùå Script manquant : {script_file}")
            return False
        
        # Commande pour ex√©cuter le script
        # Note: Lancer AE avec le script en param√®tre
        cmd = [
            self.ae_executable,
            "-r", str(script_file)  # -r pour run script
        ]
        
        try:
            print(f"   üé¨ Ex√©cution AE pour {sequence_id}...")
            print(f"      üìÑ Script : {script_file.name}")
            
            start_time = time.time()
            
            # Ex√©cuter avec timeout
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                timeout=timeout,
                cwd=script_file.parent  # Ex√©cuter depuis le dossier du script
            )
            
            duration = time.time() - start_time
            
            if result.returncode == 0:
                print(f"   ‚úÖ {sequence_id} : Projet AE cr√©√© avec succ√®s ({duration:.1f}s)")
                if result.stdout:
                    print(f"      üí¨ Sortie AE : {result.stdout.strip()}")
                return True
            else:
                print(f"   ‚ùå {sequence_id} : Erreur AE (code {result.returncode})")
                if result.stderr:
                    print(f"      ‚ö†Ô∏è  Erreur : {result.stderr.strip()}")
                if result.stdout:
                    print(f"      üí¨ Sortie : {result.stdout.strip()}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"   ‚è∞ {sequence_id} : Timeout apr√®s {timeout}s")
            return False
        except Exception as e:
            print(f"   ‚ùå {sequence_id} : Exception - {e}")
            return False
    
    def execute_validation_sequences(self):
        """Ex√©cute la g√©n√©ration AE pour les 3 s√©quences de validation."""
        
        validation_sequences = ['SQ01', 'SQ02', 'SQ03']
        results = {}
        
        print("üé¨ EX√âCUTION AFTER EFFECTS - MODE VALIDATION")
        print("=" * 50)
        print(f"üéØ S√©quences : {', '.join(validation_sequences)}")
        print(f"‚öôÔ∏è  AE : {self.ae_executable}")
        print()
        
        for seq_id in validation_sequences:
            print(f"üìÅ Traitement de {seq_id}...")
            
            # V√©rifier arborescence
            seq_path = self.base_path / seq_id
            ae_path = seq_path / "_AE"
            
            if not seq_path.exists():
                print(f"   ‚ùå Dossier s√©quence manquant : {seq_path}")
                results[seq_id] = False
                continue
                
            if not ae_path.exists():
                print(f"   ‚ùå Dossier _AE manquant : {ae_path}")
                results[seq_id] = False
                continue
            
            # Chercher le script ExtendScript
            script_file = ae_path / f"{seq_id}_generation_script.jsx"
            
            if not script_file.exists():
                # Essayer autre nom possible
                alt_script = ae_path / f"{seq_id}_script.jsx"
                if alt_script.exists():
                    script_file = alt_script
                else:
                    print(f"   ‚ùå Script ExtendScript manquant : {script_file}")
                    results[seq_id] = False
                    continue
            
            # Ex√©cuter le script
            success = self.execute_ae_script(script_file, seq_id)
            results[seq_id] = success
            
            if success:
                # V√©rifier que le projet .aep a √©t√© cr√©√©
                aep_file = ae_path / f"{seq_id}_01.aep"
                if aep_file.exists():
                    file_size = aep_file.stat().st_size / 1024  # KB
                    print(f"   üéâ Projet g√©n√©r√© : {aep_file.name} ({file_size:.1f} KB)")
                else:
                    print(f"   ‚ö†Ô∏è  Script ex√©cut√© mais projet .aep manquant")
            
            print()  # Ligne vide entre s√©quences
        
        # Rapport final
        success_count = sum(results.values())
        print(f"üìä R√âSULTATS EX√âCUTION AFTER EFFECTS")
        print(f"   R√©ussites : {success_count}/3")
        
        for seq_id, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            aep_path = self.base_path / seq_id / "_AE" / f"{seq_id}_01.aep"
            size_info = ""
            if success and aep_path.exists():
                file_size = aep_path.stat().st_size / 1024
                size_info = f" ({file_size:.1f} KB)"
            print(f"   {status} {seq_id} ‚Üí {aep_path.name}{size_info}")
        
        if success_count == 3:
            print(f"\nüéâ VALIDATION COMPL√àTE - Tous les projets AE g√©n√©r√©s !")
            print(f"   üìÇ Dossier : {self.base_path}")
            print(f"   üé¨ Projets : SQ01_01.aep, SQ02_01.aep, SQ03_01.aep")
            
            # Calculer statistiques
            data = self.load_sequence_data()
            total_plans = sum(data['sequences'][seq]['plan_count'] for seq in validation_sequences if seq in data['sequences'])
            total_duration = sum(data['sequences'][seq]['duration_minutes'] for seq in validation_sequences if seq in data['sequences'])
            
            print(f"   üìã Plans total : {total_plans}")
            print(f"   ‚è±Ô∏è  Dur√©e totale : {total_duration:.1f} minutes")
            
        else:
            print(f"\n‚ö†Ô∏è  VALIDATION PARTIELLE - {3-success_count} √©checs")
            print(f"   üí° Actions recommand√©es :")
            print(f"      1. V√©rifier installation After Effects")
            print(f"      2. Contr√¥ler permissions dossiers")
            print(f"      3. Examiner logs d'erreur AE")
        
        return results
    
    def execute_single_sequence(self, sequence_id):
        """Ex√©cute la g√©n√©ration AE pour une s√©quence sp√©cifique."""
        
        print(f"üé¨ EX√âCUTION AFTER EFFECTS - S√âQUENCE {sequence_id}")
        print("=" * 50)
        
        seq_path = self.base_path / sequence_id
        ae_path = seq_path / "_AE"
        script_file = ae_path / f"{sequence_id}_generation_script.jsx"
        
        # V√©rifications pr√©alables
        if not seq_path.exists():
            print(f"‚ùå Dossier s√©quence manquant : {seq_path}")
            return False
            
        if not script_file.exists():
            print(f"‚ùå Script ExtendScript manquant : {script_file}")
            return False
        
        # Ex√©cution
        success = self.execute_ae_script(script_file, sequence_id)
        
        if success:
            aep_file = ae_path / f"{sequence_id}_01.aep"
            if aep_file.exists():
                file_size = aep_file.stat().st_size / 1024
                print(f"\nüéâ Projet g√©n√©r√© avec succ√®s !")
                print(f"   üìÑ {aep_file} ({file_size:.1f} KB)")
            else:
                print(f"\n‚ö†Ô∏è  Script ex√©cut√© mais projet .aep manquant")
        else:
            print(f"\n‚ùå √âchec de l'ex√©cution")
        
        return success
    
    def test_after_effects(self):
        """Teste l'installation After Effects avec un script simple."""
        
        print("üß™ TEST INSTALLATION AFTER EFFECTS")
        print("=" * 40)
        
        # Cr√©er script de test simple
        test_script_content = """
// Script de test After Effects
alert("Test RL PostFlow - After Effects fonctionne !");

// Cr√©er projet temporaire
app.newProject();
var project = app.project;

// Cr√©er composition test
var testComp = project.items.addComp("Test_RL_PostFlow", 1920, 1080, 1.0, 10, 25);

// Sauvegarder dans temp
var tempFile = new File("/tmp/ae_test_rl_postflow.aep");
project.save(tempFile);

alert("Test termin√© - Projet sauv√© : " + tempFile.fsName);
"""
        
        test_script_path = Path("/tmp/ae_test_rl_postflow.jsx")
        
        try:
            # √âcrire script de test
            with open(test_script_path, 'w') as f:
                f.write(test_script_content)
            
            print(f"üìÑ Script de test cr√©√© : {test_script_path}")
            
            # Ex√©cuter test
            cmd = [self.ae_executable, "-script", str(test_script_path)]
            
            print("üé¨ Ex√©cution du test...")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ After Effects fonctionne correctement !")
                if result.stdout:
                    print(f"üí¨ Sortie : {result.stdout.strip()}")
                
                # V√©rifier fichier test
                test_aep = Path("/tmp/ae_test_rl_postflow.aep")
                if test_aep.exists():
                    print(f"‚úÖ Projet test cr√©√© : {test_aep}")
                    test_aep.unlink()  # Supprimer
                
                return True
            else:
                print(f"‚ùå Erreur test AE (code {result.returncode})")
                if result.stderr:
                    print(f"‚ö†Ô∏è  Erreur : {result.stderr.strip()}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception test : {e}")
            return False
        finally:
            # Nettoyer
            if test_script_path.exists():
                test_script_path.unlink()

def main():
    """Fonction principale."""
    
    parser = argparse.ArgumentParser(description='Ex√©cuteur After Effects pour RL PostFlow')
    parser.add_argument('--validation', '-v', action='store_true', 
                        help='Ex√©cuter g√©n√©ration pour les 3 s√©quences de validation')
    parser.add_argument('--sequence', '-s', help='Ex√©cuter g√©n√©ration pour une s√©quence sp√©cifique')
    parser.add_argument('--test', '-t', action='store_true', help='Tester installation After Effects')
    parser.add_argument('--timeout', type=int, default=300, help='Timeout en secondes (default: 300)')
    
    args = parser.parse_args()
    
    try:
        executor = AfterEffectsExecutor()
        
        if args.test:
            # Mode test
            executor.test_after_effects()
            
        elif args.validation:
            # Mode validation (3 s√©quences)
            executor.execute_validation_sequences()
            
        elif args.sequence:
            # Mode s√©quence unique
            executor.execute_single_sequence(args.sequence)
            
        else:
            print("‚ùì Sp√©cifiez --validation, --sequence ou --test")
            
    except Exception as e:
        print(f"‚ùå Erreur : {e}")

if __name__ == "__main__":
    main()
