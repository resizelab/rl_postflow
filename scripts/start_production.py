#!/usr/bin/env python3
"""
Script de d√©marrage PostFlow v2.0 - Production
Ce script lance le watcher LucidLink et traite les fichiers en temps r√©el
"""
import os
import sys
import asyncio
import signal
import logging
from datetime import datetime
from pathlib import Path

# Ajouter le r√©pertoire parent au chemin Python
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.utils.config import ConfigManager
from src.core.lucidlink_watcher import LucidLinkWatcher
from src.integrations.frameio.upload import FrameIOUploadManager
from src.integrations.discord.notifier import DiscordNotifier
from src.integrations.sheets.tracker import SheetsTracker
from src.utils.thumbnail import ThumbnailGenerator

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/postflow_production.log')
    ]
)
logger = logging.getLogger(__name__)

class PostFlowProduction:
    """Service principal PostFlow pour la production"""
    
    def __init__(self):
        self.config = ConfigManager()
        self.watcher = None
        self.running = False
        self.setup_signal_handlers()
        
        # Initialiser les composants
        self.frameio_manager = FrameIOUploadManager(self.config)
        self.discord_notifier = DiscordNotifier(self.config)
        self.sheets_tracker = SheetsTracker(self.config)
        self.thumbnail_generator = ThumbnailGenerator(self.config)
        
    def setup_signal_handlers(self):
        """Configuration des gestionnaires de signaux"""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
        self.running = False
    
    async def process_file(self, file_path):
        """Traite un fichier d√©tect√© par le watcher"""
        logger.info(f"üé¨ Traitement du fichier: {file_path}")
        
        try:
            file_path = Path(file_path)
            
            # 1. V√©rifier que le fichier existe et est stable
            if not file_path.exists():
                logger.warning(f"‚ö†Ô∏è Fichier introuvable: {file_path}")
                return
            
            file_size = file_path.stat().st_size
            logger.info(f"üìä Taille du fichier: {file_size / 1024 / 1024:.2f} MB")
            
            # 2. G√©n√©rer une miniature si activ√©
            thumbnail_path = None
            if self.config.get('workflow.enable_thumbnails', True):
                try:
                    logger.info("üñºÔ∏è G√©n√©ration de la miniature...")
                    thumbnail_path = await self.thumbnail_generator.generate_thumbnail(file_path)
                    logger.info(f"‚úÖ Miniature g√©n√©r√©e: {thumbnail_path}")
                except Exception as e:
                    logger.error(f"‚ùå Erreur g√©n√©ration miniature: {e}")
            
            # 3. Upload vers Frame.io si activ√©
            frame_io_link = None
            if self.config.get('workflow.enable_frameio_upload', True):
                try:
                    logger.info("üì§ Upload vers Frame.io...")
                    frame_io_link = await self.frameio_manager.upload_file_production(
                        file_path,
                        thumbnail_path=thumbnail_path
                    )
                    logger.info(f"‚úÖ Upload Frame.io termin√©: {frame_io_link}")
                except Exception as e:
                    logger.error(f"‚ùå Erreur upload Frame.io: {e}")
            
            # 4. Notification Discord si activ√©e
            if self.config.get('workflow.enable_discord_notifications', True):
                try:
                    logger.info("üí¨ Envoi notification Discord...")
                    await self.discord_notifier.notify_file_processed(
                        file_path.name,
                        f"Fichier trait√© avec succ√®s - {datetime.now().strftime('%H:%M:%S')}",
                        frame_io_link or "Pas d'upload Frame.io"
                    )
                    logger.info("‚úÖ Notification Discord envoy√©e")
                except Exception as e:
                    logger.error(f"‚ùå Erreur notification Discord: {e}")
            
            # 5. Mise √† jour Google Sheets si activ√©e
            if self.config.get('workflow.enable_sheets_updates', True):
                try:
                    logger.info("üìä Mise √† jour Google Sheets...")
                    await self.sheets_tracker.update_shot_status(
                        file_path.name,
                        "processed",
                        frame_io_link or "N/A"
                    )
                    logger.info("‚úÖ Google Sheets mis √† jour")
                except Exception as e:
                    logger.error(f"‚ùå Erreur mise √† jour Sheets: {e}")
            
            logger.info(f"üéâ Traitement termin√© avec succ√®s: {file_path.name}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du traitement de {file_path}: {e}")
            
            # Notification d'erreur
            try:
                await self.discord_notifier.notify_error(
                    f"Erreur de traitement",
                    f"Erreur lors du traitement de {file_path}: {str(e)}"
                )
            except:
                pass
    
    async def check_prerequisites(self):
        """V√©rifie les pr√©requis avant d√©marrage"""
        logger.info("üîç V√©rification des pr√©requis...")
        
        # V√©rifier le volume LucidLink
        lucidlink_path = self.config.get('lucidlink.watch_directory')
        if not os.path.exists(lucidlink_path):
            logger.error(f"‚ùå Volume LucidLink non mont√©: {lucidlink_path}")
            return False
        
        # V√©rifier les credentials
        sheets_creds = self.config.get('google_sheets.service_account_file')
        if not os.path.exists(sheets_creds):
            logger.error(f"‚ùå Credentials Google Sheets manquants: {sheets_creds}")
            return False
        
        # V√©rifier la configuration Frame.io
        if not self.config.get('frameio.access_token'):
            logger.error("‚ùå Token Frame.io manquant")
            return False
        
        # V√©rifier le webhook Discord
        if not self.config.get('discord.webhook_url'):
            logger.error("‚ùå Webhook Discord manquant")
            return False
        
        logger.info("‚úÖ Tous les pr√©requis sont satisfaits")
        return True
    
    async def start_watcher(self):
        """D√©marre le watcher LucidLink"""
        logger.info("üëÅÔ∏è D√©marrage du watcher LucidLink...")
        
        try:
            self.watcher = LucidLinkWatcher(self.config, self.process_file)
            await self.watcher.start()
            logger.info("‚úÖ Watcher d√©marr√© avec succ√®s")
            
            # Notification de d√©marrage
            await self.discord_notifier.notify_system_status(
                "üöÄ PostFlow v2.0 d√©marr√©",
                "Le syst√®me de surveillance LucidLink est actif"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage watcher: {e}")
            raise
    
    async def run(self):
        """Fonction principale du service"""
        logger.info("üöÄ D√©marrage PostFlow v2.0 - Production")
        logger.info("=" * 50)
        
        # V√©rifier les pr√©requis
        if not await self.check_prerequisites():
            logger.error("‚ùå Pr√©requis non satisfaits, arr√™t du service")
            return False
        
        # D√©marrer le watcher
        await self.start_watcher()
        
        # Boucle principale
        self.running = True
        logger.info("üîÑ Service en cours d'ex√©cution...")
        logger.info("Appuyez sur Ctrl+C pour arr√™ter")
        
        try:
            while self.running:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("‚ö†Ô∏è Interruption clavier d√©tect√©e")
        
        # Arr√™t propre
        logger.info("üõë Arr√™t du service...")
        if self.watcher:
            await self.watcher.stop()
        
        # Notification d'arr√™t
        try:
            await self.discord_notifier.notify_system_status(
                "üõë PostFlow v2.0 arr√™t√©",
                "Le syst√®me de surveillance a √©t√© arr√™t√©"
            )
        except:
            pass
        
        logger.info("‚úÖ Service arr√™t√© proprement")
        return True

async def main():
    """Fonction principale"""
    # Cr√©er les r√©pertoires n√©cessaires
    os.makedirs('logs', exist_ok=True)
    os.makedirs('output/thumbnails', exist_ok=True)
    
    # D√©marrer le service
    service = PostFlowProduction()
    await service.run()

if __name__ == "__main__":
    asyncio.run(main())
