#!/usr/bin/env python3
"""
Script de pr√©paration pour commit v4.3.0
Nettoie, organise et pr√©pare le repository pour le commit/push
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def run_command(cmd, description):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd=".")
        if result.returncode == 0:
            print(f"‚úÖ {description} - OK")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
        else:
            print(f"‚ùå {description} - ERREUR")
            print(f"   {result.stderr.strip()}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå {description} - EXCEPTION: {e}")
        return False

def check_version_consistency():
    """V√©rifie la coh√©rence des versions dans tous les fichiers."""
    print("üîç V√©rification de la coh√©rence des versions...")
    
    # Lire la version depuis pipeline_config.json
    with open("pipeline_config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
        version = config["project_info"]["version"]
        version_name = config["project_info"]["version_name"]
    
    print(f"   Version trouv√©e: {version} - {version_name}")
    
    # V√©rifier README.md
    with open("README.md", "r", encoding="utf-8") as f:
        readme_content = f.read()
        if f"Version-{version}" in readme_content:
            print(f"‚úÖ README.md - Version {version} trouv√©e")
        else:
            print(f"‚ö†Ô∏è README.md - Version {version} NON trouv√©e")
    
    # V√©rifier CHANGELOG.md
    with open("CHANGELOG.md", "r", encoding="utf-8") as f:
        changelog_content = f.read()
        if f"[{version}]" in changelog_content:
            print(f"‚úÖ CHANGELOG.md - Version {version} trouv√©e")
        else:
            print(f"‚ö†Ô∏è CHANGELOG.md - Version {version} NON trouv√©e")
    
    return version, version_name

def prepare_commit():
    """Pr√©pare le repository pour le commit."""
    print("=" * 60)
    print("üöÄ PR√âPARATION COMMIT v4.3.0")
    print("=" * 60)
    
    # 1. V√©rifier la coh√©rence des versions
    version, version_name = check_version_consistency()
    
    # 2. V√©rifier l'√©tat du git
    print("\\nüìä √âtat actuel du repository:")
    run_command("git status --porcelain", "V√©rification git status")
    
    # 3. Ajouter les fichiers importants
    important_files = [
        "README.md",
        "CHANGELOG.md", 
        "COMMIT_MESSAGE_v4.3.0.md",
        "pipeline_config.json",
        "src/integrations/frameio/webhook_manager.py",
        "src/integrations/frameio/share_manager.py",
        "src/utils/auto_hooks.py",
        "scripts/analyze_gsheets_data.py",
        "tools/after_effects_generator_v2/generate_ae_projects_v3.py",
        "config/after_effects_mapping_P02.json",
        "config/after_effects_mapping_P03.json"
    ]
    
    print("\\nüìÅ Ajout des fichiers principaux...")
    for file in important_files:
        if os.path.exists(file):
            run_command(f"git add {file}", f"Ajout {file}")
        else:
            print(f"‚ö†Ô∏è Fichier non trouv√©: {file}")
    
    # 4. Afficher les fichiers stag√©s
    print("\\nüìã Fichiers pr√©par√©s pour commit:")
    run_command("git diff --cached --name-only", "Liste des fichiers stag√©s")
    
    # 5. Pr√©parer le message de commit
    commit_message = f"""üé¨ PostFlow v{version} - {version_name}

‚ú® Nouvelles fonctionnalit√©s:
‚Ä¢ Discord: Correction affichage versions + d√©duplication notifications
‚Ä¢ After Effects: G√©n√©rateur v3 avec support configurations P02/P03  
‚Ä¢ CSV Analysis: Filtrage par priorit√© avec export JSON s√©par√©

üîß Corrections:
‚Ä¢ Fix authentification Frame.io share links (variables environnement)
‚Ä¢ √âlimination doublons notifications Discord (cache intelligent)
‚Ä¢ Gestion configurations s√©par√©es P02/P03 sans √©crasement

üìä Production Ready:
‚Ä¢ P02_ALL: 71 plans configur√©s
‚Ä¢ P03_ALL: 21 plans configur√©s  
‚Ä¢ Workflow After Effects complet valid√©

Version: v{version}
Build: Production Ready
Date: 2025-08-01"""
    
    print("\\nüìù Message de commit pr√©par√©:")
    print("-" * 40)
    print(commit_message)
    print("-" * 40)
    
    # 6. Proposer le commit
    print("\\nüéØ PR√äT POUR COMMIT!")
    print("\\nCommandes sugg√©r√©es:")
    print(f'git commit -m "{commit_message.split()[0]} {commit_message.split()[1]} {commit_message.split()[2]}"')
    print("git push origin main")
    
    return True

if __name__ == "__main__":
    prepare_commit()
