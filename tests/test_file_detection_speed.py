#!/usr/bin/env python3
"""
Test de d√©tection rapide des fichiers avec timeouts optimis√©s
Valide que les fichiers sont d√©tect√©s dans un d√©lai raisonnable apr√®s optimisation
"""

import asyncio
import sys
import logging
import time
import shutil
from pathlib import Path
from datetime import datetime
from typing import List, Optional

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent))

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FileDetectionTest:
    """Test de d√©tection rapide des fichiers"""
    
    def __init__(self):
        self.test_files = []
        self.detected_files = []
        self.detection_times = []
        self.test_dir = Path("/tmp/rl_postflow_test")
        self.test_dir.mkdir(exist_ok=True)
        
    def create_test_file(self, filename: str, size_mb: int = 1) -> Path:
        """Cr√©e un fichier de test avec une taille donn√©e"""
        file_path = self.test_dir / filename
        
        # Cr√©er un fichier de la taille sp√©cifi√©e
        with open(file_path, 'wb') as f:
            # √âcrire des donn√©es al√©atoires
            data = b'0' * (1024 * 1024)  # 1MB de donn√©es
            for _ in range(size_mb):
                f.write(data)
        
        logger.info(f"üìÑ Fichier test cr√©√©: {file_path} ({size_mb}MB)")
        return file_path
    
    def on_file_detected(self, file_path: Path, detection_time: float):
        """Callback appel√© lors de la d√©tection d'un fichier"""
        self.detected_files.append(file_path)
        self.detection_times.append(detection_time)
        logger.info(f"‚úÖ Fichier d√©tect√©: {file_path.name} (temps: {detection_time:.2f}s)")
    
    async def test_watcher_detection_speed(self):
        """Test la vitesse de d√©tection du watcher"""
        logger.info("üîç Test vitesse de d√©tection du watcher...")
        
        try:
            from src.utils.file_watcher import LucidLinkWatcher
            
            # Configuration optimis√©e pour test
            watcher_config = {
                'base_path': str(self.test_dir),
                'polling_interval': 2,  # 2 secondes pour test rapide
                'min_file_age': 5,      # 5 secondes pour test
                'supported_extensions': ['.mov', '.mp4', '.avi'],
                'max_scan_errors': 3,
                'error_backoff': 10,
                'path_check_interval': 60
            }
            
            # Cr√©er le watcher
            watcher = LucidLinkWatcher(watcher_config)
            
            # Ajouter callback pour mesurer le temps de d√©tection
            start_times = {}
            
            def on_detection(file_event):
                file_path = Path(file_event.file_path)
                if str(file_path) in start_times:
                    detection_time = time.time() - start_times[str(file_path)]
                    self.on_file_detected(file_path, detection_time)
            
            watcher.add_callback(on_detection)
            
            # D√©marrer le watcher
            watcher.start()
            
            # Attendre un peu pour que le watcher se stabilise
            await asyncio.sleep(3)
            
            # Cr√©er des fichiers de test
            test_files = [
                "test_video_001.mov",
                "test_video_002.mp4",
                "test_video_003.avi"
            ]
            
            for filename in test_files:
                start_time = time.time()
                file_path = self.create_test_file(filename)
                start_times[str(file_path)] = start_time
                self.test_files.append(file_path)
                
                # Attendre un peu entre les fichiers
                await asyncio.sleep(1)
            
            # Attendre la d√©tection (timeout de 30s)
            max_wait = 30
            start_wait = time.time()
            
            while len(self.detected_files) < len(self.test_files):
                if time.time() - start_wait > max_wait:
                    logger.warning(f"‚è∞ Timeout: {len(self.detected_files)}/{len(self.test_files)} fichiers d√©tect√©s")
                    break
                await asyncio.sleep(0.5)
            
            # Arr√™ter le watcher
            watcher.stop()
            
            # Analyser les r√©sultats
            if self.detection_times:
                avg_time = sum(self.detection_times) / len(self.detection_times)
                max_time = max(self.detection_times)
                min_time = min(self.detection_times)
                
                logger.info(f"üìä R√©sultats d√©tection:")
                logger.info(f"  ‚Ä¢ Fichiers d√©tect√©s: {len(self.detected_files)}/{len(self.test_files)}")
                logger.info(f"  ‚Ä¢ Temps moyen: {avg_time:.2f}s")
                logger.info(f"  ‚Ä¢ Temps min: {min_time:.2f}s")
                logger.info(f"  ‚Ä¢ Temps max: {max_time:.2f}s")
                
                # V√©rifier que la d√©tection est rapide
                if avg_time <= 15:  # Moins de 15 secondes en moyenne
                    logger.info("‚úÖ D√©tection rapide valid√©e!")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è D√©tection lente: {avg_time:.2f}s (>15s)")
                    return False
            else:
                logger.error("‚ùå Aucun fichier d√©tect√©")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test watcher: {e}")
            return False
    
    async def test_lucidlink_cache_detection(self):
        """Test la d√©tection avec cache LucidLink"""
        logger.info("üîç Test d√©tection cache LucidLink...")
        
        try:
            from src.utils.lucidlink_utils import LucidLinkDetector, LucidLinkFileWaiter
            
            # Chercher des fichiers LucidLink existants
            lucidlink_path = Path("/Volumes/LucidLink")
            if not lucidlink_path.exists():
                logger.warning("‚ö†Ô∏è LucidLink non mont√©, test ignor√©")
                return True
            
            # Tester la d√©tection rapide
            detector = LucidLinkDetector()
            waiter = LucidLinkFileWaiter(detector)
            
            # Chercher des fichiers de test
            test_files = list(lucidlink_path.rglob("*.mov"))[:2]  # 2 premiers fichiers
            
            if not test_files:
                logger.warning("‚ö†Ô∏è Aucun fichier LucidLink trouv√© pour test")
                return True
            
            detection_times = []
            
            for test_file in test_files:
                logger.info(f"üîç Test avec: {test_file.name}")
                
                start_time = time.time()
                
                # Test de d√©tection rapide
                is_lucidlink = detector.is_lucidlink_file(test_file)
                
                if is_lucidlink:
                    # Test de stabilit√© avec timeout r√©duit
                    is_stable = await waiter.wait_for_complete_sync(test_file, max_wait=10)
                    
                    detection_time = time.time() - start_time
                    detection_times.append(detection_time)
                    
                    logger.info(f"  ‚Ä¢ D√©tection: {detection_time:.2f}s, Stable: {is_stable}")
                else:
                    logger.info(f"  ‚Ä¢ Fichier non-LucidLink")
            
            if detection_times:
                avg_time = sum(detection_times) / len(detection_times)
                logger.info(f"üìä Temps moyen d√©tection LucidLink: {avg_time:.2f}s")
                
                if avg_time <= 5:  # Moins de 5 secondes
                    logger.info("‚úÖ D√©tection LucidLink rapide!")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è D√©tection LucidLink lente: {avg_time:.2f}s")
                    return False
            else:
                logger.info("‚ÑπÔ∏è Aucun fichier LucidLink test√©")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test LucidLink: {e}")
            return False
    
    def cleanup(self):
        """Nettoie les fichiers de test"""
        try:
            if self.test_dir.exists():
                shutil.rmtree(self.test_dir)
                logger.info("üßπ Fichiers de test nettoy√©s")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur nettoyage: {e}")
    
    async def run_all_tests(self):
        """Ex√©cute tous les tests de d√©tection"""
        logger.info("üöÄ Tests de d√©tection rapide des fichiers")
        
        results = []
        
        try:
            # Test 1: Vitesse de d√©tection du watcher
            logger.info("\n" + "="*50)
            result1 = await self.test_watcher_detection_speed()
            results.append(("Vitesse watcher", result1))
            
            # Test 2: D√©tection cache LucidLink
            logger.info("\n" + "="*50)
            result2 = await self.test_lucidlink_cache_detection()
            results.append(("Cache LucidLink", result2))
            
            # R√©sultats
            logger.info("\n" + "="*50)
            logger.info("üìä R√âSULTATS DES TESTS")
            logger.info("="*50)
            
            all_passed = True
            for test_name, result in results:
                status = "‚úÖ PASSED" if result else "‚ùå FAILED"
                logger.info(f"{test_name}: {status}")
                if not result:
                    all_passed = False
            
            logger.info("="*50)
            if all_passed:
                logger.info("üéâ TOUS LES TESTS PASS√âS - D√©tection rapide valid√©e!")
            else:
                logger.error("‚ùå CERTAINS TESTS √âCHOU√âS - Optimisation n√©cessaire")
            
            return all_passed
            
        finally:
            self.cleanup()

if __name__ == "__main__":
    test = FileDetectionTest()
    result = asyncio.run(test.run_all_tests())
    sys.exit(0 if result else 1)
