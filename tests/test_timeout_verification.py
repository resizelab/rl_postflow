#!/usr/bin/env python3
"""
Test simple de v√©rification des timeouts optimis√©s
Valide que les timeouts ont bien √©t√© mis √† jour dans le code
"""

import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent))

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_timeout_values():
    """Test des valeurs de timeout dans le code"""
    logger.info("üîç V√©rification des timeouts optimis√©s...")
    
    results = []
    
    # Test 1: Timeout authentification Frame.io
    try:
        from src.integrations.frameio.auth import FrameIOAuth
        auth = FrameIOAuth()
        
        if auth.timeout == 15:
            logger.info(f"‚úÖ Timeout auth Frame.io optimis√©: {auth.timeout}s")
            results.append(("Auth Frame.io", True))
        else:
            logger.error(f"‚ùå Timeout auth Frame.io non optimis√©: {auth.timeout}s (attendu: 15s)")
            results.append(("Auth Frame.io", False))
    except Exception as e:
        logger.error(f"‚ùå Erreur test auth timeout: {e}")
        results.append(("Auth Frame.io", False))
    
    # Test 2: V√©rification des fichiers obsol√®tes
    frameio_dir = Path(__file__).parent.parent / "src/integrations/frameio"
    deprecated_dir = frameio_dir / "deprecated"
    
    serveo_files_moved = (
        (deprecated_dir / "serveo_manager.py").exists() and
        (deprecated_dir / "serveo_upload.py").exists()
    )
    
    if serveo_files_moved:
        logger.info("‚úÖ Modules serveo d√©plac√©s vers deprecated/")
        results.append(("Modules obsol√®tes", True))
    else:
        logger.warning("‚ö†Ô∏è Modules serveo pas encore d√©plac√©s")
        results.append(("Modules obsol√®tes", False))
    
    # Test 3: V√©rification du main.py
    main_path = Path(__file__).parent.parent / "main.py"
    with open(main_path, 'r') as f:
        main_content = f.read()
    
    # V√©rifier min_file_age optimis√©
    if "min_file_age', 10)" in main_content and "Optimis√©: 30s ‚Üí 10s" in main_content:
        logger.info("‚úÖ min_file_age optimis√© dans main.py: 30s ‚Üí 10s")
        results.append(("min_file_age", True))
    else:
        logger.error("‚ùå min_file_age non optimis√© dans main.py")
        results.append(("min_file_age", False))
    
    # V√©rifier tunnel Cloudflare optimis√©
    if "timeout=30" in main_content and "Optimis√©: 60s ‚Üí 30s" in main_content:
        logger.info("‚úÖ Timeout tunnel Cloudflare optimis√©: 60s ‚Üí 30s")
        results.append(("Tunnel Cloudflare", True))
    else:
        logger.error("‚ùå Timeout tunnel Cloudflare non optimis√©")
        results.append(("Tunnel Cloudflare", False))
    
    return results

def test_lucidlink_cache_timeouts():
    """Test des timeouts du cache LucidLink"""
    logger.info("üîç V√©rification timeouts cache LucidLink...")
    
    try:
        from src.utils.lucidlink_utils import LucidLinkFileWaiter
        
        waiter = LucidLinkFileWaiter()
        
        # Les timeouts par d√©faut du cache LucidLink doivent rester conservateurs
        # car ils traitent des gros fichiers
        logger.info("‚úÖ Cache LucidLink: timeouts conserv√©s (adapt√© aux gros fichiers)")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test cache LucidLink: {e}")
        return False

def main():
    """Test principal"""
    logger.info("üöÄ V√©rification des optimisations de timeout")
    
    # Test des valeurs de timeout
    logger.info("\n" + "="*50)
    timeout_results = test_timeout_values()
    
    # Test du cache LucidLink
    logger.info("\n" + "="*50)
    cache_ok = test_lucidlink_cache_timeouts()
    
    # R√©sultats
    logger.info("\n" + "="*50)
    logger.info("üìä R√âSULTATS DES V√âRIFICATIONS")
    logger.info("="*50)
    
    all_passed = True
    for test_name, result in timeout_results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    cache_status = "‚úÖ PASSED" if cache_ok else "‚ùå FAILED"
    logger.info(f"Cache LucidLink: {cache_status}")
    if not cache_ok:
        all_passed = False
    
    logger.info("="*50)
    if all_passed:
        logger.info("üéâ TOUTES LES OPTIMISATIONS VALID√âES!")
        logger.info("üìà Am√©liorations apport√©es:")
        logger.info("  ‚Ä¢ Authentification Frame.io: 30s ‚Üí 15s")
        logger.info("  ‚Ä¢ Tunnel Cloudflare: 60s ‚Üí 30s") 
        logger.info("  ‚Ä¢ D√©tection fichiers: 30s ‚Üí 10s")
        logger.info("  ‚Ä¢ Modules obsol√®tes d√©plac√©s")
    else:
        logger.error("‚ùå CERTAINES OPTIMISATIONS MANQUANTES")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
