#!/usr/bin/env python3
"""
UNDLM PostFlow - Script de setup et validation compl√®te
Ce script v√©rifie que tout est correctement configur√© pour la production
"""

import os
import json
from pathlib import Path
from datetime import datetime


def main():
    """Setup et validation compl√®te du pipeline UNDLM PostFlow"""
    
    print("üöÄ UNDLM PostFlow - Setup et Validation Compl√®te")
    print("=" * 70)
    print(f"üìÖ Date: {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
    print()
    
    # Configuration
    config_path = Path(__file__).parent.parent / "pipeline_config.json"
    
    if not config_path.exists():
        print("‚ùå ERREUR: Fichier de configuration manquant (pipeline_config.json)")
        return False
    
    with open(config_path, 'r') as f:
        config = json.load(f)
    
    volume_path = Path(config['lucidlink']['base_path'])
    volume_name = config['lucidlink']['volume_name']
    
    print(f"üìç Volume LucidLink: {volume_name}")
    print(f"üìç Chemin: {volume_path}")
    print()
    
    # 1. V√©rification du volume
    print("1Ô∏è‚É£ V√©rification du volume LucidLink")
    print("-" * 40)
    
    if not volume_path.exists():
        print(f"‚ùå Volume non accessible: {volume_path}")
        print("   V√©rifiez que LucidLink est connect√© et que le volume o2b-undllm est mont√©")
        return False
    
    print(f"‚úÖ Volume accessible: {volume_path}")
    print()
    
    # 2. V√©rification de la structure
    print("2Ô∏è‚É£ V√©rification de la structure de dossiers")
    print("-" * 40)
    
    key_folders = [
        "2_IN/_FROM_GRADING/UNDLM_SOURCES",
        "3_PROJECTS/2_VFX/SEQUENCES",
        "3_PROJECTS/2_VFX/_TEMPLATES",
        "4_OUT/2_FROM_VFX/BY_SHOT",
        "5_DELIVERABLES/MASTER"
    ]
    
    for folder in key_folders:
        folder_path = volume_path / folder
        if folder_path.exists():
            print(f"‚úÖ {folder}")
        else:
            print(f"‚ùå {folder}")
            return False
    
    print()
    
    # 3. V√©rification des donn√©es
    print("3Ô∏è‚É£ V√©rification des donn√©es CSV")
    print("-" * 40)
    
    csv_path = Path(__file__).parent.parent / "data" / "shots.csv"
    if csv_path.exists():
        print(f"‚úÖ Fichier CSV trouv√©: {csv_path}")
        
        # Import du parser
        try:
            import sys
            sys.path.insert(0, str(Path(__file__).parent.parent))
            from src.parsers.csv_parser import CSVParser
            
            parser = CSVParser(str(csv_path))
            data = parser.parse()
            
            if data and data.shots:
                print(f"‚úÖ {len(data.shots)} plans charg√©s depuis le CSV")
                
                # Compter les sc√®nes uniques
                unique_scenes = set()
                unique_sources = set()
                
                for shot in data.shots:
                    if shot.scene_name:
                        unique_scenes.add(shot.scene_name)
                    if shot.source_file:
                        unique_sources.add(shot.source_file)
                
                print(f"üìä {len(unique_scenes)} sc√®nes uniques")
                print(f"üìÅ {len(unique_sources)} fichiers sources")
            else:
                print("‚ùå Erreur de parsing du CSV")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'import ou de parsing: {e}")
            return False
    else:
        print(f"‚ùå Fichier CSV manquant: {csv_path}")
        return False
    
    print()
    
    # 4. V√©rification des sources
    print("4Ô∏è‚É£ V√©rification des sources")
    print("-" * 40)
    
    sources_path = volume_path / "2_IN/_FROM_GRADING/UNDLM_SOURCES"
    source_files = list(sources_path.glob("*.mov"))
    
    print(f"üì• Sources disponibles: {len(source_files)} fichiers")
    
    if len(source_files) == 0:
        print("‚ö†Ô∏è Aucun fichier source trouv√© - normal si pas encore ajout√©s")
        print("   Les sources seront ajout√©es plus tard dans:")
        print(f"   {sources_path}")
    else:
        print("‚úÖ Fichiers sources d√©tect√©s")
        for i, source_file in enumerate(source_files[:5]):  # Afficher les 5 premiers
            print(f"   üìÑ {source_file.name}")
        if len(source_files) > 5:
            print(f"   ... et {len(source_files) - 5} autres fichiers")
    
    print()
    
    # 5. V√©rification des templates
    print("5Ô∏è‚É£ V√©rification des templates After Effects")
    print("-" * 40)
    
    templates_path = volume_path / "3_PROJECTS/2_VFX/_TEMPLATES"
    template_files = list(templates_path.glob("*.aep"))
    
    print(f"üé® Templates disponibles: {len(template_files)} fichiers")
    
    if len(template_files) == 0:
        print("‚ö†Ô∏è Aucun template trouv√© - √† cr√©er")
        print("   Templates recommand√©s:")
        print("   - UNDLM_SHOT_TEMPLATE.aep (template de base)")
        print("   - UNDLM_CHARACTER_TEMPLATE.aep (template personnages)")
        print("   - UNDLM_ENVIRONMENT_TEMPLATE.aep (template environnements)")
    else:
        print("‚úÖ Templates d√©tect√©s")
        for template_file in template_files:
            print(f"   üé¨ {template_file.name}")
    
    print()
    
    # 6. Test des permissions
    print("6Ô∏è‚É£ Test des permissions")
    print("-" * 40)
    
    test_file = volume_path / "test_permissions.txt"
    try:
        with open(test_file, 'w') as f:
            f.write("Test de permissions")
        test_file.unlink()
        print("‚úÖ Permissions en lecture/√©criture OK")
    except Exception as e:
        print(f"‚ùå Probl√®me de permissions: {e}")
        return False
    
    print()
    
    # 7. R√©sum√© et prochaines √©tapes
    print("7Ô∏è‚É£ R√©sum√© et prochaines √©tapes")
    print("-" * 40)
    
    print("üéâ SETUP COMPLET ET VALID√â")
    print()
    print("üìã √âtat actuel:")
    print(f"   ‚úÖ Volume LucidLink: {volume_name} accessible")
    print(f"   ‚úÖ Structure de dossiers: compl√®te")
    print(f"   ‚úÖ Donn√©es CSV: {len(data.shots)} plans pr√™ts")
    print(f"   ‚úÖ Permissions: lecture/√©criture OK")
    print(f"   ‚è≥ Sources: {len(source_files)} fichiers (√† compl√©ter)")
    print(f"   ‚è≥ Templates AE: {len(template_files)} fichiers (√† compl√©ter)")
    print()
    print("üöÄ Prochaines √©tapes:")
    print("   1. Ajout des sources dans 2_IN/_FROM_GRADING/UNDLM_SOURCES/")
    print("   2. Cr√©ation des templates AE dans 3_PROJECTS/2_VFX/_TEMPLATES/")
    print("   3. Configuration des webhooks Discord/Frame.io")
    print("   4. Test du pipeline complet avec python main.py")
    print("   5. Lancement de la production")
    print()
    print("üìö Documentation disponible:")
    print(f"   - README: {Path(__file__).parent.parent / 'README.md'}")
    print(f"   - Config serveur: {volume_path / '1_REF_FILES/1_BRIEFS_AND_REPORTS/README_STRUCTURE.md'}")
    print(f"   - Tests: python tests/test_server_structure.py")
    print()
    
    return True


if __name__ == "__main__":
    success = main()
    
    if success:
        print("‚úÖ SUCC√àS: Pipeline UNDLM PostFlow pr√™t pour la production")
        exit(0)
    else:
        print("‚ùå √âCHEC: Probl√®mes d√©tect√©s dans la configuration")
        exit(1)
