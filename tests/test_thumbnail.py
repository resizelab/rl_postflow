#!/usr/bin/env python3
"""
Test du ThumbnailGenerator pour identifier les erreurs
"""
import sys
import asyncio
import logging
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.utils.thumbnail import ThumbnailGenerator
from src.utils.config import ConfigManager

# Configuration du logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_thumbnail_generation():
    """Test de g√©n√©ration de thumbnail"""
    try:
        # Cr√©er un fichier vid√©o test factice
        test_video = "/tmp/test_video.mp4"
        
        # V√©rifier s'il existe d√©j√† un fichier vid√©o dans les exemples
        project_root = Path(__file__).parent
        examples_dir = project_root / "examples"
        
        # Chercher des fichiers vid√©o dans le projet
        video_files = []
        for ext in [".mp4", ".mov", ".avi", ".mkv"]:
            video_files.extend(list(project_root.rglob(f"*{ext}")))
        
        if video_files:
            test_video = str(video_files[0])
            logger.info(f"üìπ Fichier vid√©o trouv√©: {test_video}")
        else:
            logger.warning("‚ö†Ô∏è Aucun fichier vid√©o trouv√© pour le test")
            
            # Cr√©er un fichier vid√©o test avec ffmpeg
            import subprocess
            try:
                cmd = [
                    "ffmpeg",
                    "-f", "lavfi",
                    "-i", "testsrc=duration=10:size=320x240:rate=30",
                    "-y",
                    test_video
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    logger.info(f"‚úÖ Fichier vid√©o test cr√©√©: {test_video}")
                else:
                    logger.error(f"‚ùå Erreur cr√©ation vid√©o test: {result.stderr}")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå Impossible de cr√©er le fichier vid√©o test: {e}")
                return False
        
        # Initialiser le g√©n√©rateur
        config_path = project_root / "config" / "integrations.json"
        if config_path.exists():
            config = ConfigManager(str(config_path))
            generator = ThumbnailGenerator(config)
        else:
            generator = ThumbnailGenerator()
        
        # Tester la g√©n√©ration
        logger.info("üñºÔ∏è Test de g√©n√©ration de thumbnail...")
        
        thumbnail_path = await generator.generate_thumbnail(
            video_path=test_video,
            output_dir="temp/thumbnails",
            timestamp="00:00:02",
            size="320x180"
        )
        
        if thumbnail_path:
            logger.info(f"‚úÖ Thumbnail g√©n√©r√© avec succ√®s: {thumbnail_path}")
            
            # V√©rifier que le fichier existe
            if Path(thumbnail_path).exists():
                logger.info(f"‚úÖ Fichier thumbnail confirm√©: {Path(thumbnail_path).stat().st_size} bytes")
                return True
            else:
                logger.error("‚ùå Fichier thumbnail non trouv√© apr√®s g√©n√©ration")
                return False
        else:
            logger.error("‚ùå G√©n√©ration de thumbnail √©chou√©e")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur durant le test: {e}")
        return False

async def test_video_info():
    """Test d'obtention d'informations vid√©o"""
    try:
        # Chercher un fichier vid√©o
        project_root = Path(__file__).parent
        video_files = []
        for ext in [".mp4", ".mov", ".avi", ".mkv"]:
            video_files.extend(list(project_root.rglob(f"*{ext}")))
        
        if not video_files:
            logger.warning("‚ö†Ô∏è Aucun fichier vid√©o trouv√© pour le test d'info")
            return False
        
        test_video = str(video_files[0])
        logger.info(f"üìπ Test d'info pour: {test_video}")
        
        generator = ThumbnailGenerator()
        info = generator.get_video_info(test_video)
        
        if info:
            logger.info(f"‚úÖ Informations vid√©o obtenues:")
            for key, value in info.items():
                logger.info(f"  {key}: {value}")
            return True
        else:
            logger.error("‚ùå Impossible d'obtenir les informations vid√©o")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test info vid√©o: {e}")
        return False

async def main():
    """Fonction principale de test"""
    logger.info("üß™ Test du ThumbnailGenerator")
    logger.info("=" * 50)
    
    # Test 1: V√©rifier ffmpeg
    logger.info("1. Test de ffmpeg...")
    generator = ThumbnailGenerator()
    
    # Test 2: G√©n√©ration de thumbnail
    logger.info("2. Test de g√©n√©ration de thumbnail...")
    thumb_ok = await test_thumbnail_generation()
    
    # Test 3: Informations vid√©o
    logger.info("3. Test d'obtention d'informations vid√©o...")
    info_ok = await test_video_info()
    
    # R√©sum√©
    logger.info("\nüìä R√âSULTATS DES TESTS")
    logger.info("-" * 30)
    logger.info(f"{'‚úÖ' if thumb_ok else '‚ùå'} G√©n√©ration thumbnail: {'OK' if thumb_ok else 'ECHEC'}")
    logger.info(f"{'‚úÖ' if info_ok else '‚ùå'} Informations vid√©o: {'OK' if info_ok else 'ECHEC'}")
    
    return thumb_ok and info_ok

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("üõë Test interrompu")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• Erreur fatale: {e}")
        sys.exit(1)
