#!/usr/bin/env python3
"""
Script pour explorer la structure Frame.io et trouver les fichiers r√©cents
"""

import asyncio
import sys
from pathlib import Path
import logging
import httpx
from datetime import datetime

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.integrations.frameio.auth import FrameIOAuth
from src.integrations.frameio.upload import FrameIOUploadManager
from src.utils.config import ConfigManager

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def explore_frameio_structure():
    """
    Explorer la structure Frame.io pour trouver les fichiers r√©cents
    """
    try:
        # Charger la configuration
        config = ConfigManager()
        
        # Authentification Frame.io
        project_root = Path(__file__).parent
        auth = FrameIOAuth(project_root)
        await auth.ensure_valid_token()
        
        # Gestionnaire d'upload
        upload_manager = FrameIOUploadManager(config)
        
        # Obtenir les informations de base
        account_id = upload_manager.account_id
        workspace_id = upload_manager.workspace_id
        project_id = config.get('frameio.project_id')
        root_folder_id = config.get('frameio.root_folder_id')
        
        logger.info(f"üìä Account ID: {account_id}")
        logger.info(f"üìä Workspace ID: {workspace_id}")
        logger.info(f"üìä Project ID: {project_id}")
        logger.info(f"üìä Root Folder ID: {root_folder_id}")
        
        # Explorer le root folder
        if root_folder_id:
            await explore_folder(upload_manager, root_folder_id, "ROOT", depth=0)
        
        # Explorer le projet
        if project_id:
            logger.info(f"\nüîç Exploration du projet {project_id}")
            
            # Obtenir les informations du projet
            url = f"https://api.frame.io/v4/accounts/{account_id}/projects/{project_id}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    url,
                    headers=upload_manager._get_headers(),
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    project_data = response.json()
                    data = project_data.get('data', project_data)
                    
                    logger.info(f"‚úÖ Projet trouv√©: {data.get('name')}")
                    
                    # Obtenir le root folder du projet
                    project_root_folder = data.get('root_folder_id')
                    if project_root_folder:
                        logger.info(f"üìÅ Root folder du projet: {project_root_folder}")
                        await explore_folder(upload_manager, project_root_folder, "PROJECT_ROOT", depth=0)
                else:
                    logger.error(f"‚ùå Erreur r√©cup√©ration projet: {response.status_code}")
                    logger.error(f"‚ùå R√©ponse: {response.text}")
        
        # V√©rifier si l'ID probl√©matique pourrait √™tre un placeholder ou temporaire
        logger.info(f"\nüîç Analyse de l'ID probl√©matique: 1d5b2082-a4bf-4999-a2ad-86bcbc459947")
        
        # Voir si c'est dans les logs ou cache
        await check_logs_for_id("1d5b2082-a4bf-4999-a2ad-86bcbc459947")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()

async def explore_folder(upload_manager, folder_id, folder_name, depth=0):
    """
    Explorer un dossier Frame.io
    """
    try:
        indent = "  " * depth
        logger.info(f"{indent}üìÅ Exploration du dossier: {folder_name} (ID: {folder_id})")
        
        # Obtenir le contenu du dossier
        url = f"https://api.frame.io/v4/folders/{folder_id}/children"
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                url,
                headers=upload_manager._get_headers(),
                timeout=30.0
            )
            
            if response.status_code == 200:
                data = response.json()
                items = data.get('data', [])
                
                logger.info(f"{indent}   üìä Trouv√© {len(items)} √©l√©ments")
                
                files_found = []
                folders_found = []
                
                for item in items:
                    item_type = item.get('type')
                    item_id = item.get('id')
                    item_name = item.get('name')
                    
                    if item_type == 'file':
                        files_found.append(item)
                        logger.info(f"{indent}   üìÑ Fichier: {item_name} (ID: {item_id})")
                        
                        # V√©rifier si c'est l'ID probl√©matique
                        if item_id == "1d5b2082-a4bf-4999-a2ad-86bcbc459947":
                            logger.info(f"{indent}      üéØ TROUV√â L'ID PROBL√âMATIQUE DANS CE DOSSIER !")
                        
                        # Afficher les d√©tails du fichier
                        status = item.get('status')
                        created_at = item.get('created_at')
                        updated_at = item.get('updated_at')
                        
                        logger.info(f"{indent}      Status: {status}")
                        logger.info(f"{indent}      Cr√©√©: {created_at}")
                        logger.info(f"{indent}      Modifi√©: {updated_at}")
                        
                    elif item_type == 'folder':
                        folders_found.append(item)
                        logger.info(f"{indent}   üìÅ Dossier: {item_name} (ID: {item_id})")
                
                # Explorer les sous-dossiers (limit√© √† 2 niveaux)
                if depth < 2:
                    for folder in folders_found:
                        await explore_folder(upload_manager, folder['id'], folder['name'], depth + 1)
                
            else:
                logger.error(f"{indent}‚ùå Erreur exploration dossier: {response.status_code}")
                logger.error(f"{indent}‚ùå R√©ponse: {response.text}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur exploration dossier {folder_id}: {e}")

async def check_logs_for_id(file_id):
    """
    V√©rifier les logs pour des traces de cet ID
    """
    try:
        logger.info(f"üîç Recherche dans les logs pour l'ID: {file_id}")
        
        # Chercher dans les logs
        logs_dir = Path(__file__).parent / "logs"
        if logs_dir.exists():
            for log_file in logs_dir.glob("*.log"):
                logger.info(f"   üìã V√©rification: {log_file.name}")
                
                try:
                    with open(log_file, 'r') as f:
                        content = f.read()
                        if file_id in content:
                            logger.info(f"      ‚úÖ ID trouv√© dans {log_file.name}")
                            
                            # Extraire les lignes contenant l'ID
                            lines = content.split('\n')
                            for i, line in enumerate(lines):
                                if file_id in line:
                                    logger.info(f"      üìù Ligne {i+1}: {line.strip()}")
                        else:
                            logger.info(f"      ‚ùå ID non trouv√© dans {log_file.name}")
                except Exception as e:
                    logger.warning(f"      ‚ö†Ô∏è Erreur lecture {log_file.name}: {e}")
        
        # V√©rifier les fichiers de cache
        cache_files = [
            "config/frameio_structure_cache.json",
            "config/frameio_structure.json"
        ]
        
        for cache_file in cache_files:
            cache_path = Path(__file__).parent / cache_file
            if cache_path.exists():
                logger.info(f"   üìã V√©rification cache: {cache_file}")
                
                try:
                    with open(cache_path, 'r') as f:
                        content = f.read()
                        if file_id in content:
                            logger.info(f"      ‚úÖ ID trouv√© dans le cache {cache_file}")
                        else:
                            logger.info(f"      ‚ùå ID non trouv√© dans le cache {cache_file}")
                except Exception as e:
                    logger.warning(f"      ‚ö†Ô∏è Erreur lecture cache {cache_file}: {e}")
    
    except Exception as e:
        logger.error(f"‚ùå Erreur v√©rification logs: {e}")

if __name__ == "__main__":
    asyncio.run(explore_frameio_structure())
