#!/usr/bin/env python3
"""
Test d'optimisation des timeouts du pipeline RL PostFlow
V√©rifie que les timeouts optimis√©s fonctionnent correctement
"""

import asyncio
import sys
import logging
from pathlib import Path
import time
import os

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent))

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_frameio_auth_timeout():
    """Test du timeout optimis√© pour l'authentification Frame.io"""
    logger.info("üîç Test timeout authentification Frame.io...")
    
    try:
        # Import direct pour √©viter les probl√®mes d'importation
        from src.integrations.frameio.auth import FrameIOAuth
        
        # Cr√©er une instance d'auth
        auth = FrameIOAuth()
        
        # V√©rifier que le timeout est bien optimis√©
        assert auth.timeout == 15, f"Timeout attendu: 15s, obtenu: {auth.timeout}s"
        logger.info(f"‚úÖ Timeout auth optimis√©: {auth.timeout}s")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur test auth timeout: {e}")
        return False

async def test_cloudflare_tunnel_timeout():
    """Test du timeout optimis√© pour le d√©marrage du tunnel Cloudflare"""
    logger.info("üîç Test timeout tunnel Cloudflare...")
    
    try:
        # V√©rifier que cloudflared est disponible
        import subprocess
        result = subprocess.run(["which", "cloudflared"], capture_output=True, text=True)
        if result.returncode != 0:
            logger.warning("‚ö†Ô∏è cloudflared non install√©, test ignor√©")
            return True
        
        from src.integrations.frameio.cloudflare_manager import CloudflareManager
        from src.integrations.frameio.range_server import RangeFileServer
        
        # Cr√©er un serveur HTTP simple
        server = RangeFileServer()
        server.start()  # Utiliser start() au lieu de await start()
        
        # Cr√©er le gestionnaire Cloudflare
        manager = CloudflareManager()
        
        # Tester le d√©marrage avec timeout optimis√©
        start_time = time.time()
        tunnel_url = manager.start_tunnel(server.actual_port, timeout=30)
        elapsed = time.time() - start_time
        
        if tunnel_url:
            logger.info(f"‚úÖ Tunnel d√©marr√© en {elapsed:.2f}s: {tunnel_url}")
            # Arr√™ter le tunnel
            manager.stop_tunnel()
            result = True
        else:
            logger.warning(f"‚ö†Ô∏è Tunnel non d√©marr√© en {elapsed:.2f}s (normal si pas de connexion)")
            result = True  # Pas d'erreur si pas de connexion
        
        # Arr√™ter le serveur
        server.stop()
        
        return result
    except Exception as e:
        logger.error(f"‚ùå Erreur test tunnel timeout: {e}")
        return False

async def test_lucidlink_cache_stability():
    """Test de stabilit√© du cache LucidLink avec timeouts optimis√©s"""
    logger.info("üîç Test stabilit√© cache LucidLink...")
    
    try:
        from src.utils.lucidlink_utils import LucidLinkDetector, LucidLinkFileWaiter
        
        # Cr√©er les utilitaires LucidLink
        detector = LucidLinkDetector()
        waiter = LucidLinkFileWaiter(detector)
        
        # Chercher un fichier LucidLink existant pour test
        lucidlink_path = Path("/Volumes/LucidLink")
        if not lucidlink_path.exists():
            logger.warning("‚ö†Ô∏è LucidLink non mont√©, test ignor√©")
            return True
        
        # Chercher un fichier de test
        test_files = list(lucidlink_path.rglob("*.mp4"))[:1]  # Premier fichier .mp4
        
        if not test_files:
            logger.warning("‚ö†Ô∏è Aucun fichier test LucidLink trouv√©")
            return True
        
        test_file = test_files[0]
        logger.info(f"üìÇ Test avec fichier: {test_file.name}")
        
        # Test de d√©tection
        is_lucidlink = detector.is_lucidlink_file(test_file)
        logger.info(f"üîç D√©tection LucidLink: {is_lucidlink}")
        
        # Test de synchronisation (timeout r√©duit pour test)
        start_time = time.time()
        sync_ok = await waiter.wait_for_complete_sync(test_file, max_wait=30)
        elapsed = time.time() - start_time
        
        logger.info(f"‚úÖ Synchronisation test√©e en {elapsed:.2f}s: {sync_ok}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur test LucidLink: {e}")
        return False

async def test_pipeline_timeout_values():
    """Test des valeurs de timeout dans le pipeline principal"""
    logger.info("üîç Test valeurs timeout pipeline principal...")
    
    try:
        # Lire le fichier main.py pour v√©rifier les valeurs
        main_path = Path(__file__).parent.parent / "main.py"
        with open(main_path, 'r') as f:
            content = f.read()
        
        # V√©rifier que le timeout du tunnel Cloudflare est optimis√©
        if "timeout=30" in content and "Optimis√©: 60s ‚Üí 30s" in content:
            logger.info("‚úÖ Timeout tunnel Cloudflare optimis√© dans main.py")
            tunnel_ok = True
        else:
            logger.warning("‚ö†Ô∏è Timeout tunnel Cloudflare non optimis√© dans main.py")
            tunnel_ok = False
        
        # V√©rifier le fichier auth.py
        auth_path = Path(__file__).parent.parent / "src/integrations/frameio/auth.py"
        with open(auth_path, 'r') as f:
            auth_content = f.read()
        
        if "self.timeout = 15" in auth_content and "Optimis√©: 30s ‚Üí 15s" in auth_content:
            logger.info("‚úÖ Timeout authentification Frame.io optimis√©")
            auth_ok = True
        else:
            logger.warning("‚ö†Ô∏è Timeout authentification Frame.io non optimis√©")
            auth_ok = False
        
        return tunnel_ok and auth_ok
    except Exception as e:
        logger.error(f"‚ùå Erreur test valeurs timeout: {e}")
        return False

async def test_timeout_optimization():
    """Test principal des optimisations de timeout"""
    logger.info("üöÄ Test des optimisations de timeout")
    
    results = []
    
    # Test 1: Valeurs de timeout dans le code
    logger.info("\n" + "="*50)
    result1 = await test_pipeline_timeout_values()
    results.append(("Valeurs timeout", result1))
    
    # Test 2: Authentification Frame.io
    logger.info("\n" + "="*50)
    result2 = await test_frameio_auth_timeout()
    results.append(("Auth Frame.io", result2))
    
    # Test 3: Tunnel Cloudflare
    logger.info("\n" + "="*50)
    result3 = await test_cloudflare_tunnel_timeout()
    results.append(("Tunnel Cloudflare", result3))
    
    # Test 4: Cache LucidLink
    logger.info("\n" + "="*50)
    result4 = await test_lucidlink_cache_stability()
    results.append(("Cache LucidLink", result4))
    
    # R√©sultats
    logger.info("\n" + "="*50)
    logger.info("üìä R√âSULTATS DES TESTS")
    logger.info("="*50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    logger.info("="*50)
    if all_passed:
        logger.info("üéâ TOUS LES TESTS PASS√âS - Optimisations valid√©es!")
    else:
        logger.error("‚ùå CERTAINS TESTS √âCHOU√âS - V√©rification n√©cessaire")
    
    return all_passed

if __name__ == "__main__":
    asyncio.run(test_timeout_optimization())
