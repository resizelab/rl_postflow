#!/usr/bin/env python3
"""
Test d'upload r√©el avec un fichier du syst√®me LucidLink
Utilise ngrok pour exposer le fichier localement
"""

import asyncio
import sys
import os
from pathlib import Path
import logging

# Ajouter le chemin du projet
sys.path.insert(0, str(Path(__file__).parent))

from src.integrations.frameio.auth import FrameIOAuth
from src.integrations.frameio.production_upload import upload_file_to_frameio

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_real_upload():
    """Test d'upload r√©el avec un fichier depuis LucidLink"""
    
    try:
        # 1. Trouver un fichier r√©el √† uploader
        lucidlink_base = Path("/Volumes/resizelab/o2b-undllm/4_OUT/2_FROM_VFX/BY_SHOT/UNDLM_00001")
        
        # Chercher les fichiers disponibles
        video_files = []
        if lucidlink_base.exists():
            for ext in ['.mov', '.mp4', '.avi']:
                video_files.extend(list(lucidlink_base.glob(f"*{ext}")))
        
        if not video_files:
            logger.error(f"‚ùå Aucun fichier vid√©o trouv√© dans {lucidlink_base}")
            return False
        
        # Prendre le premier fichier trouv√©
        file_to_upload = video_files[0]
        logger.info(f"üìÅ Fichier s√©lectionn√©: {file_to_upload}")
        logger.info(f"üìä Taille: {file_to_upload.stat().st_size / (1024*1024):.2f} MB")
        
        # 2. Initialiser l'auth Frame.io
        logger.info("üîë Initialisation de l'authentification Frame.io...")
        auth = FrameIOAuth(Path(__file__).parent)
        
        # V√©rifier l'authentification
        if not await auth.test_connection():
            logger.error("‚ùå √âchec de l'authentification Frame.io")
            return False
        
        logger.info("‚úÖ Authentification Frame.io OK")
        
        # 3. Param√®tres d'upload
        project_name = "UNDLM_DOCU"
        scene_name = "UNDLM_00001"
        
        # 4. Configuration Discord (optionnel)
        discord_webhook = os.getenv("DISCORD_WEBHOOK_URL")
        
        # 5. Lancer l'upload avec la fonction utilitaire
        logger.info("üöÄ D√©marrage de l'upload avec ngrok...")
        
        result = await upload_file_to_frameio(
            file_path=file_to_upload,
            auth=auth,
            discord_webhook_url=discord_webhook,
            project_name=project_name
        )
        
        if result['success']:
            logger.info("üéâ Upload r√©ussi!")
            logger.info(f"üìä R√©sultat:")
            logger.info(f"   - File ID: {result['file_id']}")
            logger.info(f"   - URL de visualisation: {result['view_url']}")
            
            # Informations suppl√©mentaires si disponibles
            if 'folder_path' in result:
                logger.info(f"   - Chemin Frame.io: {result['folder_path']}")
            if 'ngrok_url' in result:
                logger.info(f"   - URL ngrok utilis√©e: {result['ngrok_url']}")
            if 'filename' in result:
                logger.info(f"   - Nom du fichier: {result['filename']}")
            
            return True
        else:
            logger.error("‚ùå Upload √©chou√©")
            logger.error(f"Erreur: {result.get('error', 'Erreur inconnue')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur dans le test: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Fonction principale"""
    
    logger.info("üé¨ TEST D'UPLOAD R√âEL - RL POSTFLOW")
    logger.info("=" * 60)
    
    success = await test_real_upload()
    
    if success:
        logger.info("üéâ Test d'upload r√©el r√©ussi!")
        logger.info("‚úÖ Le pipeline Frame.io + ngrok fonctionne parfaitement")
        logger.info("üé¨ Votre fichier est maintenant disponible dans Frame.io")
    else:
        logger.error("‚ùå Test d'upload r√©el √©chou√©")
        logger.error("üîç V√©rifiez les logs pour plus de d√©tails")
    
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
