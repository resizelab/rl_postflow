#!/usr/bin/env python3
"""
üé¨ G√©n√©rateur Final After Effects - RL PostFlow v4.1.1
Guide interactif pour convertir les scripts .jsx en projets .aep
"""

import os
import sys
import time
from pathlib import Path

def check_ae_project_created(sequence_id):
    """V√©rifie qu'un projet .aep a √©t√© cr√©√©."""
    sequences_path = Path("/Volumes/resizelab/o2b-undllm/3_PROJECTS/2_ANIM/SEQUENCES")
    aep_file = sequences_path / sequence_id / "_AE" / f"{sequence_id}_01.aep"
    
    if aep_file.exists():
        size_mb = aep_file.stat().st_size / (1024 * 1024)
        return True, size_mb
    return False, 0

def wait_for_project_creation(sequence_id):
    """Attend que le projet .aep soit cr√©√©."""
    
    print(f"‚è≥ Attente cr√©ation {sequence_id}_01.aep...")
    print("   (Le script AE est en cours d'ex√©cution)")
    
    check_count = 0
    while check_count < 60:  # Max 10 minutes d'attente
        exists, size_mb = check_ae_project_created(sequence_id)
        
        if exists:
            print(f"‚úÖ {sequence_id}_01.aep cr√©√© ! ({size_mb:.1f} MB)")
            return True
        
        time.sleep(10)
        check_count += 1
        if check_count % 6 == 0:  # Toutes les minutes
            print(f"   üì° V√©rification... ({check_count//6} min)")
    
    print(f"‚è∞ Timeout - {sequence_id} non cr√©√© apr√®s 10 minutes")
    return False

def guide_ae_execution(sequence_id, script_name):
    """Guide l'utilisateur pour ex√©cuter le script AE."""
    
    ae_scripts_path = Path(__file__).parent / "ae_scripts"
    script_path = ae_scripts_path / script_name
    
    if not script_path.exists():
        print(f"‚ùå Script manquant : {script_path}")
        return False
    
    print(f"\nüé¨ **G√âN√âRATION {sequence_id}**")
    print("=" * 40)
    print(f"üìÑ Script : {script_name}")
    print(f"üìÇ Dossier : {ae_scripts_path}")
    print()
    print("üìã **INSTRUCTIONS AFTER EFFECTS :**")
    print("   1. Ouvrir After Effects 2025")
    print("   2. Menu : Fichier > Scripts > Ex√©cuter le fichier de script...")
    print(f"   3. Naviguer vers : {ae_scripts_path}")
    print(f"   4. S√©lectionner : {script_name}")
    print("   5. Cliquer : Ouvrir")
    print("   6. ‚ö†Ô∏è  NE PAS FERMER AE - Laisser le script s'ex√©cuter")
    print()
    
    input("‚úã Appuyez sur Entr√©e APR√àS avoir lanc√© le script dans AE...")
    
    # Attendre que le projet soit cr√©√©
    return wait_for_project_creation(sequence_id)

def validate_all_projects():
    """Valide que tous les projets ont √©t√© cr√©√©s."""
    
    sequences = ['SQ01', 'SQ02', 'SQ03']
    expected_data = {
        'SQ01': {'plans': 34, 'duration': 2.9},
        'SQ02': {'plans': 39, 'duration': 2.8}, 
        'SQ03': {'plans': 20, 'duration': 2.1}
    }
    
    print(f"\nüéØ **VALIDATION FINALE**")
    print("=" * 50)
    
    results = {}
    total_size = 0
    
    for seq_id in sequences:
        exists, size_mb = check_ae_project_created(seq_id)
        results[seq_id] = exists
        expected = expected_data[seq_id]
        
        if exists:
            total_size += size_mb
            print(f"   ‚úÖ {seq_id}_01.aep ({size_mb:.1f} MB)")
            print(f"      üìã {expected['plans']} plans ‚Ä¢ {expected['duration']} min")
        else:
            print(f"   ‚ùå {seq_id}_01.aep - MANQUANT")
    
    success_count = sum(results.values())
    
    print(f"\nüìä **R√âSULTATS VALIDATION**")
    print(f"   Projets AE cr√©√©s : {success_count}/3")
    print(f"   Taille totale : {total_size:.1f} MB")
    
    if success_count == 3:
        print(f"\nüéâ **VALIDATION COMPL√àTE R√âUSSIE !**")
        print(f"   ‚úÖ 3 projets After Effects g√©n√©r√©s")
        print(f"   ‚úÖ 93 plans import√©s et organis√©s") 
        print(f"   ‚úÖ ~7.8 minutes d'animation pr√™tes")
        print(f"   ‚úÖ Structure automatis√©e valid√©e")
        print()
        print(f"üîç **TESTS √Ä EFFECTUER :**")
        print(f"   1. Ouvrir chaque projet .aep dans AE")
        print(f"   2. V√©rifier composition principale (SQxx_UNDLM_v001)")
        print(f"   3. Tester switch Edit/Graded sur quelques plans")
        print(f"   4. Valider timeline et organisation")
        print()
        print(f"üöÄ **PROCHAINES √âTAPES :**")
        print(f"   ‚Üí Si tests OK : D√©ploiement SQ04-SQ28 (423 plans)")
        print(f"   ‚Üí Int√©gration pipeline RL PostFlow complet")
        print(f"   ‚Üí Formation √©quipe workflow automatis√©")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è  **VALIDATION PARTIELLE**")
        failed_sequences = [seq for seq, success in results.items() if not success]
        print(f"   üîß S√©quences √† reprendre : {', '.join(failed_sequences)}")
        print(f"   üí° Action : Relancer les scripts AE manquants")
        return False

def main():
    """Workflow principal de g√©n√©ration."""
    
    print("üé¨ G√âN√âRATEUR FINAL AFTER EFFECTS 2025")
    print("=" * 60)
    print("Objectif : Convertir 3 scripts .jsx ‚Üí 3 projets .aep")
    print("Mode : Validation RL PostFlow v4.1.1")
    print()
    
    # Scripts √† ex√©cuter
    scripts_to_process = [
        ("SQ01", "RL_PostFlow_SQ01_GENERATION.jsx"),
        ("SQ02", "RL_PostFlow_SQ02_GENERATION.jsx"),
        ("SQ03", "RL_PostFlow_SQ03_GENERATION.jsx")
    ]
    
    # V√©rifier projets existants
    print("üîç V√©rification projets existants...")
    existing_count = 0
    
    for seq_id, _ in scripts_to_process:
        exists, size_mb = check_ae_project_created(seq_id)
        if exists:
            print(f"   ‚úÖ {seq_id}_01.aep d√©j√† cr√©√© ({size_mb:.1f} MB)")
            existing_count += 1
        else:
            print(f"   ‚è≥ {seq_id}_01.aep √† g√©n√©rer")
    
    if existing_count == 3:
        print(f"\nüéâ Tous les projets existent d√©j√† !")
        validate_all_projects()
        return
    
    print(f"\nüìã {3 - existing_count} projets √† g√©n√©rer...")
    print()
    
    # Traiter chaque script
    for seq_id, script_name in scripts_to_process:
        exists, _ = check_ae_project_created(seq_id)
        
        if exists:
            print(f"‚è≠Ô∏è  {seq_id} d√©j√† g√©n√©r√©, passage au suivant...")
            continue
        
        # Guider l'ex√©cution AE
        success = guide_ae_execution(seq_id, script_name)
        
        if not success:
            print(f"‚ùå √âchec g√©n√©ration {seq_id}")
            print(f"üí° Vous pouvez relancer ce script plus tard")
            break
        
        print(f"‚úÖ {seq_id} g√©n√©r√© avec succ√®s !")
        
        # Pause avant s√©quence suivante
        if seq_id != scripts_to_process[-1][0]:
            print("\n‚è≥ Pause 5s avant s√©quence suivante...")
            time.sleep(5)
    
    # Validation finale
    print("\n" + "="*60)
    validate_all_projects()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  G√©n√©ration interrompue par l'utilisateur")
        print("üí° Vous pouvez relancer le script pour continuer")
    except Exception as e:
        print(f"\n‚ùå Erreur : {e}")
        print("üí° V√©rifiez les logs ci-dessus et relancez si n√©cessaire")
